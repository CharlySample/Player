/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGRUBY
#define SWIGRUBY
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



#include <ruby.h>

/* Ruby 1.9.1 has a "memoisation optimisation" when compiling with GCC which
 * breaks using rb_intern as an lvalue, as SWIG does.  We work around this
 * issue for now by disabling this.
 * https://sourceforge.net/tracker/?func=detail&aid=2859614&group_id=1645&atid=101645
 */
#ifdef rb_intern
# undef rb_intern
#endif

/* Remove global macros defined in Ruby's win32.h */
#ifdef write
# undef write
#endif
#ifdef read
# undef read
#endif
#ifdef bind
# undef bind
#endif
#ifdef close
# undef close
#endif
#ifdef connect
# undef connect
#endif


/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long) (x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long) (x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/* RSTRING_LEN, etc are new in Ruby 1.9, but ->ptr and ->len no longer work */
/* Define these for older versions so we can just write code the new way */
#ifndef RSTRING_LEN
# define RSTRING_LEN(x) RSTRING(x)->len
#endif
#ifndef RSTRING_PTR
# define RSTRING_PTR(x) RSTRING(x)->ptr
#endif
#ifndef RSTRING_END
# define RSTRING_END(x) (RSTRING_PTR(x) + RSTRING_LEN(x))
#endif
#ifndef RARRAY_LEN
# define RARRAY_LEN(x) RARRAY(x)->len
#endif
#ifndef RARRAY_PTR
# define RARRAY_PTR(x) RARRAY(x)->ptr
#endif
#ifndef RFLOAT_VALUE
# define RFLOAT_VALUE(x) RFLOAT(x)->value
#endif
#ifndef DOUBLE2NUM
# define DOUBLE2NUM(x) rb_float_new(x)
#endif
#ifndef RHASH_TBL
# define RHASH_TBL(x) (RHASH(x)->tbl)
#endif
#ifndef RHASH_ITER_LEV
# define RHASH_ITER_LEV(x) (RHASH(x)->iter_lev)
#endif
#ifndef RHASH_IFNONE
# define RHASH_IFNONE(x) (RHASH(x)->ifnone)
#endif
#ifndef RHASH_SIZE
# define RHASH_SIZE(x) (RHASH(x)->tbl->num_entries)
#endif
#ifndef RHASH_EMPTY_P
# define RHASH_EMPTY_P(x) (RHASH_SIZE(x) == 0)
#endif
#ifndef RSTRUCT_LEN
# define RSTRUCT_LEN(x) RSTRUCT(x)->len
#endif
#ifndef RSTRUCT_PTR
# define RSTRUCT_PTR(x) RSTRUCT(x)->ptr
#endif



/*
 * Need to be very careful about how these macros are defined, especially
 * when compiling C++ code or C code with an ANSI C compiler.
 *
 * VALUEFUNC(f) is a macro used to typecast a C function that implements
 * a Ruby method so that it can be passed as an argument to API functions
 * like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is a macro used to typecast a C function that implements
 * either the "mark" or "free" stuff for a Ruby Data object, so that it
 * can be passed as an argument to API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 */
 
#ifdef __cplusplus
#  ifndef RUBY_METHOD_FUNC /* These definitions should work for Ruby 1.4.6 */
#    define PROTECTFUNC(f) ((VALUE (*)()) f)
#    define VALUEFUNC(f) ((VALUE (*)()) f)
#    define VOIDFUNC(f)  ((void (*)()) f)
#  else
#    ifndef ANYARGS /* These definitions should work for Ruby 1.6 */
#      define PROTECTFUNC(f) ((VALUE (*)()) f)
#      define VALUEFUNC(f) ((VALUE (*)()) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    else /* These definitions should work for Ruby 1.7+ */
#      define PROTECTFUNC(f) ((VALUE (*)(VALUE)) f)
#      define VALUEFUNC(f) ((VALUE (*)(ANYARGS)) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    endif
#  endif
#else
#  define VALUEFUNC(f) (f)
#  define VOIDFUNC(f) (f)
#endif

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING_PTR(RB_STRING_VALUE(s))
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING_LEN(RB_STRING_VALUE(s))
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) do {\
    StringValue(v);\
    rb_check_safe_str(v);\
} while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif

static VALUE _mSWIG = Qnil;

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */


/* Define some additional error types */
#define SWIG_ObjectPreviouslyDeletedError  -100


/* Define custom exceptions for errors that do not map to existing Ruby
   exceptions.  Note this only works for C++ since a global cannot be
   initialized by a function in C.  For C, fallback to rb_eRuntimeError.*/

SWIGINTERN VALUE 
getNullReferenceError(void) {
  static int init = 0;
  static VALUE rb_eNullReferenceError ;
  if (!init) {
    init = 1;
    rb_eNullReferenceError = rb_define_class("NullReferenceError", rb_eRuntimeError);
  }
  return rb_eNullReferenceError;
} 

SWIGINTERN VALUE 
getObjectPreviouslyDeletedError(void) {
  static int init = 0;
  static VALUE rb_eObjectPreviouslyDeleted ;
  if (!init) {
    init = 1;
    rb_eObjectPreviouslyDeleted = rb_define_class("ObjectPreviouslyDeleted", rb_eRuntimeError);
  }
  return rb_eObjectPreviouslyDeleted;
} 


SWIGINTERN VALUE
SWIG_Ruby_ErrorType(int SWIG_code) {
  VALUE type;
  switch (SWIG_code) {
  case SWIG_MemoryError:
    type = rb_eNoMemError;
    break;
  case SWIG_IOError:
    type = rb_eIOError;
    break;
  case SWIG_RuntimeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_IndexError:
    type = rb_eIndexError;
    break;
  case SWIG_TypeError:
    type = rb_eTypeError;
    break;
  case SWIG_DivisionByZero:
    type = rb_eZeroDivError;
    break;
  case SWIG_OverflowError:
    type = rb_eRangeError;
    break;
  case SWIG_SyntaxError:
    type = rb_eSyntaxError;
    break;
  case SWIG_ValueError:
    type = rb_eArgError;
    break;
  case SWIG_SystemError:
    type = rb_eFatal;
    break;
  case SWIG_AttributeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_NullReferenceError:
    type = getNullReferenceError();
    break;
  case SWIG_ObjectPreviouslyDeletedError:
    type = getObjectPreviouslyDeletedError();
    break;
  case SWIG_UnknownError:
    type = rb_eRuntimeError;
    break;
  default:
    type = rb_eRuntimeError;
  }
  return type;
}


/* This function is called when a user inputs a wrong argument to
   a method.
 */
SWIGINTERN 
const char* Ruby_Format_TypeError( const char* msg,
				   const char* type, 
				   const char* name, 
				   const int argn,
				   VALUE input )
{
  char buf[128];
  VALUE str;
  VALUE asStr;
  if ( msg && *msg )
    {
      str = rb_str_new2(msg);
    }
  else
    {
      str = rb_str_new(NULL, 0);
    }

  str = rb_str_cat2( str, "Expected argument " );
  sprintf( buf, "%d of type ", argn-1 );
  str = rb_str_cat2( str, buf );
  str = rb_str_cat2( str, type );
  str = rb_str_cat2( str, ", but got " );
  str = rb_str_cat2( str, rb_obj_classname(input) );
  str = rb_str_cat2( str, " " );
  asStr = rb_inspect(input);
  if ( RSTRING_LEN(asStr) > 30 )
    {
      str = rb_str_cat( str, StringValuePtr(asStr), 30 );
      str = rb_str_cat2( str, "..." );
    }
  else
    {
      str = rb_str_append( str, asStr );
    }

  if ( name )
    {
      str = rb_str_cat2( str, "\n\tin SWIG method '" );
      str = rb_str_cat2( str, name );
      str = rb_str_cat2( str, "'" );
    }

  return StringValuePtr( str );
}

/* This function is called when an overloaded method fails */
SWIGINTERN 
void Ruby_Format_OverloadedError(
				 const int argc,
				 const int maxargs,
				 const char* method, 
				 const char* prototypes 
				 )
{
  const char* msg = "Wrong # of arguments";
  if ( argc <= maxargs ) msg = "Wrong arguments";
  rb_raise(rb_eArgError,"%s for overloaded method '%s'.\n"  
	   "Possible C/C++ prototypes are:\n%s",
	   msg, method, prototypes);
}

/* -----------------------------------------------------------------------------
 * rubytracking.swg
 *
 * This file contains support for tracking mappings from 
 * Ruby objects to C++ objects.  This functionality is needed
 * to implement mark functions for Ruby's mark and sweep
 * garbage collector.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#if !defined(ST_DATA_T_DEFINED)
/* Needs to be explicitly included for Ruby 1.8 and earlier */
#include <st.h>
#endif

/* Ruby 1.8 actually assumes the first case. */
#if SIZEOF_VOIDP == SIZEOF_LONG
#  define SWIG2NUM(v) LONG2NUM((unsigned long)v)
#  define NUM2SWIG(x) (unsigned long)NUM2LONG(x)
#elif SIZEOF_VOIDP == SIZEOF_LONG_LONG
#  define SWIG2NUM(v) LL2NUM((unsigned long long)v)
#  define NUM2SWIG(x) (unsigned long long)NUM2LL(x)
#else
#  error sizeof(void*) is not the same as long or long long
#endif

/* Global hash table to store Trackings from C/C++
   structs to Ruby Objects. 
*/
static st_table* swig_ruby_trackings = NULL;

static VALUE swig_ruby_trackings_count(ANYARGS) {
  return SWIG2NUM(swig_ruby_trackings->num_entries);
}


/* Setup a hash table to store Trackings */
SWIGRUNTIME void SWIG_RubyInitializeTrackings(void) {
  /* Create a hash table to store Trackings from C++
     objects to Ruby objects. */

  /* Try to see if some other .so has already created a 
     tracking hash table, which we keep hidden in an instance var
     in the SWIG module.
     This is done to allow multiple DSOs to share the same
     tracking table.
  */
  VALUE trackings_value = Qnil;
  /* change the variable name so that we can mix modules
     compiled with older SWIG's - this used to be called "@__trackings__" */
  ID trackings_id = rb_intern( "@__safetrackings__" );
  VALUE verbose = rb_gv_get("VERBOSE");
  rb_gv_set("VERBOSE", Qfalse);
  trackings_value = rb_ivar_get( _mSWIG, trackings_id );
  rb_gv_set("VERBOSE", verbose);

  /* The trick here is that we have to store the hash table
  pointer in a Ruby variable. We do not want Ruby's GC to
  treat this pointer as a Ruby object, so we convert it to
  a Ruby numeric value. */
  if (trackings_value == Qnil) {
    /* No, it hasn't.  Create one ourselves */
    swig_ruby_trackings = st_init_numtable();
    rb_ivar_set( _mSWIG, trackings_id, SWIG2NUM(swig_ruby_trackings) );
  } else {
    swig_ruby_trackings = (st_table*)NUM2SWIG(trackings_value);
  }

  rb_define_virtual_variable("SWIG_TRACKINGS_COUNT", swig_ruby_trackings_count, NULL);
}

/* Add a Tracking from a C/C++ struct to a Ruby object */
SWIGRUNTIME void SWIG_RubyAddTracking(void* ptr, VALUE object) {
  /* Store the mapping to the global hash table. */
  st_insert(swig_ruby_trackings, (st_data_t)ptr, object);
}

/* Get the Ruby object that owns the specified C/C++ struct */
SWIGRUNTIME VALUE SWIG_RubyInstanceFor(void* ptr) {
  /* Now lookup the value stored in the global hash table */
  VALUE value;

  if (st_lookup(swig_ruby_trackings, (st_data_t)ptr, &value)) {
    return value;
  } else {
    return Qnil;
  }
}

/* Remove a Tracking from a C/C++ struct to a Ruby object.  It
   is very important to remove objects once they are destroyed
   since the same memory address may be reused later to create
   a new object. */
SWIGRUNTIME void SWIG_RubyRemoveTracking(void* ptr) {
  /* Delete the object from the hash table */
  st_delete(swig_ruby_trackings, (st_data_t *)&ptr, NULL);
}

/* This is a helper method that unlinks a Ruby object from its
   underlying C++ object.  This is needed if the lifetime of the
   Ruby object is longer than the C++ object */
SWIGRUNTIME void SWIG_RubyUnlinkObjects(void* ptr) {
  VALUE object = SWIG_RubyInstanceFor(ptr);

  if (object != Qnil) {
    if (TYPE(object) != T_DATA)
      abort();
    DATA_PTR(object) = 0;
  }
}

/* This is a helper method that iterates over all the trackings
   passing the C++ object pointer and its related Ruby object
   to the passed callback function. */

/* Proxy method to abstract the internal trackings datatype */
static int swig_ruby_internal_iterate_callback(void* ptr, VALUE obj, void(*meth)(void* ptr, VALUE obj)) {
  (*meth)(ptr, obj);
  return ST_CONTINUE;
}

SWIGRUNTIME void SWIG_RubyIterateTrackings( void(*meth)(void* ptr, VALUE obj) ) {
  st_foreach(swig_ruby_trackings, (int (*)(ANYARGS))&swig_ruby_internal_iterate_callback, (st_data_t)meth);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Ruby API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN VALUE
SWIG_Ruby_AppendOutput(VALUE target, VALUE o) {
  if (NIL_P(target)) {
    target = o;
  } else {
    if (TYPE(target) != T_ARRAY) {
      VALUE o2 = target;
      target = rb_ary_new();
      rb_ary_push(target, o2);
    }
    rb_ary_push(target, o);
  }
  return target;
}

/* For ruby1.8.4 and earlier. */
#ifndef RUBY_INIT_STACK
   RUBY_EXTERN void Init_stack(VALUE* addr);
#  define RUBY_INIT_STACK \
   VALUE variable_in_this_stack_frame; \
   Init_stack(&variable_in_this_stack_frame);
#endif


#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * rubyrun.swg
 *
 * This file contains the runtime support for Ruby modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Ruby_NewPointerObj(ptr, type, flags)
#define SWIG_AcquirePtr(ptr, own)                       SWIG_Ruby_AcquirePtr(ptr, own)
#define swig_owntype                                    swig_ruby_owntype

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Ruby_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer) 		SWIG_Ruby_SetModule(pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Ruby_ErrorType(code)               
#define SWIG_Error(code, msg)            		rb_raise(SWIG_Ruby_ErrorType(code), "%s", msg)
#define SWIG_fail                        		goto fail				 


/* Ruby-specific SWIG API */

#define SWIG_InitRuntime()                              SWIG_Ruby_InitRuntime()              
#define SWIG_define_class(ty)                        	SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty)             	SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value)                        	SWIG_Ruby_MangleStr(value)		  
#define SWIG_CheckConvert(value, ty)                 	SWIG_Ruby_CheckConvert(value, ty)	  

#include "assert.h"

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

typedef struct {
  VALUE klass;
  VALUE mImpl;
  void  (*mark)(void *);
  void  (*destroy)(void *);
  int trackObjects;
} swig_class;


/* Global pointer used to keep some internal SWIG stuff */
static VALUE _cSWIG_Pointer = Qnil;
static VALUE swig_runtime_data_type_pointer = Qnil;

/* Global IDs used to keep some internal SWIG stuff */
static ID swig_arity_id = 0;
static ID swig_call_id  = 0;

/*
  If your swig extension is to be run within an embedded ruby and has
  director callbacks, you should set -DRUBY_EMBEDDED during compilation.  
  This will reset ruby's stack frame on each entry point from the main 
  program the first time a virtual director function is invoked (in a 
  non-recursive way).
  If this is not done, you run the risk of Ruby trashing the stack.
*/

#ifdef RUBY_EMBEDDED

#  define SWIG_INIT_STACK                            \
      if ( !swig_virtual_calls ) { RUBY_INIT_STACK } \
      ++swig_virtual_calls;
#  define SWIG_RELEASE_STACK --swig_virtual_calls;
#  define Ruby_DirectorTypeMismatchException(x) \
          rb_raise( rb_eTypeError, "%s", x ); return c_result;

      static unsigned int swig_virtual_calls = 0;

#else  /* normal non-embedded extension */

#  define SWIG_INIT_STACK
#  define SWIG_RELEASE_STACK
#  define Ruby_DirectorTypeMismatchException(x) \
          throw Swig::DirectorTypeMismatchException( x );

#endif  /* RUBY_EMBEDDED */


SWIGRUNTIME VALUE 
getExceptionClass(void) {
  static int init = 0;
  static VALUE rubyExceptionClass ;
  if (!init) {
    init = 1;
    rubyExceptionClass = rb_const_get(_mSWIG, rb_intern("Exception"));
  }
  return rubyExceptionClass;
} 

/* This code checks to see if the Ruby object being raised as part
   of an exception inherits from the Ruby class Exception.  If so,
   the object is simply returned.  If not, then a new Ruby exception
   object is created and that will be returned to Ruby.*/
SWIGRUNTIME VALUE
SWIG_Ruby_ExceptionType(swig_type_info *desc, VALUE obj) {
  VALUE exceptionClass = getExceptionClass();
  if (rb_obj_is_kind_of(obj, exceptionClass)) {
    return obj;
  }  else {
    return rb_exc_new3(rb_eRuntimeError, rb_obj_as_string(obj));
  }
}

/* Initialize Ruby runtime support */
SWIGRUNTIME void
SWIG_Ruby_InitRuntime(void)
{
  if (_mSWIG == Qnil) {
    _mSWIG = rb_define_module("SWIG");
    swig_call_id  = rb_intern("call");
    swig_arity_id = rb_intern("arity");
  }
}

/* Define Ruby class for C type */
SWIGRUNTIME void
SWIG_Ruby_define_class(swig_type_info *type)
{
  char *klass_name = (char *) malloc(4 + strlen(type->name) + 1);
  sprintf(klass_name, "TYPE%s", type->name);
  if (NIL_P(_cSWIG_Pointer)) {
    _cSWIG_Pointer = rb_define_class_under(_mSWIG, "Pointer", rb_cObject);
    rb_undef_method(CLASS_OF(_cSWIG_Pointer), "new");
  }
  rb_define_class_under(_mSWIG, klass_name, _cSWIG_Pointer);
  free((void *) klass_name);
}

/* Create a new pointer object */
SWIGRUNTIME VALUE
SWIG_Ruby_NewPointerObj(void *ptr, swig_type_info *type, int flags)
{
  int own =  flags & SWIG_POINTER_OWN; 
  int track;
  char *klass_name;
  swig_class *sklass;
  VALUE klass;
  VALUE obj;
  
  if (!ptr)
    return Qnil;
  
  if (type->clientdata) {
    sklass = (swig_class *) type->clientdata;
		
    /* Are we tracking this class and have we already returned this Ruby object? */
    track = sklass->trackObjects;
    if (track) {
      obj = SWIG_RubyInstanceFor(ptr);
      
      /* Check the object's type and make sure it has the correct type.
        It might not in cases where methods do things like 
        downcast methods. */
      if (obj != Qnil) {
        VALUE value = rb_iv_get(obj, "@__swigtype__");
        const char* type_name = RSTRING_PTR(value);
				
        if (strcmp(type->name, type_name) == 0) {
          return obj;
        }
      }
    }

    /* Create a new Ruby object */
    obj = Data_Wrap_Struct(sklass->klass, VOIDFUNC(sklass->mark), 
			   ( own ? VOIDFUNC(sklass->destroy) : 
			     (track ? VOIDFUNC(SWIG_RubyRemoveTracking) : 0 )
			     ), ptr);

    /* If tracking is on for this class then track this object. */
    if (track) {
      SWIG_RubyAddTracking(ptr, obj);
    }
  } else {
    klass_name = (char *) malloc(4 + strlen(type->name) + 1);
    sprintf(klass_name, "TYPE%s", type->name);
    klass = rb_const_get(_mSWIG, rb_intern(klass_name));
    free((void *) klass_name);
    obj = Data_Wrap_Struct(klass, 0, 0, ptr);
  }
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  
  return obj;
}

/* Create a new class instance (always owned) */
SWIGRUNTIME VALUE
SWIG_Ruby_NewClassInstance(VALUE klass, swig_type_info *type)
{
  VALUE obj;
  swig_class *sklass = (swig_class *) type->clientdata;
  obj = Data_Wrap_Struct(klass, VOIDFUNC(sklass->mark), VOIDFUNC(sklass->destroy), 0);
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  return obj;
}

/* Get type mangle from class name */
SWIGRUNTIMEINLINE char *
SWIG_Ruby_MangleStr(VALUE obj)
{
  VALUE stype = rb_iv_get(obj, "@__swigtype__");
  return StringValuePtr(stype);
}

/* Acquire a pointer value */
typedef struct {
  void (*datafree)(void *);
  int own;
} swig_ruby_owntype;

SWIGRUNTIME swig_ruby_owntype
SWIG_Ruby_AcquirePtr(VALUE obj, swig_ruby_owntype own) {
  swig_ruby_owntype oldown = {0, 0};
  if (obj) {
    oldown.datafree = RDATA(obj)->dfree;
    RDATA(obj)->dfree = own.datafree;
  }
  return oldown;
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPtrAndOwn(VALUE obj, void **ptr, swig_type_info *ty, int flags, swig_ruby_owntype *own)
{
  char *c;
  swig_cast_info *tc;
  void *vptr = 0;

  /* Grab the pointer */
  if (NIL_P(obj)) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  } else {
    if (TYPE(obj) != T_DATA) {
      return SWIG_ERROR;
    }
    Data_Get_Struct(obj, void, vptr);
  }
  
  if (own) {
    own->datafree = RDATA(obj)->dfree;
    own->own = 0;
  }
    
  /* Check to see if the input object is giving up ownership
     of the underlying C struct or C++ object.  If so then we
     need to reset the destructor since the Ruby object no 
     longer owns the underlying C++ object.*/ 
  if (flags & SWIG_POINTER_DISOWN) {
    /* Is tracking on for this class? */
    int track = 0;
    if (ty && ty->clientdata) {
      swig_class *sklass = (swig_class *) ty->clientdata;
      track = sklass->trackObjects;
    }
		
    if (track) {
      /* We are tracking objects for this class.  Thus we change the destructor
       * to SWIG_RubyRemoveTracking.  This allows us to
       * remove the mapping from the C++ to Ruby object
       * when the Ruby object is garbage collected.  If we don't
       * do this, then it is possible we will return a reference 
       * to a Ruby object that no longer exists thereby crashing Ruby. */
      RDATA(obj)->dfree = SWIG_RubyRemoveTracking;
    } else {    
      RDATA(obj)->dfree = 0;
    }
  }

  /* Do type-checking if type info was provided */
  if (ty) {
    if (ty->clientdata) {
      if (rb_obj_is_kind_of(obj, ((swig_class *) (ty->clientdata))->klass)) {
        if (vptr == 0) {
          /* The object has already been deleted */
          return SWIG_ObjectPreviouslyDeletedError;
        }
      }
    }
    if ((c = SWIG_MangleStr(obj)) == NULL) {
      return SWIG_ERROR;
    }
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) {
      return SWIG_ERROR;
    } else {
      if (ptr) {
        if (tc->type == ty) {
          *ptr = vptr;
        } else {
          int newmemory = 0;
          *ptr = SWIG_TypeCast(tc, vptr, &newmemory);
          if (newmemory == SWIG_CAST_NEW_MEMORY) {
            assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
            if (own)
              own->own = own->own | SWIG_CAST_NEW_MEMORY;
          }
        }
      }
    }
  } else {
    if (ptr)
      *ptr = vptr;
  }
  
  return SWIG_OK;
}

/* Check convert */
SWIGRUNTIMEINLINE int
SWIG_Ruby_CheckConvert(VALUE obj, swig_type_info *ty)
{
  char *c = SWIG_MangleStr(obj);
  if (!c) return 0;
  return SWIG_TypeCheck(c,ty) != 0;
}

SWIGRUNTIME VALUE
SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, ptr, sz);
  strcpy(r, type->name);
  return rb_str_new2(result);
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (TYPE(obj) != T_STRING) goto type_error;
  c = StringValuePtr(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c, ptr, sz);
  if (ty) {
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:
  return SWIG_ERROR;
}

SWIGRUNTIME swig_module_info *
SWIG_Ruby_GetModule(void *SWIGUNUSEDPARM(clientdata))
{
  VALUE pointer;
  swig_module_info *ret = 0;
  VALUE verbose = rb_gv_get("VERBOSE");

 /* temporarily disable warnings, since the pointer check causes warnings with 'ruby -w' */
  rb_gv_set("VERBOSE", Qfalse);
  
  /* first check if pointer already created */
  pointer = rb_gv_get("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  if (pointer != Qnil) {
    Data_Get_Struct(pointer, swig_module_info, ret);
  }

  /* reinstate warnings */
  rb_gv_set("VERBOSE", verbose);
  return ret;
}

SWIGRUNTIME void 
SWIG_Ruby_SetModule(swig_module_info *pointer)
{
  /* register a new class */
  VALUE cl = rb_define_class("swig_runtime_data", rb_cObject);
  /* create and store the structure pointer to a global variable */
  swig_runtime_data_type_pointer = Data_Wrap_Struct(cl, 0, 0, pointer);
  rb_define_readonly_variable("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, &swig_runtime_data_type_pointer);
}

/* This function can be used to check whether a proc or method or similarly
   callable function has been passed.  Usually used in a %typecheck, like:

   %typecheck(c_callback_t, precedence=SWIG_TYPECHECK_POINTER) {
        $result = SWIG_Ruby_isCallable( $input );
   }
 */
SWIGINTERN
int SWIG_Ruby_isCallable( VALUE proc )
{
  if ( rb_respond_to( proc, swig_call_id ) )
    return 1;
  return 0;
}

/* This function can be used to check the arity (number of arguments)
   a proc or method can take.  Usually used in a %typecheck.
   Valid arities will be that equal to minimal or those < 0
   which indicate a variable number of parameters at the end.
 */
SWIGINTERN
int SWIG_Ruby_arity( VALUE proc, int minimal )
{
  if ( rb_respond_to( proc, swig_arity_id ) )
    {
      VALUE num = rb_funcall( proc, swig_arity_id, 0 );
      int arity = NUM2INT(num);
      if ( arity < 0 && (arity+1) < -minimal ) return 1;
      if ( arity == minimal ) return 1;
      return 1;
    }
  return 0;
}


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg);; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_PlayerCc__ActArrayProxy swig_types[0]
#define SWIGTYPE_p_PlayerCc__AioProxy swig_types[1]
#define SWIGTYPE_p_PlayerCc__AudioProxy swig_types[2]
#define SWIGTYPE_p_PlayerCc__BlackBoardProxy swig_types[3]
#define SWIGTYPE_p_PlayerCc__BlobfinderProxy swig_types[4]
#define SWIGTYPE_p_PlayerCc__BumperProxy swig_types[5]
#define SWIGTYPE_p_PlayerCc__CameraProxy swig_types[6]
#define SWIGTYPE_p_PlayerCc__ClientProxy swig_types[7]
#define SWIGTYPE_p_PlayerCc__DioProxy swig_types[8]
#define SWIGTYPE_p_PlayerCc__FiducialProxy swig_types[9]
#define SWIGTYPE_p_PlayerCc__GpsProxy swig_types[10]
#define SWIGTYPE_p_PlayerCc__Graphics2dProxy swig_types[11]
#define SWIGTYPE_p_PlayerCc__Graphics3dProxy swig_types[12]
#define SWIGTYPE_p_PlayerCc__GripperProxy swig_types[13]
#define SWIGTYPE_p_PlayerCc__HealthProxy swig_types[14]
#define SWIGTYPE_p_PlayerCc__ImuProxy swig_types[15]
#define SWIGTYPE_p_PlayerCc__IrProxy swig_types[16]
#define SWIGTYPE_p_PlayerCc__LaserProxy swig_types[17]
#define SWIGTYPE_p_PlayerCc__LimbProxy swig_types[18]
#define SWIGTYPE_p_PlayerCc__LinuxjoystickProxy swig_types[19]
#define SWIGTYPE_p_PlayerCc__LocalizeProxy swig_types[20]
#define SWIGTYPE_p_PlayerCc__LogProxy swig_types[21]
#define SWIGTYPE_p_PlayerCc__MapProxy swig_types[22]
#define SWIGTYPE_p_PlayerCc__OpaqueProxy swig_types[23]
#define SWIGTYPE_p_PlayerCc__PlannerProxy swig_types[24]
#define SWIGTYPE_p_PlayerCc__PlayerClient swig_types[25]
#define SWIGTYPE_p_PlayerCc__PlayerError swig_types[26]
#define SWIGTYPE_p_PlayerCc__Pointcloud3dProxy swig_types[27]
#define SWIGTYPE_p_PlayerCc__Position1dProxy swig_types[28]
#define SWIGTYPE_p_PlayerCc__Position2dProxy swig_types[29]
#define SWIGTYPE_p_PlayerCc__Position3dProxy swig_types[30]
#define SWIGTYPE_p_PlayerCc__PowerProxy swig_types[31]
#define SWIGTYPE_p_PlayerCc__PtzProxy swig_types[32]
#define SWIGTYPE_p_PlayerCc__RFIDProxy swig_types[33]
#define SWIGTYPE_p_PlayerCc__RangerProxy swig_types[34]
#define SWIGTYPE_p_PlayerCc__SimulationProxy swig_types[35]
#define SWIGTYPE_p_PlayerCc__SonarProxy swig_types[36]
#define SWIGTYPE_p_PlayerCc__SpeechProxy swig_types[37]
#define SWIGTYPE_p_PlayerCc__SpeechRecognitionProxy swig_types[38]
#define SWIGTYPE_p_PlayerCc__VectorMapProxy swig_types[39]
#define SWIGTYPE_p_PlayerCc__WSNProxy swig_types[40]
#define SWIGTYPE_p_PlayerCc__WiFiProxy swig_types[41]
#define SWIGTYPE_p_bool swig_types[42]
#define SWIGTYPE_p_boost__mutex swig_types[43]
#define SWIGTYPE_p_boost__thread swig_types[44]
#define SWIGTYPE_p_char swig_types[45]
#define SWIGTYPE_p_connection_t swig_types[46]
#define SWIGTYPE_p_double swig_types[47]
#define SWIGTYPE_p_f_p_playerc_blackboard_t_player_blackboard_entry__void swig_types[48]
#define SWIGTYPE_p_int swig_types[49]
#define SWIGTYPE_p_long_long swig_types[50]
#define SWIGTYPE_p_p_char swig_types[51]
#define SWIGTYPE_p_player_actarray_actuator_t swig_types[52]
#define SWIGTYPE_p_player_actarray_actuatorgeom_t swig_types[53]
#define SWIGTYPE_p_player_audio_mixer_channel_detail_t swig_types[54]
#define SWIGTYPE_p_player_audio_mixer_channel_list_t swig_types[55]
#define SWIGTYPE_p_player_audio_mixer_channel_t swig_types[56]
#define SWIGTYPE_p_player_audio_seq_item_t swig_types[57]
#define SWIGTYPE_p_player_audio_seq_t swig_types[58]
#define SWIGTYPE_p_player_bbox2d swig_types[59]
#define SWIGTYPE_p_player_bbox3d swig_types[60]
#define SWIGTYPE_p_player_blackboard_entry swig_types[61]
#define SWIGTYPE_p_player_bool swig_types[62]
#define SWIGTYPE_p_player_boolprop_req swig_types[63]
#define SWIGTYPE_p_player_bumper_define_t swig_types[64]
#define SWIGTYPE_p_player_capabilities_req swig_types[65]
#define SWIGTYPE_p_player_color swig_types[66]
#define SWIGTYPE_p_player_dblprop_req swig_types[67]
#define SWIGTYPE_p_player_devaddr swig_types[68]
#define SWIGTYPE_p_player_extent2d swig_types[69]
#define SWIGTYPE_p_player_fiducial_item_t swig_types[70]
#define SWIGTYPE_p_player_graphics3d_draw_mode_t swig_types[71]
#define SWIGTYPE_p_player_imu_data_calib_t swig_types[72]
#define SWIGTYPE_p_player_intprop_req swig_types[73]
#define SWIGTYPE_p_player_limb_data_t swig_types[74]
#define SWIGTYPE_p_player_limb_geom_req_t swig_types[75]
#define SWIGTYPE_p_player_localize_hypoth_t swig_types[76]
#define SWIGTYPE_p_player_msghdr swig_types[77]
#define SWIGTYPE_p_player_opaque_data_t swig_types[78]
#define SWIGTYPE_p_player_orientation_3d swig_types[79]
#define SWIGTYPE_p_player_point_2d swig_types[80]
#define SWIGTYPE_p_player_point_3d swig_types[81]
#define SWIGTYPE_p_player_pointcloud3d_element_t swig_types[82]
#define SWIGTYPE_p_player_pose2d swig_types[83]
#define SWIGTYPE_p_player_pose3d swig_types[84]
#define SWIGTYPE_p_player_segment swig_types[85]
#define SWIGTYPE_p_player_strprop_req swig_types[86]
#define SWIGTYPE_p_player_uint32 swig_types[87]
#define SWIGTYPE_p_player_wsn_node_data_t swig_types[88]
#define SWIGTYPE_p_playerc_blobfinder_blob_t swig_types[89]
#define SWIGTYPE_p_playerc_device_info_t swig_types[90]
#define SWIGTYPE_p_playerc_rfidtag_t swig_types[91]
#define SWIGTYPE_p_playerc_wifi_link_t swig_types[92]
#define SWIGTYPE_p_read_signal_t swig_types[93]
#define SWIGTYPE_p_scoped_lock_t swig_types[94]
#define SWIGTYPE_p_short swig_types[95]
#define SWIGTYPE_p_signed_char swig_types[96]
#define SWIGTYPE_p_std__listT_playerc_device_info_t_t swig_types[97]
#define SWIGTYPE_p_std__ostream swig_types[98]
#define SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t swig_types[99]
#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[100]
#define SWIGTYPE_p_swig__ConstIterator swig_types[101]
#define SWIGTYPE_p_swig__GC_VALUE swig_types[102]
#define SWIGTYPE_p_swig__Iterator swig_types[103]
#define SWIGTYPE_p_unsigned_char swig_types[104]
#define SWIGTYPE_p_unsigned_int swig_types[105]
#define SWIGTYPE_p_unsigned_long_long swig_types[106]
#define SWIGTYPE_p_unsigned_short swig_types[107]
#define SWIGTYPE_p_void swig_types[108]
static swig_type_info *swig_types[110];
static swig_module_info swig_module = {swig_types, 109, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Init_playercpp
#define SWIG_name    "Playercpp"

static VALUE mPlayercpp;

#define SWIG_RUBY_THREAD_BEGIN_BLOCK
#define SWIG_RUBY_THREAD_END_BLOCK


#define SWIGVERSION 0x030012 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include <typeinfo>
#include <stdexcept>


namespace swig {
  class SwigGCReferences {
    VALUE _hash;

    SwigGCReferences() : _hash(Qnil) {
    }
    ~SwigGCReferences() {
      if (_hash != Qnil)
        rb_gc_unregister_address(&_hash);
    }
    static void EndProcHandler(VALUE) {
      // Ruby interpreter ending - _hash can no longer be accessed.
      SwigGCReferences &s_references = instance();
      s_references._hash = Qnil;
    }
  public:
    static SwigGCReferences& instance() {
      // Hash of all GC_VALUE's currently in use
      static SwigGCReferences s_references;

      return s_references;
    }
    static void initialize() {
      SwigGCReferences &s_references = instance();
      if (s_references._hash == Qnil) {
        rb_set_end_proc(&EndProcHandler, Qnil);
        s_references._hash = rb_hash_new();
        rb_gc_register_address(&s_references._hash);
      }
    }
    void GC_register(VALUE& obj) {
      if (FIXNUM_P(obj) || SPECIAL_CONST_P(obj) || SYMBOL_P(obj))
        return;
      if (_hash != Qnil) {
        VALUE val = rb_hash_aref(_hash, obj);
        unsigned n = FIXNUM_P(val) ? NUM2UINT(val) : 0;
        ++n;
        rb_hash_aset(_hash, obj, INT2NUM(n));
      }
    }
    void GC_unregister(const VALUE& obj) {
      if (FIXNUM_P(obj) || SPECIAL_CONST_P(obj) || SYMBOL_P(obj))
        return;
      // this test should not be needed but I've noticed some very erratic
      // behavior of none being unregistered in some very rare situations.
      if (BUILTIN_TYPE(obj) == T_NONE)
        return;
      if (_hash != Qnil) {
        VALUE val = rb_hash_aref(_hash, obj);
        unsigned n = FIXNUM_P(val) ? NUM2UINT(val) : 1;
        --n;
        if (n)
          rb_hash_aset(_hash, obj, INT2NUM(n));
        else
          rb_hash_delete(_hash, obj);
      }
    }
  };

  class GC_VALUE {
  protected:
    VALUE  _obj;

    static ID hash_id;
    static ID   lt_id;
    static ID   gt_id;
    static ID   eq_id;
    static ID   le_id;
    static ID   ge_id;

    static ID  pos_id;
    static ID  neg_id;
    static ID  inv_id;

    static ID  add_id;
    static ID  sub_id;
    static ID  mul_id;
    static ID  div_id;
    static ID  mod_id;

    static ID  and_id;
    static ID   or_id;
    static ID  xor_id;

    static ID  lshift_id;
    static ID  rshift_id;

    struct OpArgs
    {
      VALUE src;
      ID    id;
      int   nargs;
      VALUE target;
    };


  public:
    GC_VALUE() : _obj(Qnil)
    {
    }

    GC_VALUE(const GC_VALUE& item) : _obj(item._obj)
    {
      SwigGCReferences::instance().GC_register(_obj);
    }
    
    GC_VALUE(VALUE obj) :_obj(obj)
    {
      SwigGCReferences::instance().GC_register(_obj);
    }
    
    ~GC_VALUE() 
    {
      SwigGCReferences::instance().GC_unregister(_obj);
    }
    
    GC_VALUE & operator=(const GC_VALUE& item) 
    {
      SwigGCReferences::instance().GC_unregister(_obj);
      _obj = item._obj;
      SwigGCReferences::instance().GC_register(_obj);
      return *this;
    }

    operator VALUE() const
    {
      return _obj;
    }

    VALUE inspect() const
    {
      return rb_inspect(_obj);
    }

    VALUE to_s() const
    {
      return rb_inspect(_obj);
    }

    static VALUE swig_rescue_swallow(VALUE)
    {
      /*
      VALUE errstr = rb_obj_as_string(rb_errinfo());
      printf("Swallowing error: '%s'\n", RSTRING_PTR(StringValue(errstr)));
      */
      return Qnil; /* Swallow Ruby exception */
    }

    static VALUE swig_rescue_funcall(VALUE p)
    {
      OpArgs* args = (OpArgs*) p;
      return rb_funcall(args->src, args->id, args->nargs, args->target);
    }

    bool relational_equal_op(const GC_VALUE& other, const ID& op_id, bool (*op_func)(const VALUE& a, const VALUE& b)) const
    {
      if (FIXNUM_P(_obj) && FIXNUM_P(other._obj)) {
        return op_func(_obj, other._obj);
      }
      bool res = false;
      VALUE ret = Qnil;
      SWIG_RUBY_THREAD_BEGIN_BLOCK;
      if (rb_respond_to(_obj, op_id)) {
        OpArgs  args;
        args.src    = _obj;
        args.id     = op_id;
        args.nargs  = 1;
        args.target = VALUE(other);
        ret = rb_rescue(RUBY_METHOD_FUNC(swig_rescue_funcall), VALUE(&args),
                       (RUBY_METHOD_FUNC(swig_rescue_swallow)), Qnil);
      }
      if (ret == Qnil) {
        VALUE a = rb_funcall(         _obj, hash_id, 0 );
        VALUE b = rb_funcall( VALUE(other), hash_id, 0 );
        res = op_func(a, b);
      } else {
        res = RTEST(ret);
      }
      SWIG_RUBY_THREAD_END_BLOCK;
      return res;
    }

    static bool operator_eq(const VALUE& a, const VALUE& b) { return a == b; }
    static bool operator_lt(const VALUE& a, const VALUE& b) { return a < b; }
    static bool operator_le(const VALUE& a, const VALUE& b) { return a <= b; }
    static bool operator_gt(const VALUE& a, const VALUE& b) { return a > b; }
    static bool operator_ge(const VALUE& a, const VALUE& b) { return a >= b; }

    bool operator==(const GC_VALUE& other) const { return relational_equal_op(other, eq_id, operator_eq); }
    bool operator<(const GC_VALUE& other) const { return relational_equal_op(other, lt_id, operator_lt); }
    bool operator<=(const GC_VALUE& other) const { return relational_equal_op(other, le_id, operator_le); }
    bool operator>(const GC_VALUE& other) const { return relational_equal_op(other, gt_id, operator_gt); }
    bool operator>=(const GC_VALUE& other) const { return relational_equal_op(other, ge_id, operator_ge); }

    bool operator!=(const GC_VALUE& other) const
    {
      return !(this->operator==(other));
    }

    GC_VALUE unary_op(const ID& op_id) const
    {
      VALUE ret = Qnil;
      SWIG_RUBY_THREAD_BEGIN_BLOCK;
      OpArgs  args;
      args.src    = _obj;
      args.id     = op_id;
      args.nargs  = 0;
      args.target = Qnil;
      ret = rb_rescue(RUBY_METHOD_FUNC(swig_rescue_funcall), VALUE(&args),
                     (RUBY_METHOD_FUNC(swig_rescue_swallow)), Qnil);
      SWIG_RUBY_THREAD_END_BLOCK;
      return ret;
    }

    GC_VALUE operator+() const { return unary_op(pos_id); }
    GC_VALUE operator-() const { return unary_op(neg_id); }
    GC_VALUE operator~() const { return unary_op(inv_id); }

    GC_VALUE binary_op(const GC_VALUE& other, const ID& op_id) const
    {
      VALUE ret = Qnil;
      SWIG_RUBY_THREAD_BEGIN_BLOCK;
      OpArgs  args;
      args.src    = _obj;
      args.id     = op_id;
      args.nargs  = 1;
      args.target = VALUE(other);
      ret = rb_rescue(RUBY_METHOD_FUNC(swig_rescue_funcall), VALUE(&args),
                     (RUBY_METHOD_FUNC(swig_rescue_swallow)), Qnil);
      SWIG_RUBY_THREAD_END_BLOCK;
      return GC_VALUE(ret);
    }

    GC_VALUE operator+(const GC_VALUE& other) const { return binary_op(other, add_id); }
    GC_VALUE operator-(const GC_VALUE& other) const { return binary_op(other, sub_id); }
    GC_VALUE operator*(const GC_VALUE& other) const { return binary_op(other, mul_id); }
    GC_VALUE operator/(const GC_VALUE& other) const { return binary_op(other, div_id); }
    GC_VALUE operator%(const GC_VALUE& other) const { return binary_op(other, mod_id); }
    GC_VALUE operator&(const GC_VALUE& other) const { return binary_op(other, and_id); }
    GC_VALUE operator^(const GC_VALUE& other) const { return binary_op(other, xor_id); }
    GC_VALUE operator|(const GC_VALUE& other) const { return binary_op(other, or_id); }
    GC_VALUE operator<<(const GC_VALUE& other) const { return binary_op(other, lshift_id); }
    GC_VALUE operator>>(const GC_VALUE& other) const { return binary_op(other, rshift_id); }
  };

  ID  GC_VALUE::hash_id = rb_intern("hash");
  ID  GC_VALUE::lt_id = rb_intern("<");
  ID  GC_VALUE::gt_id = rb_intern(">");
  ID  GC_VALUE::eq_id = rb_intern("==");
  ID  GC_VALUE::le_id = rb_intern("<=");
  ID  GC_VALUE::ge_id = rb_intern(">=");

  ID  GC_VALUE::pos_id = rb_intern("+@");
  ID  GC_VALUE::neg_id = rb_intern("-@");
  ID  GC_VALUE::inv_id = rb_intern("~");

  ID  GC_VALUE::add_id = rb_intern("+");
  ID  GC_VALUE::sub_id = rb_intern("-");
  ID  GC_VALUE::mul_id = rb_intern("*");
  ID  GC_VALUE::div_id = rb_intern("/");
  ID  GC_VALUE::mod_id = rb_intern("%");

  ID  GC_VALUE::and_id = rb_intern("&");
  ID  GC_VALUE::or_id  = rb_intern("|");
  ID  GC_VALUE::xor_id = rb_intern("^");

  ID  GC_VALUE::lshift_id = rb_intern("<<");
  ID  GC_VALUE::rshift_id = rb_intern(">>");

  typedef GC_VALUE LANGUAGE_OBJ;

} // namespace swig



#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>


#include <stddef.h>


#include <iostream>


namespace swig {
  struct stop_iteration {
  };

  /** 
   * Abstract base class used to represent all iterators of STL containers.
   */
  struct ConstIterator {
  public:
    typedef ConstIterator self_type;

  protected:
    GC_VALUE _seq;

  protected:
    ConstIterator(VALUE seq) : _seq(seq)
    {
    }

    // Random access iterator methods, but not required in Ruby
    virtual ptrdiff_t distance(const ConstIterator &x) const
    {
      throw std::invalid_argument("distance not supported");
    }

    virtual bool equal (const ConstIterator &x) const
    {
      throw std::invalid_argument("equal not supported");
    }

    virtual self_type* advance(ptrdiff_t n)
    {
      throw std::invalid_argument("advance not supported");
    }
      
  public:
    virtual ~ConstIterator() {}

    // Access iterator method, required by Ruby
    virtual VALUE value() const {
      throw std::invalid_argument("value not supported");
      return Qnil;
    };

    virtual VALUE setValue( const VALUE& v ) {
      throw std::invalid_argument("value= not supported");
      return Qnil;
    }

    virtual self_type* next( size_t n = 1 )
    {
      return this->advance( n );
    }

    virtual self_type* previous( size_t n = 1 )
    {
      ptrdiff_t nn = n;
      return this->advance( -nn );
    }

    virtual VALUE to_s() const {
      throw std::invalid_argument("to_s not supported");
      return Qnil;
    }

    virtual VALUE inspect() const {
      throw std::invalid_argument("inspect not supported");
      return Qnil;
    }
    
    virtual ConstIterator *dup() const
    {
      throw std::invalid_argument("dup not supported");
      return NULL;
    }

    //
    // C++ common/needed methods.  We emulate a bidirectional
    // operator, to be compatible with all the STL.
    // The iterator traits will then tell the STL what type of
    // iterator we really are.
    //
    ConstIterator() : _seq( Qnil )
    {
    }

    ConstIterator( const self_type& b ) : _seq( b._seq )
    {
    }

    self_type& operator=( const self_type& b )
    {
      _seq = b._seq;
      return *this;
    }

    bool operator == (const ConstIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const ConstIterator& x) const
    {
      return ! operator==(x);
    }
      
    // Pre-decrement operator
    self_type& operator--()
    {
      return *previous();
    }

    // Pre-increment operator
    self_type& operator++()
    {
      return *next();
    }

    // Post-decrement operator
    self_type operator--(int)
    {
      self_type r = *this;
      previous();
      return r;
    }

    // Post-increment operator
    self_type operator++(int)
    {
      self_type r = *this;
      next();
      return r;
    }

    ConstIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    ConstIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }

    ConstIterator* operator + (ptrdiff_t n) const
    {
      return dup()->advance(n);
    }

    ConstIterator* operator - (ptrdiff_t n) const
    {
      return dup()->advance(-n);
    }
      
    ptrdiff_t operator - (const ConstIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::ConstIterator *");
	init = 1;
      }	
      return desc;
    }
  };


  /**
   * Abstract base class used to represent all non-const iterators of STL containers.
   * 
   */
  struct Iterator : public ConstIterator {
  public:
    typedef Iterator self_type;

  protected:
    Iterator(VALUE seq) : ConstIterator(seq)
    {
    }

    virtual self_type* advance(ptrdiff_t n)
    {
      throw std::invalid_argument("operation not supported");
    }

  public:
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::Iterator *");
	init = 1;
      }	
      return desc;
    }
    
    virtual Iterator *dup() const
    {
      throw std::invalid_argument("dup not supported");
      return NULL;
    }
      
    virtual self_type* next( size_t n = 1 )
    {
      return this->advance( n );
    }

    virtual self_type* previous( size_t n = 1 )
    {
      ptrdiff_t nn = n;
      return this->advance( -nn );
    }

    bool operator == (const ConstIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const Iterator& x) const
    {
      return ! operator==(x);
    }
      
    Iterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    Iterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    Iterator* operator + (ptrdiff_t n) const
    {
      return dup()->advance(n);
    }

    Iterator* operator - (ptrdiff_t n) const
    {
      return dup()->advance(-n);
    }
      
    ptrdiff_t operator - (const Iterator& x) const
    {
      return x.distance(*this);
    }
  };

}


SWIGINTERN VALUE
SWIG_ruby_failed(void)
{
  return Qnil;
} 


/*@SWIG:/usr/share/swig/3.0.12/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2ULONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  unsigned long *res = (unsigned long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2ULONG(obj) : rb_big2ulong(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (VALUE obj, unsigned long *val) 
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    unsigned long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2ULONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
/*@SWIG:/usr/share/swig/3.0.12/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2ULL(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  long long *res = (long long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2ULL(obj) : rb_big2ull(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (VALUE obj, unsigned long long *val)
{ 
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    unsigned long long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2ULL), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (VALUE obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}


SWIGINTERNINLINE VALUE
SWIG_From_bool  (bool value)
{
  return value ? Qtrue : Qfalse;
}


/*@SWIG:/usr/share/swig/3.0.12/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2LONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  long *res = (long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2LONG(obj) : rb_big2long(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_long (VALUE obj, long* val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2LONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


#ifdef SWIG_LONG_LONG_AVAILABLE
/*@SWIG:/usr/share/swig/3.0.12/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2LL(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  long long *res = (long long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2LL(obj) : rb_big2ll(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_long_SS_long (VALUE obj, long long *val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    long long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2LL), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (VALUE obj, ptrdiff_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    long v;
    res = SWIG_AsVal_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(ptrdiff_t) <= sizeof(long long)) {
    long long v;
    res = SWIG_AsVal_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  }
#endif
  return res;
}


  #define SWIG_From_long   LONG2NUM 


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE VALUE 
SWIG_From_long_SS_long  (long long value)
{
  return LL2NUM(value);
}
#endif


SWIGINTERNINLINE VALUE
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    return SWIG_From_long  (static_cast< long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(ptrdiff_t) <= sizeof(long long) */
    return SWIG_From_long_SS_long  (static_cast< long long >(value));
  }
#endif
}


#include <algorithm>


#include <vector>


#include <utility>


#include <map>


#include <algorithm>


#include <stdint.h>		// Use the C99 official header


#ifdef __cplusplus
extern "C" {
#endif

/* Ruby 1.9 changed the file name of this header */
#ifdef HAVE_RUBY_IO_H
#include "ruby/io.h"
#else
#include "rubyio.h"
#endif

#ifdef __cplusplus
}
#endif


#ifdef __cplusplus
extern "C" {
#endif
#ifdef HAVE_SYS_TIME_H
# include <sys/time.h>
struct timeval rb_time_timeval(VALUE);
#endif
#ifdef __cplusplus
}
#endif


#include "libplayerc++/playerc++.h"


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(VALUE obj, char** cptr, size_t* psize, int *alloc)
{
  if (TYPE(obj) == T_STRING) {
    char *cstr = StringValuePtr(obj); 
    size_t size = RSTRING_LEN(obj) + 1;
    if (cptr)  {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy(new char[size], cstr, sizeof(char)*(size)));
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      }
    }
    if (psize) *psize = size;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *)vptr;
	if (psize) *psize = vptr ? (strlen((char*)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }  
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (VALUE obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (VALUE obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_int (VALUE obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE VALUE
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


/*@SWIG:/usr/share/swig/3.0.12/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2DBL(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  double *res = (double *)(args[1]);
  *res = NUM2DBL(obj); (void)type;
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_double (VALUE obj, double *val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FLOAT) || (type == T_FIXNUM) || (type == T_BIGNUM)) {
    double v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2DBL), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


  #define SWIG_From_double   rb_float_new 


SWIGINTERN int
SWIG_AsVal_bool (VALUE obj, bool *val)
{
  if (obj == Qtrue) {
    if (val) *val = true;
    return SWIG_OK;
  } else if (obj == Qfalse) {
    if (val) *val = false;
    return SWIG_OK;
  } else {
    int res = 0;
    if (SWIG_AsVal_int (obj, &res) == SWIG_OK) {    
      if (val) *val = res ? true : false;
      return SWIG_OK;
    }
  }  
  return SWIG_TypeError;
}


SWIGINTERNINLINE VALUE 
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > LONG_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : Qnil;
    } else {
      return rb_str_new(carray, static_cast< long >(size));
    }
  } else {
    return Qnil;
  }
}


SWIGINTERNINLINE VALUE
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return ULONG2NUM(value); 
}


SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}





#include <float.h>


#include <math.h>


/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
/* isfinite() is a macro for C99 */
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined __cplusplus && __cplusplus >= 201103L
/* Use a template so that this works whether isfinite() is std::isfinite() or
 * in the global namespace.  The reality seems to vary between compiler
 * versions.
 *
 * Make sure namespace std exists to avoid compiler warnings.
 *
 * extern "C++" is required as this fragment can end up inside an extern "C" { } block
 */
namespace std { }
extern "C++" template<typename T>
inline int SWIG_isfinite_func(T x) {
  using namespace std;
  return isfinite(x);
}
#  define SWIG_isfinite(X) (SWIG_isfinite_func(X))
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


SWIGINTERN int
SWIG_AsVal_float (VALUE obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if (SWIG_Float_Overflow_Check(v)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_char (VALUE obj, unsigned char *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned char >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE VALUE
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


SWIGINTERNINLINE VALUE
SWIG_From_signed_SS_char  (signed char value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_char  (unsigned char value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE VALUE 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return ULL2NUM(value);
}
#endif


SWIGINTERNINLINE VALUE
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}


SWIGINTERNINLINE VALUE 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_short (VALUE obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_short  (unsigned short value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERN int
SWIG_AsCharArray(VALUE obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    /* special case of single char conversion when we don't need space for NUL */
    if (size == 1 && csize == 2 && cptr && !cptr[1]) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char (VALUE obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}


SWIGINTERNINLINE VALUE
SWIG_From_char  (char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}

static swig_class SwigClassGC_VALUE;


/*
  Document-method: Playercpp::GC_VALUE.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_GC_VALUE_inspect(int argc, VALUE *argv, VALUE self) {
  swig::GC_VALUE *arg1 = (swig::GC_VALUE *) 0 ;
  swig::GC_VALUE r1 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  r1 = self; arg1 = &r1;
  result = (VALUE)((swig::GC_VALUE const *)arg1)->inspect();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Playercpp::GC_VALUE.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_GC_VALUE_to_s(int argc, VALUE *argv, VALUE self) {
  swig::GC_VALUE *arg1 = (swig::GC_VALUE *) 0 ;
  swig::GC_VALUE r1 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  r1 = self; arg1 = &r1;
  result = (VALUE)((swig::GC_VALUE const *)arg1)->to_s();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassConstIterator;

SWIGINTERN void
free_swig_ConstIterator(void *self) {
    swig::ConstIterator *arg1 = (swig::ConstIterator *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_ConstIterator_value(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","value", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  try {
    result = (VALUE)((swig::ConstIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Playercpp::ConstIterator.dup

  call-seq:
    dup -> ConstIterator

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_ConstIterator_dup(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  result = (swig::ConstIterator *)((swig::ConstIterator const *)arg1)->dup();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Playercpp::ConstIterator.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_ConstIterator_inspect(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  result = (VALUE)((swig::ConstIterator const *)arg1)->inspect();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Playercpp::ConstIterator.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_ConstIterator_to_s(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  result = (VALUE)((swig::ConstIterator const *)arg1)->to_s();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_next__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","next", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::ConstIterator *)(arg1)->next(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_next__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  try {
    result = (swig::ConstIterator *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ConstIterator_next(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ConstIterator_next__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ConstIterator_next__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "ConstIterator.next", 
    "    swig::ConstIterator ConstIterator.next(size_t n)\n"
    "    swig::ConstIterator * ConstIterator.next()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_previous__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","previous", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::ConstIterator *)(arg1)->previous(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_previous__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  try {
    result = (swig::ConstIterator *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ConstIterator_previous(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ConstIterator_previous__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ConstIterator_previous__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "ConstIterator.previous", 
    "    swig::ConstIterator ConstIterator.previous(size_t n)\n"
    "    swig::ConstIterator * ConstIterator.previous()\n");
  
  return Qnil;
}



/*
  Document-method: Playercpp::ConstIterator.==

  call-seq:
    ==(x) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_ConstIterator___eq__(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  swig::ConstIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__ConstIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::ConstIterator const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::ConstIterator const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::ConstIterator * >(argp2);
  result = (bool)((swig::ConstIterator const *)arg1)->operator ==((swig::ConstIterator const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Playercpp::ConstIterator.+

  call-seq:
    +(n) -> ConstIterator

Add operator.
*/
SWIGINTERN VALUE
_wrap_ConstIterator___add__(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator +", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::ConstIterator *)((swig::ConstIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Playercpp::ConstIterator.-

  call-seq:
    -(n) -> ConstIterator
    -(x) -> ptrdiff_t

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_ConstIterator___sub____SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator -", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::ConstIterator *)((swig::ConstIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator___sub____SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  swig::ConstIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ptrdiff_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__ConstIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::ConstIterator const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::ConstIterator const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::ConstIterator * >(argp2);
  result = ((swig::ConstIterator const *)arg1)->operator -((swig::ConstIterator const &)*arg2);
  vresult = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ConstIterator___sub__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ConstIterator___sub____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ConstIterator___sub____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "ConstIterator.__sub__", 
    "    swig::ConstIterator ConstIterator.__sub__(ptrdiff_t n)\n"
    "    ptrdiff_t ConstIterator.__sub__(swig::ConstIterator const &x)\n");
  
  return Qnil;
}


static swig_class SwigClassIterator;

SWIGINTERN VALUE
_wrap_Iterator_valuee___(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  VALUE *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE temp2 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","setValue", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  temp2 = static_cast< VALUE >(argv[0]);
  arg2 = &temp2;
  result = (VALUE)(arg1)->setValue((VALUE const &)*arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Playercpp::Iterator.dup

  call-seq:
    dup -> Iterator

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_Iterator_dup(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  result = (swig::Iterator *)((swig::Iterator const *)arg1)->dup();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_next__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","next", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::Iterator *)(arg1)->next(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_next__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  try {
    result = (swig::Iterator *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Iterator_next(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Iterator_next__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Iterator_next__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Iterator.next", 
    "    swig::Iterator Iterator.next(size_t n)\n"
    "    swig::Iterator * Iterator.next()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_previous__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","previous", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::Iterator *)(arg1)->previous(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_previous__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  try {
    result = (swig::Iterator *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Iterator_previous(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Iterator_previous__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Iterator_previous__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Iterator.previous", 
    "    swig::Iterator Iterator.previous(size_t n)\n"
    "    swig::Iterator * Iterator.previous()\n");
  
  return Qnil;
}



/*
  Document-method: Playercpp::Iterator.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_Iterator_inspect(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  result = (VALUE)((swig::Iterator const *)arg1)->inspect();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Playercpp::Iterator.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_Iterator_to_s(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  result = (VALUE)((swig::Iterator const *)arg1)->to_s();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Playercpp::Iterator.==

  call-seq:
    ==(x) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_Iterator___eq__(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  swig::Iterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__Iterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::Iterator const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::Iterator const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::Iterator * >(argp2);
  result = (bool)((swig::Iterator const *)arg1)->operator ==((swig::Iterator const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Playercpp::Iterator.+

  call-seq:
    +(n) -> Iterator

Add operator.
*/
SWIGINTERN VALUE
_wrap_Iterator___add__(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator +", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::Iterator *)((swig::Iterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Playercpp::Iterator.-

  call-seq:
    -(n) -> Iterator
    -(x) -> ptrdiff_t

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_Iterator___sub____SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator -", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::Iterator *)((swig::Iterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator___sub____SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  swig::Iterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ptrdiff_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__Iterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::Iterator const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::Iterator const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::Iterator * >(argp2);
  result = ((swig::Iterator const *)arg1)->operator -((swig::Iterator const &)*arg2);
  vresult = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Iterator___sub__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_swig__Iterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Iterator___sub____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Iterator___sub____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Iterator.__sub__", 
    "    swig::Iterator Iterator.__sub__(ptrdiff_t n)\n"
    "    ptrdiff_t Iterator.__sub__(swig::Iterator const &x)\n");
  
  return Qnil;
}


SWIGINTERN void
free_swig_Iterator(void *self) {
    swig::Iterator *arg1 = (swig::Iterator *)self;
    delete arg1;
}

static swig_class SwigClassThread;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_thread_allocate(VALUE self)
#else
_wrap_thread_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_boost__thread);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_thread(int argc, VALUE *argv, VALUE self) {
  boost::thread *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (boost::thread *)new boost::thread();
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_boost_thread(void *self) {
    boost::thread *arg1 = (boost::thread *)self;
    delete arg1;
}

static swig_class SwigClassMutex;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_mutex_allocate(VALUE self)
#else
_wrap_mutex_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_boost__mutex);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_mutex(int argc, VALUE *argv, VALUE self) {
  boost::mutex *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (boost::mutex *)new boost::mutex();
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_boost_mutex(void *self) {
    boost::mutex *arg1 = (boost::mutex *)self;
    delete arg1;
}

static swig_class SwigClassPlayerClient;

SWIGINTERN VALUE
_wrap_new_PlayerClient__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::string arg1 ;
  uint32_t arg2 ;
  int arg3 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PlayerCc::PlayerClient *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "std::string const","PlayerClient", 1, argv[0] )); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","PlayerClient", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","PlayerClient", 3, argv[2] ));
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (PlayerCc::PlayerClient *)new PlayerCc::PlayerClient(arg1,arg2,arg3);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_PlayerClient__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::string arg1 ;
  uint32_t arg2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::PlayerClient *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "std::string const","PlayerClient", 1, argv[0] )); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","PlayerClient", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::PlayerClient *)new PlayerCc::PlayerClient(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_PlayerClient__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::string arg1 ;
  PlayerCc::PlayerClient *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "std::string const","PlayerClient", 1, argv[0] )); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PlayerCc::PlayerClient *)new PlayerCc::PlayerClient(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_PlayerClient_allocate(VALUE self)
#else
_wrap_PlayerClient_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__PlayerClient);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_PlayerClient__SWIG_3(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (PlayerCc::PlayerClient *)new PlayerCc::PlayerClient();
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_PlayerClient(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_PlayerClient__SWIG_3(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PlayerClient__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_PlayerClient__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_PlayerClient__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "PlayerClient.new", 
    "    PlayerClient.new(std::string const aHostname, uint32_t aPort, int transport)\n"
    "    PlayerClient.new(std::string const aHostname, uint32_t aPort)\n"
    "    PlayerClient.new(std::string const aHostname)\n"
    "    PlayerClient.new()\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_PlayerClient(void *self) {
    PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_PlayerClient_Connected(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","Connected", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (bool)(arg1)->Connected();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlayerClient_StartThread(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","StartThread", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      (arg1)->StartThread();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlayerClient_StopThread(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","StopThread", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      (arg1)->StopThread();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlayerClient_Run__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","Run", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","Run", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      (arg1)->Run(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlayerClient_Run__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","Run", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      (arg1)->Run();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_PlayerClient_Run(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_PlayerClient_Run__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PlayerClient_Run__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "PlayerClient.Run", 
    "    void PlayerClient.Run(uint32_t aTimeout)\n"
    "    void PlayerClient.Run()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlayerClient_Stop(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","Stop", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      (arg1)->Stop();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlayerClient_Peek__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","Peek", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","Peek", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (bool)(arg1)->Peek(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlayerClient_Peek__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","Peek", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (bool)(arg1)->Peek();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_PlayerClient_Peek(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_PlayerClient_Peek__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PlayerClient_Peek__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "PlayerClient.Peek", 
    "    bool PlayerClient.Peek(uint32_t timeout)\n"
    "    bool PlayerClient.Peek()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlayerClient_SetRequestTimeout(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","SetRequestTimeout", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","SetRequestTimeout", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      (arg1)->SetRequestTimeout(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlayerClient_SetRetryLimit(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","SetRetryLimit", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SetRetryLimit", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->SetRetryLimit(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlayerClient_GetRetryLimit(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","GetRetryLimit", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (int)(arg1)->GetRetryLimit();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlayerClient_SetRetryTime(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","SetRetryTime", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetRetryTime", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetRetryTime(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlayerClient_GetRetryTime(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","GetRetryTime", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (double)(arg1)->GetRetryTime();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlayerClient_Read(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","Read", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      (arg1)->Read();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlayerClient_ReadIfWaiting(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","ReadIfWaiting", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      (arg1)->ReadIfWaiting();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlayerClient_SetDataMode(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","SetDataMode", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","SetDataMode", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      (arg1)->SetDataMode(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlayerClient_SetReplaceRule__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  bool arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","SetReplaceRule", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","SetReplaceRule", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","SetReplaceRule", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","SetReplaceRule", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "int","SetReplaceRule", 5, argv[3] ));
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      (arg1)->SetReplaceRule(arg2,arg3,arg4,arg5);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlayerClient_SetReplaceRule__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  bool arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","SetReplaceRule", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","SetReplaceRule", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","SetReplaceRule", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","SetReplaceRule", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      (arg1)->SetReplaceRule(arg2,arg3,arg4);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlayerClient_SetReplaceRule__SWIG_2(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  bool arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","SetReplaceRule", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","SetReplaceRule", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","SetReplaceRule", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->SetReplaceRule(arg2,arg3);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlayerClient_SetReplaceRule__SWIG_3(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","SetReplaceRule", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","SetReplaceRule", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->SetReplaceRule(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_PlayerClient_SetReplaceRule(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PlayerClient_SetReplaceRule__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_PlayerClient_SetReplaceRule__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_PlayerClient_SetReplaceRule__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_PlayerClient_SetReplaceRule__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "PlayerClient.SetReplaceRule", 
    "    void PlayerClient.SetReplaceRule(bool aReplace, int aType, int aSubtype, int aInterf)\n"
    "    void PlayerClient.SetReplaceRule(bool aReplace, int aType, int aSubtype)\n"
    "    void PlayerClient.SetReplaceRule(bool aReplace, int aType)\n"
    "    void PlayerClient.SetReplaceRule(bool aReplace)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlayerClient_RequestDeviceList(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","RequestDeviceList", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      (arg1)->RequestDeviceList();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlayerClient_GetDeviceList(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::list< playerc_device_info_t > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","GetDeviceList", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (arg1)->GetDeviceList();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new std::list< playerc_device_info_t >(static_cast< const std::list< playerc_device_info_t >& >(result))), SWIGTYPE_p_std__listT_playerc_device_info_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlayerClient_GetHostname(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient const *","GetHostname", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = ((PlayerCc::PlayerClient const *)arg1)->GetHostname();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlayerClient_GetPort(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient const *","GetPort", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::PlayerClient const *)arg1)->GetPort();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlayerClient_LookupCode(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient const *","LookupCode", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "std::string","LookupCode", 2, argv[0] )); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (int)((PlayerCc::PlayerClient const *)arg1)->LookupCode(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlayerClient_LookupName(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient const *","LookupName", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","LookupName", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((PlayerCc::PlayerClient const *)arg1)->LookupName(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlayerClient_GetOverflowCount(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","GetOverflowCount", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (uint32_t)(arg1)->GetOverflowCount();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Playercpp::std.<<

  call-seq:
    <<(os, c) -> std::ostream &
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, a) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, c) -> std::ostream
    <<(os, e) -> std::ostream

Left shifting or appending operator.
*/
SWIGINTERN VALUE
_wrap___lshift____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  PlayerCc::PlayerClient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_PlayerCc__PlayerClient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "PlayerCc::PlayerClient const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< PlayerCc::PlayerClient * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(PlayerCc::PlayerClient const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassClientProxy;

SWIGINTERN VALUE
_wrap_ClientProxy_IsValid(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ClientProxy *arg1 = (PlayerCc::ClientProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ClientProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ClientProxy const *","IsValid", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ClientProxy * >(argp1);
  {
    try {
      result = (bool)((PlayerCc::ClientProxy const *)arg1)->IsValid();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ClientProxy_IsFresh(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ClientProxy *arg1 = (PlayerCc::ClientProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ClientProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ClientProxy const *","IsFresh", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ClientProxy * >(argp1);
  {
    try {
      result = (bool)((PlayerCc::ClientProxy const *)arg1)->IsFresh();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ClientProxy_NotFresh(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ClientProxy *arg1 = (PlayerCc::ClientProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ClientProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ClientProxy *","NotFresh", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ClientProxy * >(argp1);
  {
    try {
      (arg1)->NotFresh();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ClientProxy_GetDriverName(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ClientProxy *arg1 = (PlayerCc::ClientProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ClientProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ClientProxy const *","GetDriverName", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ClientProxy * >(argp1);
  {
    try {
      result = ((PlayerCc::ClientProxy const *)arg1)->GetDriverName();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ClientProxy_GetDataTime(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ClientProxy *arg1 = (PlayerCc::ClientProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ClientProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ClientProxy const *","GetDataTime", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ClientProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::ClientProxy const *)arg1)->GetDataTime();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ClientProxy_GetElapsedTime(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ClientProxy *arg1 = (PlayerCc::ClientProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ClientProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ClientProxy const *","GetElapsedTime", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ClientProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::ClientProxy const *)arg1)->GetElapsedTime();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ClientProxy_GetPlayerClient(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ClientProxy *arg1 = (PlayerCc::ClientProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::PlayerClient *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ClientProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ClientProxy const *","GetPlayerClient", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ClientProxy * >(argp1);
  {
    try {
      result = (PlayerCc::PlayerClient *)((PlayerCc::ClientProxy const *)arg1)->GetPlayerClient();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ClientProxy_GetIndex(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ClientProxy *arg1 = (PlayerCc::ClientProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ClientProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ClientProxy const *","GetIndex", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ClientProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::ClientProxy const *)arg1)->GetIndex();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ClientProxy_GetInterface(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ClientProxy *arg1 = (PlayerCc::ClientProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ClientProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ClientProxy const *","GetInterface", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ClientProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::ClientProxy const *)arg1)->GetInterface();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ClientProxy_GetInterfaceStr(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ClientProxy *arg1 = (PlayerCc::ClientProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ClientProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ClientProxy const *","GetInterfaceStr", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ClientProxy * >(argp1);
  {
    try {
      result = ((PlayerCc::ClientProxy const *)arg1)->GetInterfaceStr();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ClientProxy_SetReplaceRule__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ClientProxy *arg1 = (PlayerCc::ClientProxy *) 0 ;
  bool arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ClientProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ClientProxy *","SetReplaceRule", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ClientProxy * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","SetReplaceRule", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","SetReplaceRule", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","SetReplaceRule", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      (arg1)->SetReplaceRule(arg2,arg3,arg4);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ClientProxy_SetReplaceRule__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ClientProxy *arg1 = (PlayerCc::ClientProxy *) 0 ;
  bool arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ClientProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ClientProxy *","SetReplaceRule", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ClientProxy * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","SetReplaceRule", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","SetReplaceRule", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->SetReplaceRule(arg2,arg3);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ClientProxy_SetReplaceRule__SWIG_2(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ClientProxy *arg1 = (PlayerCc::ClientProxy *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ClientProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ClientProxy *","SetReplaceRule", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ClientProxy * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","SetReplaceRule", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->SetReplaceRule(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ClientProxy_SetReplaceRule(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__ClientProxy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ClientProxy_SetReplaceRule__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__ClientProxy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ClientProxy_SetReplaceRule__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__ClientProxy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ClientProxy_SetReplaceRule__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "ClientProxy.SetReplaceRule", 
    "    void ClientProxy.SetReplaceRule(bool aReplace, int aType, int aSubtype)\n"
    "    void ClientProxy.SetReplaceRule(bool aReplace, int aType)\n"
    "    void ClientProxy.SetReplaceRule(bool aReplace)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ClientProxy_HasCapability(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ClientProxy *arg1 = (PlayerCc::ClientProxy *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ClientProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ClientProxy *","HasCapability", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ClientProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","HasCapability", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "uint32_t","HasCapability", 3, argv[1] ));
  } 
  arg3 = static_cast< uint32_t >(val3);
  {
    try {
      result = (int)(arg1)->HasCapability(arg2,arg3);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ClientProxy_GetBoolProp(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ClientProxy *arg1 = (PlayerCc::ClientProxy *) 0 ;
  char *arg2 = (char *) 0 ;
  bool *arg3 = (bool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ClientProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ClientProxy *","GetBoolProp", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ClientProxy * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char *","GetBoolProp", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_bool, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "bool *","GetBoolProp", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< bool * >(argp3);
  {
    try {
      result = (int)(arg1)->GetBoolProp(arg2,arg3);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ClientProxy_SetBoolProp(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ClientProxy *arg1 = (PlayerCc::ClientProxy *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ClientProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ClientProxy *","SetBoolProp", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ClientProxy * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char *","SetBoolProp", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","SetBoolProp", 3, argv[1] ));
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (int)(arg1)->SetBoolProp(arg2,arg3);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ClientProxy_GetIntProp(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ClientProxy *arg1 = (PlayerCc::ClientProxy *) 0 ;
  char *arg2 = (char *) 0 ;
  int32_t *arg3 = (int32_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ClientProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ClientProxy *","GetIntProp", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ClientProxy * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char *","GetIntProp", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "int32_t *","GetIntProp", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< int32_t * >(argp3);
  {
    try {
      result = (int)(arg1)->GetIntProp(arg2,arg3);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ClientProxy_SetIntProp(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ClientProxy *arg1 = (PlayerCc::ClientProxy *) 0 ;
  char *arg2 = (char *) 0 ;
  int32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ClientProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ClientProxy *","SetIntProp", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ClientProxy * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char *","SetIntProp", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int32_t","SetIntProp", 3, argv[1] ));
  } 
  arg3 = static_cast< int32_t >(val3);
  {
    try {
      result = (int)(arg1)->SetIntProp(arg2,arg3);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ClientProxy_GetDblProp(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ClientProxy *arg1 = (PlayerCc::ClientProxy *) 0 ;
  char *arg2 = (char *) 0 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ClientProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ClientProxy *","GetDblProp", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ClientProxy * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char *","GetDblProp", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "double *","GetDblProp", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      result = (int)(arg1)->GetDblProp(arg2,arg3);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ClientProxy_SetDblProp(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ClientProxy *arg1 = (PlayerCc::ClientProxy *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ClientProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ClientProxy *","SetDblProp", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ClientProxy * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char *","SetDblProp", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetDblProp", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (int)(arg1)->SetDblProp(arg2,arg3);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ClientProxy_GetStrProp(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ClientProxy *arg1 = (PlayerCc::ClientProxy *) 0 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ClientProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ClientProxy *","GetStrProp", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ClientProxy * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char *","GetStrProp", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char **","GetStrProp", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< char ** >(argp3);
  {
    try {
      result = (int)(arg1)->GetStrProp(arg2,arg3);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ClientProxy_SetStrProp(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ClientProxy *arg1 = (PlayerCc::ClientProxy *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ClientProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ClientProxy *","SetStrProp", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ClientProxy * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char *","SetStrProp", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char *","SetStrProp", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      result = (int)(arg1)->SetStrProp(arg2,arg3);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


static swig_class SwigClassActArrayProxy;

SWIGINTERN VALUE
_wrap_new_ActArrayProxy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::ActArrayProxy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","ActArrayProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","ActArrayProxy", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::ActArrayProxy *)new PlayerCc::ActArrayProxy(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_ActArrayProxy_allocate(VALUE self)
#else
_wrap_ActArrayProxy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__ActArrayProxy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_ActArrayProxy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::ActArrayProxy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","ActArrayProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (PlayerCc::ActArrayProxy *)new PlayerCc::ActArrayProxy(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_ActArrayProxy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ActArrayProxy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ActArrayProxy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "ActArrayProxy.new", 
    "    ActArrayProxy.new(PlayerCc::PlayerClient *aPc, uint32_t aIndex)\n"
    "    ActArrayProxy.new(PlayerCc::PlayerClient *aPc)\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_ActArrayProxy(void *self) {
    PlayerCc::ActArrayProxy *arg1 = (PlayerCc::ActArrayProxy *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_ActArrayProxy_RequestGeometry(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ActArrayProxy *arg1 = (PlayerCc::ActArrayProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ActArrayProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ActArrayProxy *","RequestGeometry", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ActArrayProxy * >(argp1);
  {
    try {
      (arg1)->RequestGeometry();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ActArrayProxy_SetPowerConfig(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ActArrayProxy *arg1 = (PlayerCc::ActArrayProxy *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ActArrayProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ActArrayProxy *","SetPowerConfig", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ActArrayProxy * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","SetPowerConfig", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->SetPowerConfig(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ActArrayProxy_SetBrakesConfig(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ActArrayProxy *arg1 = (PlayerCc::ActArrayProxy *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ActArrayProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ActArrayProxy *","SetBrakesConfig", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ActArrayProxy * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","SetBrakesConfig", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->SetBrakesConfig(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ActArrayProxy_SetSpeedConfig(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ActArrayProxy *arg1 = (PlayerCc::ActArrayProxy *) 0 ;
  uint32_t arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ActArrayProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ActArrayProxy *","SetSpeedConfig", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ActArrayProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","SetSpeedConfig", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float","SetSpeedConfig", 3, argv[1] ));
  } 
  arg3 = static_cast< float >(val3);
  {
    try {
      (arg1)->SetSpeedConfig(arg2,arg3);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ActArrayProxy_MoveTo(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ActArrayProxy *arg1 = (PlayerCc::ActArrayProxy *) 0 ;
  uint32_t arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ActArrayProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ActArrayProxy *","MoveTo", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ActArrayProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","MoveTo", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float","MoveTo", 3, argv[1] ));
  } 
  arg3 = static_cast< float >(val3);
  {
    try {
      (arg1)->MoveTo(arg2,arg3);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ActArrayProxy_MoveToMulti(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ActArrayProxy *arg1 = (PlayerCc::ActArrayProxy *) 0 ;
  SwigValueWrapper< std::vector< float,std::allocator< float > > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ActArrayProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ActArrayProxy *","MoveToMulti", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ActArrayProxy * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< float,std::allocator< float > >","MoveToMulti", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< float,std::allocator< float > >","MoveToMulti", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< std::vector< float,std::allocator< float > > * >(argp2));
    }
  }
  {
    try {
      (arg1)->MoveToMulti(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ActArrayProxy_MoveAtSpeed(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ActArrayProxy *arg1 = (PlayerCc::ActArrayProxy *) 0 ;
  uint32_t arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ActArrayProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ActArrayProxy *","MoveAtSpeed", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ActArrayProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","MoveAtSpeed", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float","MoveAtSpeed", 3, argv[1] ));
  } 
  arg3 = static_cast< float >(val3);
  {
    try {
      (arg1)->MoveAtSpeed(arg2,arg3);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ActArrayProxy_MoveAtSpeedMulti(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ActArrayProxy *arg1 = (PlayerCc::ActArrayProxy *) 0 ;
  SwigValueWrapper< std::vector< float,std::allocator< float > > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ActArrayProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ActArrayProxy *","MoveAtSpeedMulti", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ActArrayProxy * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< float,std::allocator< float > >","MoveAtSpeedMulti", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< float,std::allocator< float > >","MoveAtSpeedMulti", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< std::vector< float,std::allocator< float > > * >(argp2));
    }
  }
  {
    try {
      (arg1)->MoveAtSpeedMulti(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ActArrayProxy_MoveHome(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ActArrayProxy *arg1 = (PlayerCc::ActArrayProxy *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ActArrayProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ActArrayProxy *","MoveHome", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ActArrayProxy * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","MoveHome", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->MoveHome(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ActArrayProxy_SetActuatorCurrent(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ActArrayProxy *arg1 = (PlayerCc::ActArrayProxy *) 0 ;
  uint32_t arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ActArrayProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ActArrayProxy *","SetActuatorCurrent", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ActArrayProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","SetActuatorCurrent", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float","SetActuatorCurrent", 3, argv[1] ));
  } 
  arg3 = static_cast< float >(val3);
  {
    try {
      (arg1)->SetActuatorCurrent(arg2,arg3);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ActArrayProxy_SetActuatorCurrentMulti(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ActArrayProxy *arg1 = (PlayerCc::ActArrayProxy *) 0 ;
  SwigValueWrapper< std::vector< float,std::allocator< float > > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ActArrayProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ActArrayProxy *","SetActuatorCurrentMulti", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ActArrayProxy * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< float,std::allocator< float > >","SetActuatorCurrentMulti", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< float,std::allocator< float > >","SetActuatorCurrentMulti", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< std::vector< float,std::allocator< float > > * >(argp2));
    }
  }
  {
    try {
      (arg1)->SetActuatorCurrentMulti(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ActArrayProxy_GetCount(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ActArrayProxy *arg1 = (PlayerCc::ActArrayProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ActArrayProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ActArrayProxy const *","GetCount", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ActArrayProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::ActArrayProxy const *)arg1)->GetCount();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ActArrayProxy_GetActuatorData(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ActArrayProxy *arg1 = (PlayerCc::ActArrayProxy *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  player_actarray_actuator_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ActArrayProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ActArrayProxy const *","GetActuatorData", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ActArrayProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","GetActuatorData", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = ((PlayerCc::ActArrayProxy const *)arg1)->GetActuatorData(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_actarray_actuator_t(static_cast< const player_actarray_actuator_t& >(result))), SWIGTYPE_p_player_actarray_actuator_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ActArrayProxy_GetActuatorGeom(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ActArrayProxy *arg1 = (PlayerCc::ActArrayProxy *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  player_actarray_actuatorgeom_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ActArrayProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ActArrayProxy const *","GetActuatorGeom", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ActArrayProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","GetActuatorGeom", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = ((PlayerCc::ActArrayProxy const *)arg1)->GetActuatorGeom(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_actarray_actuatorgeom_t(static_cast< const player_actarray_actuatorgeom_t& >(result))), SWIGTYPE_p_player_actarray_actuatorgeom_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ActArrayProxy_GetBasePos(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ActArrayProxy *arg1 = (PlayerCc::ActArrayProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  player_point_3d_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ActArrayProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ActArrayProxy const *","GetBasePos", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ActArrayProxy * >(argp1);
  {
    try {
      result = ((PlayerCc::ActArrayProxy const *)arg1)->GetBasePos();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_point_3d_t(static_cast< const player_point_3d_t& >(result))), SWIGTYPE_p_player_point_3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ActArrayProxy_GetBaseOrientation(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ActArrayProxy *arg1 = (PlayerCc::ActArrayProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  player_orientation_3d_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ActArrayProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ActArrayProxy const *","GetBaseOrientation", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ActArrayProxy * >(argp1);
  {
    try {
      result = ((PlayerCc::ActArrayProxy const *)arg1)->GetBaseOrientation();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_orientation_3d_t(static_cast< const player_orientation_3d_t& >(result))), SWIGTYPE_p_player_orientation_3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassAioProxy;

SWIGINTERN VALUE
_wrap_new_AioProxy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::AioProxy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","AioProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","AioProxy", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::AioProxy *)new PlayerCc::AioProxy(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_AioProxy_allocate(VALUE self)
#else
_wrap_AioProxy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__AioProxy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_AioProxy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::AioProxy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","AioProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (PlayerCc::AioProxy *)new PlayerCc::AioProxy(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_AioProxy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AioProxy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_AioProxy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "AioProxy.new", 
    "    AioProxy.new(PlayerCc::PlayerClient *aPc, uint32_t aIndex)\n"
    "    AioProxy.new(PlayerCc::PlayerClient *aPc)\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_AioProxy(void *self) {
    PlayerCc::AioProxy *arg1 = (PlayerCc::AioProxy *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_AioProxy_GetCount(int argc, VALUE *argv, VALUE self) {
  PlayerCc::AioProxy *arg1 = (PlayerCc::AioProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__AioProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::AioProxy const *","GetCount", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::AioProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::AioProxy const *)arg1)->GetCount();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AioProxy_GetVoltage(int argc, VALUE *argv, VALUE self) {
  PlayerCc::AioProxy *arg1 = (PlayerCc::AioProxy *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__AioProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::AioProxy const *","GetVoltage", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::AioProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","GetVoltage", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (double)((PlayerCc::AioProxy const *)arg1)->GetVoltage(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AioProxy_SetVoltage(int argc, VALUE *argv, VALUE self) {
  PlayerCc::AioProxy *arg1 = (PlayerCc::AioProxy *) 0 ;
  uint32_t arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__AioProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::AioProxy *","SetVoltage", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::AioProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","SetVoltage", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetVoltage", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->SetVoltage(arg2,arg3);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


static swig_class SwigClassAudioProxy;

SWIGINTERN VALUE
_wrap_new_AudioProxy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::AudioProxy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","AudioProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","AudioProxy", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::AudioProxy *)new PlayerCc::AudioProxy(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_AudioProxy_allocate(VALUE self)
#else
_wrap_AudioProxy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__AudioProxy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_AudioProxy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::AudioProxy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","AudioProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (PlayerCc::AudioProxy *)new PlayerCc::AudioProxy(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_AudioProxy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AudioProxy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_AudioProxy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "AudioProxy.new", 
    "    AudioProxy.new(PlayerCc::PlayerClient *aPc, uint32_t aIndex)\n"
    "    AudioProxy.new(PlayerCc::PlayerClient *aPc)\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_AudioProxy(void *self) {
    PlayerCc::AudioProxy *arg1 = (PlayerCc::AudioProxy *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_AudioProxy_GetMixerDetailsCount(int argc, VALUE *argv, VALUE self) {
  PlayerCc::AudioProxy *arg1 = (PlayerCc::AudioProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__AudioProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::AudioProxy const *","GetMixerDetailsCount", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::AudioProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::AudioProxy const *)arg1)->GetMixerDetailsCount();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AudioProxy_GetMixerDetails__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::AudioProxy *arg1 = (PlayerCc::AudioProxy *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  player_audio_mixer_channel_detail_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__AudioProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::AudioProxy const *","GetMixerDetails", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::AudioProxy * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","GetMixerDetails", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((PlayerCc::AudioProxy const *)arg1)->GetMixerDetails(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_audio_mixer_channel_detail_t(static_cast< const player_audio_mixer_channel_detail_t& >(result))), SWIGTYPE_p_player_audio_mixer_channel_detail_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AudioProxy_GetDefaultOutputChannel(int argc, VALUE *argv, VALUE self) {
  PlayerCc::AudioProxy *arg1 = (PlayerCc::AudioProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__AudioProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::AudioProxy const *","GetDefaultOutputChannel", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::AudioProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::AudioProxy const *)arg1)->GetDefaultOutputChannel();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AudioProxy_GetDefaultInputChannel(int argc, VALUE *argv, VALUE self) {
  PlayerCc::AudioProxy *arg1 = (PlayerCc::AudioProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__AudioProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::AudioProxy const *","GetDefaultInputChannel", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::AudioProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::AudioProxy const *)arg1)->GetDefaultInputChannel();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AudioProxy_GetWavDataLength(int argc, VALUE *argv, VALUE self) {
  PlayerCc::AudioProxy *arg1 = (PlayerCc::AudioProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__AudioProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::AudioProxy const *","GetWavDataLength", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::AudioProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::AudioProxy const *)arg1)->GetWavDataLength();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AudioProxy_GetWavData(int argc, VALUE *argv, VALUE self) {
  PlayerCc::AudioProxy *arg1 = (PlayerCc::AudioProxy *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__AudioProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::AudioProxy const *","GetWavData", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::AudioProxy * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint8_t *","GetWavData", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< uint8_t * >(argp2);
  {
    try {
      ((PlayerCc::AudioProxy const *)arg1)->GetWavData(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AudioProxy_GetSeqCount(int argc, VALUE *argv, VALUE self) {
  PlayerCc::AudioProxy *arg1 = (PlayerCc::AudioProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__AudioProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::AudioProxy const *","GetSeqCount", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::AudioProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::AudioProxy const *)arg1)->GetSeqCount();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AudioProxy_GetSeqItem(int argc, VALUE *argv, VALUE self) {
  PlayerCc::AudioProxy *arg1 = (PlayerCc::AudioProxy *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  player_audio_seq_item_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__AudioProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::AudioProxy const *","GetSeqItem", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::AudioProxy * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","GetSeqItem", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((PlayerCc::AudioProxy const *)arg1)->GetSeqItem(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_audio_seq_item_t(static_cast< const player_audio_seq_item_t& >(result))), SWIGTYPE_p_player_audio_seq_item_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AudioProxy_GetChannelCount(int argc, VALUE *argv, VALUE self) {
  PlayerCc::AudioProxy *arg1 = (PlayerCc::AudioProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__AudioProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::AudioProxy const *","GetChannelCount", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::AudioProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::AudioProxy const *)arg1)->GetChannelCount();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AudioProxy_GetChannel(int argc, VALUE *argv, VALUE self) {
  PlayerCc::AudioProxy *arg1 = (PlayerCc::AudioProxy *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  player_audio_mixer_channel_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__AudioProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::AudioProxy const *","GetChannel", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::AudioProxy * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","GetChannel", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((PlayerCc::AudioProxy const *)arg1)->GetChannel(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_audio_mixer_channel_t(static_cast< const player_audio_mixer_channel_t& >(result))), SWIGTYPE_p_player_audio_mixer_channel_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AudioProxy_GetState(int argc, VALUE *argv, VALUE self) {
  PlayerCc::AudioProxy *arg1 = (PlayerCc::AudioProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__AudioProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::AudioProxy const *","GetState", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::AudioProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::AudioProxy const *)arg1)->GetState();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AudioProxy_PlayWav(int argc, VALUE *argv, VALUE self) {
  PlayerCc::AudioProxy *arg1 = (PlayerCc::AudioProxy *) 0 ;
  uint32_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  uint32_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__AudioProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::AudioProxy *","PlayWav", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::AudioProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","PlayWav", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "uint8_t *","PlayWav", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< uint8_t * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "uint32_t","PlayWav", 4, argv[2] ));
  } 
  arg4 = static_cast< uint32_t >(val4);
  {
    try {
      (arg1)->PlayWav(arg2,arg3,arg4);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AudioProxy_SetWavStremRec(int argc, VALUE *argv, VALUE self) {
  PlayerCc::AudioProxy *arg1 = (PlayerCc::AudioProxy *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__AudioProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::AudioProxy *","SetWavStremRec", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::AudioProxy * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","SetWavStremRec", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->SetWavStremRec(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AudioProxy_PlaySample(int argc, VALUE *argv, VALUE self) {
  PlayerCc::AudioProxy *arg1 = (PlayerCc::AudioProxy *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__AudioProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::AudioProxy *","PlaySample", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::AudioProxy * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","PlaySample", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->PlaySample(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AudioProxy_PlaySeq(int argc, VALUE *argv, VALUE self) {
  PlayerCc::AudioProxy *arg1 = (PlayerCc::AudioProxy *) 0 ;
  player_audio_seq_t *arg2 = (player_audio_seq_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__AudioProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::AudioProxy *","PlaySeq", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::AudioProxy * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_player_audio_seq_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "player_audio_seq_t *","PlaySeq", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< player_audio_seq_t * >(argp2);
  {
    try {
      (arg1)->PlaySeq(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AudioProxy_SetMultMixerLevels(int argc, VALUE *argv, VALUE self) {
  PlayerCc::AudioProxy *arg1 = (PlayerCc::AudioProxy *) 0 ;
  player_audio_mixer_channel_list_t *arg2 = (player_audio_mixer_channel_list_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__AudioProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::AudioProxy *","SetMultMixerLevels", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::AudioProxy * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_player_audio_mixer_channel_list_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "player_audio_mixer_channel_list_t *","SetMultMixerLevels", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< player_audio_mixer_channel_list_t * >(argp2);
  {
    try {
      (arg1)->SetMultMixerLevels(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AudioProxy_SetMixerLevel(int argc, VALUE *argv, VALUE self) {
  PlayerCc::AudioProxy *arg1 = (PlayerCc::AudioProxy *) 0 ;
  uint32_t arg2 ;
  float arg3 ;
  uint8_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__AudioProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::AudioProxy *","SetMixerLevel", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::AudioProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","SetMixerLevel", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float","SetMixerLevel", 3, argv[1] ));
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "uint8_t","SetMixerLevel", 4, argv[2] ));
  } 
  arg4 = static_cast< uint8_t >(val4);
  {
    try {
      (arg1)->SetMixerLevel(arg2,arg3,arg4);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AudioProxy_RecordWav(int argc, VALUE *argv, VALUE self) {
  PlayerCc::AudioProxy *arg1 = (PlayerCc::AudioProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__AudioProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::AudioProxy *","RecordWav", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::AudioProxy * >(argp1);
  {
    try {
      (arg1)->RecordWav();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AudioProxy_LoadSample(int argc, VALUE *argv, VALUE self) {
  PlayerCc::AudioProxy *arg1 = (PlayerCc::AudioProxy *) 0 ;
  int arg2 ;
  uint32_t arg3 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  uint32_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__AudioProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::AudioProxy *","LoadSample", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::AudioProxy * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","LoadSample", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "uint32_t","LoadSample", 3, argv[1] ));
  } 
  arg3 = static_cast< uint32_t >(val3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "uint8_t *","LoadSample", 4, argv[2] )); 
  }
  arg4 = reinterpret_cast< uint8_t * >(argp4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "uint32_t","LoadSample", 5, argv[3] ));
  } 
  arg5 = static_cast< uint32_t >(val5);
  {
    try {
      (arg1)->LoadSample(arg2,arg3,arg4,arg5);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AudioProxy_GetSample(int argc, VALUE *argv, VALUE self) {
  PlayerCc::AudioProxy *arg1 = (PlayerCc::AudioProxy *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__AudioProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::AudioProxy *","GetSample", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::AudioProxy * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","GetSample", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->GetSample(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AudioProxy_RecordSample(int argc, VALUE *argv, VALUE self) {
  PlayerCc::AudioProxy *arg1 = (PlayerCc::AudioProxy *) 0 ;
  int arg2 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__AudioProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::AudioProxy *","RecordSample", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::AudioProxy * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","RecordSample", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "uint32_t","RecordSample", 3, argv[1] ));
  } 
  arg3 = static_cast< uint32_t >(val3);
  {
    try {
      (arg1)->RecordSample(arg2,arg3);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AudioProxy_GetMixerLevels(int argc, VALUE *argv, VALUE self) {
  PlayerCc::AudioProxy *arg1 = (PlayerCc::AudioProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__AudioProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::AudioProxy *","GetMixerLevels", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::AudioProxy * >(argp1);
  {
    try {
      (arg1)->GetMixerLevels();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AudioProxy_GetMixerDetails__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::AudioProxy *arg1 = (PlayerCc::AudioProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__AudioProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::AudioProxy *","GetMixerDetails", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::AudioProxy * >(argp1);
  {
    try {
      (arg1)->GetMixerDetails();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_AudioProxy_GetMixerDetails(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__AudioProxy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AudioProxy_GetMixerDetails__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__AudioProxy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AudioProxy_GetMixerDetails__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "AudioProxy.GetMixerDetails", 
    "    player_audio_mixer_channel_detail_t AudioProxy.GetMixerDetails(int aIndex)\n"
    "    void AudioProxy.GetMixerDetails()\n");
  
  return Qnil;
}


static swig_class SwigClassBlackBoardProxy;

SWIGINTERN VALUE
_wrap_new_BlackBoardProxy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::BlackBoardProxy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","BlackBoardProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","BlackBoardProxy", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::BlackBoardProxy *)new PlayerCc::BlackBoardProxy(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_BlackBoardProxy_allocate(VALUE self)
#else
_wrap_BlackBoardProxy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__BlackBoardProxy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_BlackBoardProxy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::BlackBoardProxy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","BlackBoardProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (PlayerCc::BlackBoardProxy *)new PlayerCc::BlackBoardProxy(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_BlackBoardProxy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BlackBoardProxy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_BlackBoardProxy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "BlackBoardProxy.new", 
    "    BlackBoardProxy.new(PlayerCc::PlayerClient *aPc, uint32_t aIndex)\n"
    "    BlackBoardProxy.new(PlayerCc::PlayerClient *aPc)\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_BlackBoardProxy(void *self) {
    PlayerCc::BlackBoardProxy *arg1 = (PlayerCc::BlackBoardProxy *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_BlackBoardProxy_SubscribeToKey__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::BlackBoardProxy *arg1 = (PlayerCc::BlackBoardProxy *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  player_blackboard_entry_t *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__BlackBoardProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::BlackBoardProxy *","SubscribeToKey", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::BlackBoardProxy * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","SubscribeToKey", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","SubscribeToKey", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      result = (player_blackboard_entry_t *)(arg1)->SubscribeToKey((char const *)arg2,(char const *)arg3);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_player_blackboard_entry, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BlackBoardProxy_SubscribeToKey__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::BlackBoardProxy *arg1 = (PlayerCc::BlackBoardProxy *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  player_blackboard_entry_t *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__BlackBoardProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::BlackBoardProxy *","SubscribeToKey", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::BlackBoardProxy * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","SubscribeToKey", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      result = (player_blackboard_entry_t *)(arg1)->SubscribeToKey((char const *)arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_player_blackboard_entry, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_BlackBoardProxy_SubscribeToKey(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__BlackBoardProxy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BlackBoardProxy_SubscribeToKey__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__BlackBoardProxy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BlackBoardProxy_SubscribeToKey__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "BlackBoardProxy.SubscribeToKey", 
    "    player_blackboard_entry_t BlackBoardProxy.SubscribeToKey(char const *key, char const *group)\n"
    "    player_blackboard_entry_t * BlackBoardProxy.SubscribeToKey(char const *key)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BlackBoardProxy_UnsubscribeFromKey__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::BlackBoardProxy *arg1 = (PlayerCc::BlackBoardProxy *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__BlackBoardProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::BlackBoardProxy *","UnsubscribeFromKey", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::BlackBoardProxy * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","UnsubscribeFromKey", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","UnsubscribeFromKey", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      (arg1)->UnsubscribeFromKey((char const *)arg2,(char const *)arg3);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BlackBoardProxy_UnsubscribeFromKey__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::BlackBoardProxy *arg1 = (PlayerCc::BlackBoardProxy *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__BlackBoardProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::BlackBoardProxy *","UnsubscribeFromKey", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::BlackBoardProxy * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","UnsubscribeFromKey", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      (arg1)->UnsubscribeFromKey((char const *)arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_BlackBoardProxy_UnsubscribeFromKey(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__BlackBoardProxy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BlackBoardProxy_UnsubscribeFromKey__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__BlackBoardProxy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BlackBoardProxy_UnsubscribeFromKey__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "BlackBoardProxy.UnsubscribeFromKey", 
    "    void BlackBoardProxy.UnsubscribeFromKey(char const *key, char const *group)\n"
    "    void BlackBoardProxy.UnsubscribeFromKey(char const *key)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BlackBoardProxy_SubscribeToGroup(int argc, VALUE *argv, VALUE self) {
  PlayerCc::BlackBoardProxy *arg1 = (PlayerCc::BlackBoardProxy *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__BlackBoardProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::BlackBoardProxy *","SubscribeToGroup", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::BlackBoardProxy * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","SubscribeToGroup", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      (arg1)->SubscribeToGroup((char const *)arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BlackBoardProxy_UnsubscribeFromGroup(int argc, VALUE *argv, VALUE self) {
  PlayerCc::BlackBoardProxy *arg1 = (PlayerCc::BlackBoardProxy *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__BlackBoardProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::BlackBoardProxy *","UnsubscribeFromGroup", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::BlackBoardProxy * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","UnsubscribeFromGroup", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      (arg1)->UnsubscribeFromGroup((char const *)arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BlackBoardProxy_SetEntry(int argc, VALUE *argv, VALUE self) {
  PlayerCc::BlackBoardProxy *arg1 = (PlayerCc::BlackBoardProxy *) 0 ;
  player_blackboard_entry_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__BlackBoardProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::BlackBoardProxy *","SetEntry", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::BlackBoardProxy * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_player_blackboard_entry,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "player_blackboard_entry_t const &","SetEntry", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "player_blackboard_entry_t const &","SetEntry", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< player_blackboard_entry_t * >(argp2);
  {
    try {
      (arg1)->SetEntry((player_blackboard_entry_t const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BlackBoardProxy_GetEntry(int argc, VALUE *argv, VALUE self) {
  PlayerCc::BlackBoardProxy *arg1 = (PlayerCc::BlackBoardProxy *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  player_blackboard_entry_t *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__BlackBoardProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::BlackBoardProxy *","GetEntry", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::BlackBoardProxy * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","GetEntry", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","GetEntry", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      result = (player_blackboard_entry_t *)(arg1)->GetEntry((char const *)arg2,(char const *)arg3);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_player_blackboard_entry, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BlackBoardProxy_SetEventHandler(int argc, VALUE *argv, VALUE self) {
  PlayerCc::BlackBoardProxy *arg1 = (PlayerCc::BlackBoardProxy *) 0 ;
  void (*arg2)(playerc_blackboard_t *,player_blackboard_entry_t) = (void (*)(playerc_blackboard_t *,player_blackboard_entry_t)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__BlackBoardProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::BlackBoardProxy *","SetEventHandler", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::BlackBoardProxy * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(argv[0], (void**)(&arg2), SWIGTYPE_p_f_p_playerc_blackboard_t_player_blackboard_entry__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), Ruby_Format_TypeError( "", "void (*)(playerc_blackboard_t *,player_blackboard_entry_t)","SetEventHandler", 2, argv[0] )); 
    }
  }
  {
    try {
      (arg1)->SetEventHandler(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


static swig_class SwigClassBlobfinderProxy;

SWIGINTERN VALUE
_wrap_new_BlobfinderProxy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::BlobfinderProxy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","BlobfinderProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","BlobfinderProxy", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::BlobfinderProxy *)new PlayerCc::BlobfinderProxy(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_BlobfinderProxy_allocate(VALUE self)
#else
_wrap_BlobfinderProxy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__BlobfinderProxy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_BlobfinderProxy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::BlobfinderProxy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","BlobfinderProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (PlayerCc::BlobfinderProxy *)new PlayerCc::BlobfinderProxy(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_BlobfinderProxy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BlobfinderProxy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_BlobfinderProxy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "BlobfinderProxy.new", 
    "    BlobfinderProxy.new(PlayerCc::PlayerClient *aPc, uint32_t aIndex)\n"
    "    BlobfinderProxy.new(PlayerCc::PlayerClient *aPc)\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_BlobfinderProxy(void *self) {
    PlayerCc::BlobfinderProxy *arg1 = (PlayerCc::BlobfinderProxy *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_BlobfinderProxy_GetCount(int argc, VALUE *argv, VALUE self) {
  PlayerCc::BlobfinderProxy *arg1 = (PlayerCc::BlobfinderProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__BlobfinderProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::BlobfinderProxy const *","GetCount", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::BlobfinderProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::BlobfinderProxy const *)arg1)->GetCount();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BlobfinderProxy_GetBlob(int argc, VALUE *argv, VALUE self) {
  PlayerCc::BlobfinderProxy *arg1 = (PlayerCc::BlobfinderProxy *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  playerc_blobfinder_blob_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__BlobfinderProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::BlobfinderProxy const *","GetBlob", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::BlobfinderProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","GetBlob", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = ((PlayerCc::BlobfinderProxy const *)arg1)->GetBlob(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new playerc_blobfinder_blob_t(static_cast< const playerc_blobfinder_blob_t& >(result))), SWIGTYPE_p_playerc_blobfinder_blob_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BlobfinderProxy_GetWidth(int argc, VALUE *argv, VALUE self) {
  PlayerCc::BlobfinderProxy *arg1 = (PlayerCc::BlobfinderProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__BlobfinderProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::BlobfinderProxy const *","GetWidth", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::BlobfinderProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::BlobfinderProxy const *)arg1)->GetWidth();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BlobfinderProxy_GetHeight(int argc, VALUE *argv, VALUE self) {
  PlayerCc::BlobfinderProxy *arg1 = (PlayerCc::BlobfinderProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__BlobfinderProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::BlobfinderProxy const *","GetHeight", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::BlobfinderProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::BlobfinderProxy const *)arg1)->GetHeight();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassBumperProxy;

SWIGINTERN VALUE
_wrap_new_BumperProxy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::BumperProxy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","BumperProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","BumperProxy", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::BumperProxy *)new PlayerCc::BumperProxy(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_BumperProxy_allocate(VALUE self)
#else
_wrap_BumperProxy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__BumperProxy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_BumperProxy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::BumperProxy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","BumperProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (PlayerCc::BumperProxy *)new PlayerCc::BumperProxy(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_BumperProxy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BumperProxy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_BumperProxy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "BumperProxy.new", 
    "    BumperProxy.new(PlayerCc::PlayerClient *aPc, uint32_t aIndex)\n"
    "    BumperProxy.new(PlayerCc::PlayerClient *aPc)\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_BumperProxy(void *self) {
    PlayerCc::BumperProxy *arg1 = (PlayerCc::BumperProxy *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_BumperProxy_GetCount(int argc, VALUE *argv, VALUE self) {
  PlayerCc::BumperProxy *arg1 = (PlayerCc::BumperProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__BumperProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::BumperProxy const *","GetCount", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::BumperProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::BumperProxy const *)arg1)->GetCount();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BumperProxy_IsBumped(int argc, VALUE *argv, VALUE self) {
  PlayerCc::BumperProxy *arg1 = (PlayerCc::BumperProxy *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__BumperProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::BumperProxy const *","IsBumped", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::BumperProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","IsBumped", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (uint32_t)((PlayerCc::BumperProxy const *)arg1)->IsBumped(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BumperProxy_IsAnyBumped(int argc, VALUE *argv, VALUE self) {
  PlayerCc::BumperProxy *arg1 = (PlayerCc::BumperProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__BumperProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::BumperProxy *","IsAnyBumped", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::BumperProxy * >(argp1);
  {
    try {
      result = (bool)(arg1)->IsAnyBumped();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BumperProxy_RequestBumperConfig(int argc, VALUE *argv, VALUE self) {
  PlayerCc::BumperProxy *arg1 = (PlayerCc::BumperProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__BumperProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::BumperProxy *","RequestBumperConfig", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::BumperProxy * >(argp1);
  {
    try {
      (arg1)->RequestBumperConfig();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BumperProxy_GetPoseCount(int argc, VALUE *argv, VALUE self) {
  PlayerCc::BumperProxy *arg1 = (PlayerCc::BumperProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__BumperProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::BumperProxy const *","GetPoseCount", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::BumperProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::BumperProxy const *)arg1)->GetPoseCount();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BumperProxy_GetPose(int argc, VALUE *argv, VALUE self) {
  PlayerCc::BumperProxy *arg1 = (PlayerCc::BumperProxy *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  player_bumper_define_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__BumperProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::BumperProxy const *","GetPose", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::BumperProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","GetPose", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = ((PlayerCc::BumperProxy const *)arg1)->GetPose(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_bumper_define_t(static_cast< const player_bumper_define_t& >(result))), SWIGTYPE_p_player_bumper_define_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassCameraProxy;

SWIGINTERN VALUE
_wrap_new_CameraProxy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::CameraProxy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","CameraProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","CameraProxy", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::CameraProxy *)new PlayerCc::CameraProxy(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_CameraProxy_allocate(VALUE self)
#else
_wrap_CameraProxy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__CameraProxy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_CameraProxy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::CameraProxy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","CameraProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (PlayerCc::CameraProxy *)new PlayerCc::CameraProxy(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_CameraProxy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CameraProxy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_CameraProxy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "CameraProxy.new", 
    "    CameraProxy.new(PlayerCc::PlayerClient *aPc, uint32_t aIndex)\n"
    "    CameraProxy.new(PlayerCc::PlayerClient *aPc)\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_CameraProxy(void *self) {
    PlayerCc::CameraProxy *arg1 = (PlayerCc::CameraProxy *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_CameraProxy_SaveFrame__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::CameraProxy *arg1 = (PlayerCc::CameraProxy *) 0 ;
  std::string arg2 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__CameraProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::CameraProxy *","SaveFrame", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::CameraProxy * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "std::string const","SaveFrame", 2, argv[0] )); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "uint32_t","SaveFrame", 3, argv[1] ));
  } 
  arg3 = static_cast< uint32_t >(val3);
  {
    try {
      (arg1)->SaveFrame(arg2,arg3);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CameraProxy_SaveFrame__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::CameraProxy *arg1 = (PlayerCc::CameraProxy *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__CameraProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::CameraProxy *","SaveFrame", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::CameraProxy * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "std::string const","SaveFrame", 2, argv[0] )); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->SaveFrame(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_CameraProxy_SaveFrame(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__CameraProxy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CameraProxy_SaveFrame__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__CameraProxy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CameraProxy_SaveFrame__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "CameraProxy.SaveFrame", 
    "    void CameraProxy.SaveFrame(std::string const aPrefix, uint32_t aWidth)\n"
    "    void CameraProxy.SaveFrame(std::string const aPrefix)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CameraProxy_Decompress(int argc, VALUE *argv, VALUE self) {
  PlayerCc::CameraProxy *arg1 = (PlayerCc::CameraProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__CameraProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::CameraProxy *","Decompress", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::CameraProxy * >(argp1);
  {
    try {
      (arg1)->Decompress();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CameraProxy_GetDepth(int argc, VALUE *argv, VALUE self) {
  PlayerCc::CameraProxy *arg1 = (PlayerCc::CameraProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__CameraProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::CameraProxy const *","GetDepth", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::CameraProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::CameraProxy const *)arg1)->GetDepth();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CameraProxy_GetWidth(int argc, VALUE *argv, VALUE self) {
  PlayerCc::CameraProxy *arg1 = (PlayerCc::CameraProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__CameraProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::CameraProxy const *","GetWidth", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::CameraProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::CameraProxy const *)arg1)->GetWidth();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CameraProxy_GetHeight(int argc, VALUE *argv, VALUE self) {
  PlayerCc::CameraProxy *arg1 = (PlayerCc::CameraProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__CameraProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::CameraProxy const *","GetHeight", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::CameraProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::CameraProxy const *)arg1)->GetHeight();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CameraProxy_GetFormat(int argc, VALUE *argv, VALUE self) {
  PlayerCc::CameraProxy *arg1 = (PlayerCc::CameraProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__CameraProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::CameraProxy const *","GetFormat", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::CameraProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::CameraProxy const *)arg1)->GetFormat();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CameraProxy_GetImageSize(int argc, VALUE *argv, VALUE self) {
  PlayerCc::CameraProxy *arg1 = (PlayerCc::CameraProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__CameraProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::CameraProxy const *","GetImageSize", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::CameraProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::CameraProxy const *)arg1)->GetImageSize();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CameraProxy_GetImage(int argc, VALUE *argv, VALUE self) {
  PlayerCc::CameraProxy *arg1 = (PlayerCc::CameraProxy *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__CameraProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::CameraProxy const *","GetImage", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::CameraProxy * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint8_t *","GetImage", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< uint8_t * >(argp2);
  {
    try {
      ((PlayerCc::CameraProxy const *)arg1)->GetImage(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CameraProxy_GetCompression(int argc, VALUE *argv, VALUE self) {
  PlayerCc::CameraProxy *arg1 = (PlayerCc::CameraProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__CameraProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::CameraProxy const *","GetCompression", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::CameraProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::CameraProxy const *)arg1)->GetCompression();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassDioProxy;

SWIGINTERN VALUE
_wrap_new_DioProxy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::DioProxy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","DioProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","DioProxy", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::DioProxy *)new PlayerCc::DioProxy(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_DioProxy_allocate(VALUE self)
#else
_wrap_DioProxy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__DioProxy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_DioProxy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::DioProxy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","DioProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (PlayerCc::DioProxy *)new PlayerCc::DioProxy(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_DioProxy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DioProxy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_DioProxy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "DioProxy.new", 
    "    DioProxy.new(PlayerCc::PlayerClient *aPc, uint32_t aIndex)\n"
    "    DioProxy.new(PlayerCc::PlayerClient *aPc)\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_DioProxy(void *self) {
    PlayerCc::DioProxy *arg1 = (PlayerCc::DioProxy *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_DioProxy_GetCount(int argc, VALUE *argv, VALUE self) {
  PlayerCc::DioProxy *arg1 = (PlayerCc::DioProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__DioProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::DioProxy const *","GetCount", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::DioProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::DioProxy const *)arg1)->GetCount();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_DioProxy_GetDigin(int argc, VALUE *argv, VALUE self) {
  PlayerCc::DioProxy *arg1 = (PlayerCc::DioProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__DioProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::DioProxy const *","GetDigin", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::DioProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::DioProxy const *)arg1)->GetDigin();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_DioProxy_GetInput(int argc, VALUE *argv, VALUE self) {
  PlayerCc::DioProxy *arg1 = (PlayerCc::DioProxy *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__DioProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::DioProxy const *","GetInput", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::DioProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","GetInput", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (bool)((PlayerCc::DioProxy const *)arg1)->GetInput(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_DioProxy_SetOutput(int argc, VALUE *argv, VALUE self) {
  PlayerCc::DioProxy *arg1 = (PlayerCc::DioProxy *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__DioProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::DioProxy *","SetOutput", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::DioProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","SetOutput", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "uint32_t","SetOutput", 3, argv[1] ));
  } 
  arg3 = static_cast< uint32_t >(val3);
  {
    try {
      (arg1)->SetOutput(arg2,arg3);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


static swig_class SwigClassFiducialProxy;

SWIGINTERN VALUE
_wrap_new_FiducialProxy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::FiducialProxy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","FiducialProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","FiducialProxy", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::FiducialProxy *)new PlayerCc::FiducialProxy(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_FiducialProxy_allocate(VALUE self)
#else
_wrap_FiducialProxy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__FiducialProxy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_FiducialProxy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::FiducialProxy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","FiducialProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (PlayerCc::FiducialProxy *)new PlayerCc::FiducialProxy(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_FiducialProxy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FiducialProxy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_FiducialProxy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "FiducialProxy.new", 
    "    FiducialProxy.new(PlayerCc::PlayerClient *aPc, uint32_t aIndex)\n"
    "    FiducialProxy.new(PlayerCc::PlayerClient *aPc)\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_FiducialProxy(void *self) {
    PlayerCc::FiducialProxy *arg1 = (PlayerCc::FiducialProxy *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_FiducialProxy_GetCount(int argc, VALUE *argv, VALUE self) {
  PlayerCc::FiducialProxy *arg1 = (PlayerCc::FiducialProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__FiducialProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::FiducialProxy const *","GetCount", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::FiducialProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::FiducialProxy const *)arg1)->GetCount();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_FiducialProxy_GetFiducialItem(int argc, VALUE *argv, VALUE self) {
  PlayerCc::FiducialProxy *arg1 = (PlayerCc::FiducialProxy *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  player_fiducial_item_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__FiducialProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::FiducialProxy const *","GetFiducialItem", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::FiducialProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","GetFiducialItem", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = ((PlayerCc::FiducialProxy const *)arg1)->GetFiducialItem(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_fiducial_item_t(static_cast< const player_fiducial_item_t& >(result))), SWIGTYPE_p_player_fiducial_item_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_FiducialProxy_GetSensorPose(int argc, VALUE *argv, VALUE self) {
  PlayerCc::FiducialProxy *arg1 = (PlayerCc::FiducialProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  player_pose3d_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__FiducialProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::FiducialProxy const *","GetSensorPose", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::FiducialProxy * >(argp1);
  {
    try {
      result = ((PlayerCc::FiducialProxy const *)arg1)->GetSensorPose();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_pose3d_t(static_cast< const player_pose3d_t& >(result))), SWIGTYPE_p_player_pose3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_FiducialProxy_GetSensorSize(int argc, VALUE *argv, VALUE self) {
  PlayerCc::FiducialProxy *arg1 = (PlayerCc::FiducialProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  player_bbox3d_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__FiducialProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::FiducialProxy const *","GetSensorSize", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::FiducialProxy * >(argp1);
  {
    try {
      result = ((PlayerCc::FiducialProxy const *)arg1)->GetSensorSize();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_bbox3d_t(static_cast< const player_bbox3d_t& >(result))), SWIGTYPE_p_player_bbox3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_FiducialProxy_GetFiducialSize(int argc, VALUE *argv, VALUE self) {
  PlayerCc::FiducialProxy *arg1 = (PlayerCc::FiducialProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  player_bbox2d_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__FiducialProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::FiducialProxy const *","GetFiducialSize", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::FiducialProxy * >(argp1);
  {
    try {
      result = ((PlayerCc::FiducialProxy const *)arg1)->GetFiducialSize();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_bbox2d_t(static_cast< const player_bbox2d_t& >(result))), SWIGTYPE_p_player_bbox2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_FiducialProxy_RequestGeometry(int argc, VALUE *argv, VALUE self) {
  PlayerCc::FiducialProxy *arg1 = (PlayerCc::FiducialProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__FiducialProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::FiducialProxy *","RequestGeometry", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::FiducialProxy * >(argp1);
  {
    try {
      (arg1)->RequestGeometry();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


static swig_class SwigClassGpsProxy;

SWIGINTERN VALUE
_wrap_new_GpsProxy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::GpsProxy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","GpsProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","GpsProxy", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::GpsProxy *)new PlayerCc::GpsProxy(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_GpsProxy_allocate(VALUE self)
#else
_wrap_GpsProxy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__GpsProxy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_GpsProxy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::GpsProxy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","GpsProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (PlayerCc::GpsProxy *)new PlayerCc::GpsProxy(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_GpsProxy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GpsProxy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_GpsProxy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "GpsProxy.new", 
    "    GpsProxy.new(PlayerCc::PlayerClient *aPc, uint32_t aIndex)\n"
    "    GpsProxy.new(PlayerCc::PlayerClient *aPc)\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_GpsProxy(void *self) {
    PlayerCc::GpsProxy *arg1 = (PlayerCc::GpsProxy *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_GpsProxy_GetLatitude(int argc, VALUE *argv, VALUE self) {
  PlayerCc::GpsProxy *arg1 = (PlayerCc::GpsProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__GpsProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::GpsProxy const *","GetLatitude", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::GpsProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::GpsProxy const *)arg1)->GetLatitude();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GpsProxy_GetLongitude(int argc, VALUE *argv, VALUE self) {
  PlayerCc::GpsProxy *arg1 = (PlayerCc::GpsProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__GpsProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::GpsProxy const *","GetLongitude", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::GpsProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::GpsProxy const *)arg1)->GetLongitude();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GpsProxy_GetAltitude(int argc, VALUE *argv, VALUE self) {
  PlayerCc::GpsProxy *arg1 = (PlayerCc::GpsProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__GpsProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::GpsProxy const *","GetAltitude", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::GpsProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::GpsProxy const *)arg1)->GetAltitude();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GpsProxy_GetSatellites(int argc, VALUE *argv, VALUE self) {
  PlayerCc::GpsProxy *arg1 = (PlayerCc::GpsProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__GpsProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::GpsProxy const *","GetSatellites", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::GpsProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::GpsProxy const *)arg1)->GetSatellites();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GpsProxy_GetQuality(int argc, VALUE *argv, VALUE self) {
  PlayerCc::GpsProxy *arg1 = (PlayerCc::GpsProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__GpsProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::GpsProxy const *","GetQuality", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::GpsProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::GpsProxy const *)arg1)->GetQuality();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GpsProxy_GetHdop(int argc, VALUE *argv, VALUE self) {
  PlayerCc::GpsProxy *arg1 = (PlayerCc::GpsProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__GpsProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::GpsProxy const *","GetHdop", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::GpsProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::GpsProxy const *)arg1)->GetHdop();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GpsProxy_GetVdop(int argc, VALUE *argv, VALUE self) {
  PlayerCc::GpsProxy *arg1 = (PlayerCc::GpsProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__GpsProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::GpsProxy const *","GetVdop", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::GpsProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::GpsProxy const *)arg1)->GetVdop();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GpsProxy_GetUtmEasting(int argc, VALUE *argv, VALUE self) {
  PlayerCc::GpsProxy *arg1 = (PlayerCc::GpsProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__GpsProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::GpsProxy const *","GetUtmEasting", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::GpsProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::GpsProxy const *)arg1)->GetUtmEasting();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GpsProxy_GetUtmNorthing(int argc, VALUE *argv, VALUE self) {
  PlayerCc::GpsProxy *arg1 = (PlayerCc::GpsProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__GpsProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::GpsProxy const *","GetUtmNorthing", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::GpsProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::GpsProxy const *)arg1)->GetUtmNorthing();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GpsProxy_GetTime(int argc, VALUE *argv, VALUE self) {
  PlayerCc::GpsProxy *arg1 = (PlayerCc::GpsProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__GpsProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::GpsProxy const *","GetTime", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::GpsProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::GpsProxy const *)arg1)->GetTime();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GpsProxy_GetErrHorizontal(int argc, VALUE *argv, VALUE self) {
  PlayerCc::GpsProxy *arg1 = (PlayerCc::GpsProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__GpsProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::GpsProxy const *","GetErrHorizontal", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::GpsProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::GpsProxy const *)arg1)->GetErrHorizontal();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GpsProxy_GetErrVertical(int argc, VALUE *argv, VALUE self) {
  PlayerCc::GpsProxy *arg1 = (PlayerCc::GpsProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__GpsProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::GpsProxy const *","GetErrVertical", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::GpsProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::GpsProxy const *)arg1)->GetErrVertical();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassGraphics2dProxy;

SWIGINTERN VALUE
_wrap_new_Graphics2dProxy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::Graphics2dProxy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","Graphics2dProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","Graphics2dProxy", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::Graphics2dProxy *)new PlayerCc::Graphics2dProxy(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Graphics2dProxy_allocate(VALUE self)
#else
_wrap_Graphics2dProxy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__Graphics2dProxy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_Graphics2dProxy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::Graphics2dProxy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","Graphics2dProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (PlayerCc::Graphics2dProxy *)new PlayerCc::Graphics2dProxy(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Graphics2dProxy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Graphics2dProxy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Graphics2dProxy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "Graphics2dProxy.new", 
    "    Graphics2dProxy.new(PlayerCc::PlayerClient *aPc, uint32_t aIndex)\n"
    "    Graphics2dProxy.new(PlayerCc::PlayerClient *aPc)\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_Graphics2dProxy(void *self) {
    PlayerCc::Graphics2dProxy *arg1 = (PlayerCc::Graphics2dProxy *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_Graphics2dProxy_Color__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Graphics2dProxy *arg1 = (PlayerCc::Graphics2dProxy *) 0 ;
  player_color_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Graphics2dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Graphics2dProxy *","Color", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Graphics2dProxy * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_player_color,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "player_color_t","Color", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "player_color_t","Color", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< player_color_t * >(argp2));
    }
  }
  {
    try {
      (arg1)->Color(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Graphics2dProxy_Color__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Graphics2dProxy *arg1 = (PlayerCc::Graphics2dProxy *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Graphics2dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Graphics2dProxy *","Color", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Graphics2dProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint8_t","Color", 2, argv[0] ));
  } 
  arg2 = static_cast< uint8_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "uint8_t","Color", 3, argv[1] ));
  } 
  arg3 = static_cast< uint8_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "uint8_t","Color", 4, argv[2] ));
  } 
  arg4 = static_cast< uint8_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "uint8_t","Color", 5, argv[3] ));
  } 
  arg5 = static_cast< uint8_t >(val5);
  {
    try {
      (arg1)->Color(arg2,arg3,arg4,arg5);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Graphics2dProxy_Color(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__Graphics2dProxy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_player_color, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Graphics2dProxy_Color__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__Graphics2dProxy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Graphics2dProxy_Color__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "Graphics2dProxy.Color", 
    "    void Graphics2dProxy.Color(player_color_t col)\n"
    "    void Graphics2dProxy.Color(uint8_t red, uint8_t green, uint8_t blue, uint8_t alpha)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Graphics2dProxy_Clear(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Graphics2dProxy *arg1 = (PlayerCc::Graphics2dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Graphics2dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Graphics2dProxy *","Clear", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Graphics2dProxy * >(argp1);
  {
    try {
      (arg1)->Clear();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Graphics2dProxy_DrawPoints(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Graphics2dProxy *arg1 = (PlayerCc::Graphics2dProxy *) 0 ;
  player_point_2d_t *arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Graphics2dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Graphics2dProxy *","DrawPoints", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Graphics2dProxy * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_player_point_2d, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "player_point_2d_t []","DrawPoints", 2, argv[0] )); 
  } 
  arg2 = reinterpret_cast< player_point_2d_t * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","DrawPoints", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->DrawPoints(arg2,arg3);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Graphics2dProxy_DrawPolygon(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Graphics2dProxy *arg1 = (PlayerCc::Graphics2dProxy *) 0 ;
  player_point_2d_t *arg2 ;
  int arg3 ;
  bool arg4 ;
  player_color_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Graphics2dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Graphics2dProxy *","DrawPolygon", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Graphics2dProxy * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_player_point_2d, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "player_point_2d_t []","DrawPolygon", 2, argv[0] )); 
  } 
  arg2 = reinterpret_cast< player_point_2d_t * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","DrawPolygon", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_bool(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "bool","DrawPolygon", 4, argv[2] ));
  } 
  arg4 = static_cast< bool >(val4);
  {
    res5 = SWIG_ConvertPtr(argv[3], &argp5, SWIGTYPE_p_player_color,  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "player_color_t","DrawPolygon", 5, argv[3] )); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "player_color_t","DrawPolygon", 5, argv[3]));
    } else {
      arg5 = *(reinterpret_cast< player_color_t * >(argp5));
    }
  }
  {
    try {
      (arg1)->DrawPolygon(arg2,arg3,arg4,arg5);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Graphics2dProxy_DrawPolyline(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Graphics2dProxy *arg1 = (PlayerCc::Graphics2dProxy *) 0 ;
  player_point_2d_t *arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Graphics2dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Graphics2dProxy *","DrawPolyline", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Graphics2dProxy * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_player_point_2d, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "player_point_2d_t []","DrawPolyline", 2, argv[0] )); 
  } 
  arg2 = reinterpret_cast< player_point_2d_t * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","DrawPolyline", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->DrawPolyline(arg2,arg3);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


static swig_class SwigClassGraphics3dProxy;

SWIGINTERN VALUE
_wrap_new_Graphics3dProxy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::Graphics3dProxy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","Graphics3dProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","Graphics3dProxy", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::Graphics3dProxy *)new PlayerCc::Graphics3dProxy(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Graphics3dProxy_allocate(VALUE self)
#else
_wrap_Graphics3dProxy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__Graphics3dProxy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_Graphics3dProxy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::Graphics3dProxy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","Graphics3dProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (PlayerCc::Graphics3dProxy *)new PlayerCc::Graphics3dProxy(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Graphics3dProxy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Graphics3dProxy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Graphics3dProxy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "Graphics3dProxy.new", 
    "    Graphics3dProxy.new(PlayerCc::PlayerClient *aPc, uint32_t aIndex)\n"
    "    Graphics3dProxy.new(PlayerCc::PlayerClient *aPc)\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_Graphics3dProxy(void *self) {
    PlayerCc::Graphics3dProxy *arg1 = (PlayerCc::Graphics3dProxy *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_Graphics3dProxy_Color__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Graphics3dProxy *arg1 = (PlayerCc::Graphics3dProxy *) 0 ;
  player_color_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Graphics3dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Graphics3dProxy *","Color", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Graphics3dProxy * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_player_color,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "player_color_t","Color", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "player_color_t","Color", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< player_color_t * >(argp2));
    }
  }
  {
    try {
      (arg1)->Color(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Graphics3dProxy_Color__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Graphics3dProxy *arg1 = (PlayerCc::Graphics3dProxy *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Graphics3dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Graphics3dProxy *","Color", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Graphics3dProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint8_t","Color", 2, argv[0] ));
  } 
  arg2 = static_cast< uint8_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "uint8_t","Color", 3, argv[1] ));
  } 
  arg3 = static_cast< uint8_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "uint8_t","Color", 4, argv[2] ));
  } 
  arg4 = static_cast< uint8_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "uint8_t","Color", 5, argv[3] ));
  } 
  arg5 = static_cast< uint8_t >(val5);
  {
    try {
      (arg1)->Color(arg2,arg3,arg4,arg5);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Graphics3dProxy_Color(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__Graphics3dProxy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_player_color, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Graphics3dProxy_Color__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__Graphics3dProxy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Graphics3dProxy_Color__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "Graphics3dProxy.Color", 
    "    void Graphics3dProxy.Color(player_color_t col)\n"
    "    void Graphics3dProxy.Color(uint8_t red, uint8_t green, uint8_t blue, uint8_t alpha)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Graphics3dProxy_Clear(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Graphics3dProxy *arg1 = (PlayerCc::Graphics3dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Graphics3dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Graphics3dProxy *","Clear", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Graphics3dProxy * >(argp1);
  {
    try {
      (arg1)->Clear();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Graphics3dProxy_Draw(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Graphics3dProxy *arg1 = (PlayerCc::Graphics3dProxy *) 0 ;
  player_graphics3d_draw_mode_t arg2 ;
  player_point_3d_t *arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Graphics3dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Graphics3dProxy *","Draw", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Graphics3dProxy * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_player_graphics3d_draw_mode_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "player_graphics3d_draw_mode_t","Draw", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "player_graphics3d_draw_mode_t","Draw", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< player_graphics3d_draw_mode_t * >(argp2));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_player_point_3d, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "player_point_3d_t []","Draw", 3, argv[1] )); 
  } 
  arg3 = reinterpret_cast< player_point_3d_t * >(argp3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","Draw", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      (arg1)->Draw(arg2,arg3,arg4);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


static swig_class SwigClassGripperProxy;

SWIGINTERN VALUE
_wrap_new_GripperProxy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::GripperProxy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","GripperProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","GripperProxy", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::GripperProxy *)new PlayerCc::GripperProxy(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_GripperProxy_allocate(VALUE self)
#else
_wrap_GripperProxy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__GripperProxy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_GripperProxy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::GripperProxy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","GripperProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (PlayerCc::GripperProxy *)new PlayerCc::GripperProxy(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_GripperProxy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GripperProxy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_GripperProxy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "GripperProxy.new", 
    "    GripperProxy.new(PlayerCc::PlayerClient *aPc, uint32_t aIndex)\n"
    "    GripperProxy.new(PlayerCc::PlayerClient *aPc)\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_GripperProxy(void *self) {
    PlayerCc::GripperProxy *arg1 = (PlayerCc::GripperProxy *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_GripperProxy_RequestGeometry(int argc, VALUE *argv, VALUE self) {
  PlayerCc::GripperProxy *arg1 = (PlayerCc::GripperProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__GripperProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::GripperProxy *","RequestGeometry", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::GripperProxy * >(argp1);
  {
    try {
      (arg1)->RequestGeometry();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GripperProxy_GetState(int argc, VALUE *argv, VALUE self) {
  PlayerCc::GripperProxy *arg1 = (PlayerCc::GripperProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__GripperProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::GripperProxy const *","GetState", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::GripperProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::GripperProxy const *)arg1)->GetState();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GripperProxy_GetBeams(int argc, VALUE *argv, VALUE self) {
  PlayerCc::GripperProxy *arg1 = (PlayerCc::GripperProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__GripperProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::GripperProxy const *","GetBeams", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::GripperProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::GripperProxy const *)arg1)->GetBeams();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GripperProxy_GetPose(int argc, VALUE *argv, VALUE self) {
  PlayerCc::GripperProxy *arg1 = (PlayerCc::GripperProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  player_pose3d_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__GripperProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::GripperProxy const *","GetPose", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::GripperProxy * >(argp1);
  {
    try {
      result = ((PlayerCc::GripperProxy const *)arg1)->GetPose();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_pose3d_t(static_cast< const player_pose3d_t& >(result))), SWIGTYPE_p_player_pose3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GripperProxy_GetOuterSize(int argc, VALUE *argv, VALUE self) {
  PlayerCc::GripperProxy *arg1 = (PlayerCc::GripperProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  player_bbox3d_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__GripperProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::GripperProxy const *","GetOuterSize", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::GripperProxy * >(argp1);
  {
    try {
      result = ((PlayerCc::GripperProxy const *)arg1)->GetOuterSize();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_bbox3d_t(static_cast< const player_bbox3d_t& >(result))), SWIGTYPE_p_player_bbox3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GripperProxy_GetInnerSize(int argc, VALUE *argv, VALUE self) {
  PlayerCc::GripperProxy *arg1 = (PlayerCc::GripperProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  player_bbox3d_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__GripperProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::GripperProxy const *","GetInnerSize", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::GripperProxy * >(argp1);
  {
    try {
      result = ((PlayerCc::GripperProxy const *)arg1)->GetInnerSize();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_bbox3d_t(static_cast< const player_bbox3d_t& >(result))), SWIGTYPE_p_player_bbox3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GripperProxy_GetNumBeams(int argc, VALUE *argv, VALUE self) {
  PlayerCc::GripperProxy *arg1 = (PlayerCc::GripperProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__GripperProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::GripperProxy const *","GetNumBeams", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::GripperProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::GripperProxy const *)arg1)->GetNumBeams();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GripperProxy_GetCapacity(int argc, VALUE *argv, VALUE self) {
  PlayerCc::GripperProxy *arg1 = (PlayerCc::GripperProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__GripperProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::GripperProxy const *","GetCapacity", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::GripperProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::GripperProxy const *)arg1)->GetCapacity();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GripperProxy_GetStored(int argc, VALUE *argv, VALUE self) {
  PlayerCc::GripperProxy *arg1 = (PlayerCc::GripperProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__GripperProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::GripperProxy const *","GetStored", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::GripperProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::GripperProxy const *)arg1)->GetStored();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GripperProxy_Open(int argc, VALUE *argv, VALUE self) {
  PlayerCc::GripperProxy *arg1 = (PlayerCc::GripperProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__GripperProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::GripperProxy *","Open", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::GripperProxy * >(argp1);
  {
    try {
      (arg1)->Open();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GripperProxy_Close(int argc, VALUE *argv, VALUE self) {
  PlayerCc::GripperProxy *arg1 = (PlayerCc::GripperProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__GripperProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::GripperProxy *","Close", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::GripperProxy * >(argp1);
  {
    try {
      (arg1)->Close();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GripperProxy_Stop(int argc, VALUE *argv, VALUE self) {
  PlayerCc::GripperProxy *arg1 = (PlayerCc::GripperProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__GripperProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::GripperProxy *","Stop", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::GripperProxy * >(argp1);
  {
    try {
      (arg1)->Stop();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GripperProxy_Store(int argc, VALUE *argv, VALUE self) {
  PlayerCc::GripperProxy *arg1 = (PlayerCc::GripperProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__GripperProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::GripperProxy *","Store", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::GripperProxy * >(argp1);
  {
    try {
      (arg1)->Store();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GripperProxy_Retrieve(int argc, VALUE *argv, VALUE self) {
  PlayerCc::GripperProxy *arg1 = (PlayerCc::GripperProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__GripperProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::GripperProxy *","Retrieve", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::GripperProxy * >(argp1);
  {
    try {
      (arg1)->Retrieve();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


static swig_class SwigClassHealthProxy;

SWIGINTERN VALUE
_wrap_new_HealthProxy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::HealthProxy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","HealthProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","HealthProxy", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::HealthProxy *)new PlayerCc::HealthProxy(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_HealthProxy_allocate(VALUE self)
#else
_wrap_HealthProxy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__HealthProxy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_HealthProxy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::HealthProxy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","HealthProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (PlayerCc::HealthProxy *)new PlayerCc::HealthProxy(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_HealthProxy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_HealthProxy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_HealthProxy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "HealthProxy.new", 
    "    HealthProxy.new(PlayerCc::PlayerClient *aPc, uint32_t aIndex)\n"
    "    HealthProxy.new(PlayerCc::PlayerClient *aPc)\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_HealthProxy(void *self) {
    PlayerCc::HealthProxy *arg1 = (PlayerCc::HealthProxy *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_HealthProxy_GetIdleCPU(int argc, VALUE *argv, VALUE self) {
  PlayerCc::HealthProxy *arg1 = (PlayerCc::HealthProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__HealthProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::HealthProxy *","GetIdleCPU", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::HealthProxy * >(argp1);
  {
    try {
      result = (float)(arg1)->GetIdleCPU();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_HealthProxy_GetSystemCPU(int argc, VALUE *argv, VALUE self) {
  PlayerCc::HealthProxy *arg1 = (PlayerCc::HealthProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__HealthProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::HealthProxy *","GetSystemCPU", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::HealthProxy * >(argp1);
  {
    try {
      result = (float)(arg1)->GetSystemCPU();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_HealthProxy_GetUserCPU(int argc, VALUE *argv, VALUE self) {
  PlayerCc::HealthProxy *arg1 = (PlayerCc::HealthProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__HealthProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::HealthProxy *","GetUserCPU", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::HealthProxy * >(argp1);
  {
    try {
      result = (float)(arg1)->GetUserCPU();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_HealthProxy_GetMemTotal(int argc, VALUE *argv, VALUE self) {
  PlayerCc::HealthProxy *arg1 = (PlayerCc::HealthProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int64_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__HealthProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::HealthProxy *","GetMemTotal", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::HealthProxy * >(argp1);
  {
    try {
      result = (int64_t)(arg1)->GetMemTotal();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_long_SS_long(static_cast< long long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_HealthProxy_GetMemUsed(int argc, VALUE *argv, VALUE self) {
  PlayerCc::HealthProxy *arg1 = (PlayerCc::HealthProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int64_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__HealthProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::HealthProxy *","GetMemUsed", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::HealthProxy * >(argp1);
  {
    try {
      result = (int64_t)(arg1)->GetMemUsed();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_long_SS_long(static_cast< long long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_HealthProxy_GetMemFree(int argc, VALUE *argv, VALUE self) {
  PlayerCc::HealthProxy *arg1 = (PlayerCc::HealthProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int64_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__HealthProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::HealthProxy *","GetMemFree", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::HealthProxy * >(argp1);
  {
    try {
      result = (int64_t)(arg1)->GetMemFree();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_long_SS_long(static_cast< long long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_HealthProxy_GetSwapTotal(int argc, VALUE *argv, VALUE self) {
  PlayerCc::HealthProxy *arg1 = (PlayerCc::HealthProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int64_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__HealthProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::HealthProxy *","GetSwapTotal", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::HealthProxy * >(argp1);
  {
    try {
      result = (int64_t)(arg1)->GetSwapTotal();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_long_SS_long(static_cast< long long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_HealthProxy_GetSwapUsed(int argc, VALUE *argv, VALUE self) {
  PlayerCc::HealthProxy *arg1 = (PlayerCc::HealthProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int64_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__HealthProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::HealthProxy *","GetSwapUsed", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::HealthProxy * >(argp1);
  {
    try {
      result = (int64_t)(arg1)->GetSwapUsed();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_long_SS_long(static_cast< long long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_HealthProxy_GetSwapFree(int argc, VALUE *argv, VALUE self) {
  PlayerCc::HealthProxy *arg1 = (PlayerCc::HealthProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int64_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__HealthProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::HealthProxy *","GetSwapFree", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::HealthProxy * >(argp1);
  {
    try {
      result = (int64_t)(arg1)->GetSwapFree();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_long_SS_long(static_cast< long long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_HealthProxy_GetPercMemUsed(int argc, VALUE *argv, VALUE self) {
  PlayerCc::HealthProxy *arg1 = (PlayerCc::HealthProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__HealthProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::HealthProxy *","GetPercMemUsed", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::HealthProxy * >(argp1);
  {
    try {
      result = (float)(arg1)->GetPercMemUsed();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_HealthProxy_GetPercSwapUsed(int argc, VALUE *argv, VALUE self) {
  PlayerCc::HealthProxy *arg1 = (PlayerCc::HealthProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__HealthProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::HealthProxy *","GetPercSwapUsed", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::HealthProxy * >(argp1);
  {
    try {
      result = (float)(arg1)->GetPercSwapUsed();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_HealthProxy_GetPercTotalUsed(int argc, VALUE *argv, VALUE self) {
  PlayerCc::HealthProxy *arg1 = (PlayerCc::HealthProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__HealthProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::HealthProxy *","GetPercTotalUsed", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::HealthProxy * >(argp1);
  {
    try {
      result = (float)(arg1)->GetPercTotalUsed();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassImuProxy;

SWIGINTERN VALUE
_wrap_new_ImuProxy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::ImuProxy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","ImuProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","ImuProxy", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::ImuProxy *)new PlayerCc::ImuProxy(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_ImuProxy_allocate(VALUE self)
#else
_wrap_ImuProxy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__ImuProxy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_ImuProxy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::ImuProxy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","ImuProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (PlayerCc::ImuProxy *)new PlayerCc::ImuProxy(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_ImuProxy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ImuProxy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ImuProxy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "ImuProxy.new", 
    "    ImuProxy.new(PlayerCc::PlayerClient *aPc, uint32_t aIndex)\n"
    "    ImuProxy.new(PlayerCc::PlayerClient *aPc)\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_ImuProxy(void *self) {
    PlayerCc::ImuProxy *arg1 = (PlayerCc::ImuProxy *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_ImuProxy_GetPose(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ImuProxy *arg1 = (PlayerCc::ImuProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  player_pose3d_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ImuProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ImuProxy const *","GetPose", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ImuProxy * >(argp1);
  {
    try {
      result = ((PlayerCc::ImuProxy const *)arg1)->GetPose();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_pose3d_t(static_cast< const player_pose3d_t& >(result))), SWIGTYPE_p_player_pose3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ImuProxy_GetXAccel(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ImuProxy *arg1 = (PlayerCc::ImuProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ImuProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ImuProxy *","GetXAccel", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ImuProxy * >(argp1);
  {
    try {
      result = (float)(arg1)->GetXAccel();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ImuProxy_GetYAccel(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ImuProxy *arg1 = (PlayerCc::ImuProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ImuProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ImuProxy *","GetYAccel", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ImuProxy * >(argp1);
  {
    try {
      result = (float)(arg1)->GetYAccel();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ImuProxy_GetZAccel(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ImuProxy *arg1 = (PlayerCc::ImuProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ImuProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ImuProxy *","GetZAccel", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ImuProxy * >(argp1);
  {
    try {
      result = (float)(arg1)->GetZAccel();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ImuProxy_GetXGyro(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ImuProxy *arg1 = (PlayerCc::ImuProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ImuProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ImuProxy *","GetXGyro", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ImuProxy * >(argp1);
  {
    try {
      result = (float)(arg1)->GetXGyro();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ImuProxy_GetYGyro(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ImuProxy *arg1 = (PlayerCc::ImuProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ImuProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ImuProxy *","GetYGyro", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ImuProxy * >(argp1);
  {
    try {
      result = (float)(arg1)->GetYGyro();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ImuProxy_GetZGyro(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ImuProxy *arg1 = (PlayerCc::ImuProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ImuProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ImuProxy *","GetZGyro", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ImuProxy * >(argp1);
  {
    try {
      result = (float)(arg1)->GetZGyro();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ImuProxy_GetXMagn(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ImuProxy *arg1 = (PlayerCc::ImuProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ImuProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ImuProxy *","GetXMagn", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ImuProxy * >(argp1);
  {
    try {
      result = (float)(arg1)->GetXMagn();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ImuProxy_GetYMagn(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ImuProxy *arg1 = (PlayerCc::ImuProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ImuProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ImuProxy *","GetYMagn", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ImuProxy * >(argp1);
  {
    try {
      result = (float)(arg1)->GetYMagn();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ImuProxy_GetZMagn(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ImuProxy *arg1 = (PlayerCc::ImuProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ImuProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ImuProxy *","GetZMagn", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ImuProxy * >(argp1);
  {
    try {
      result = (float)(arg1)->GetZMagn();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ImuProxy_GetRawValues(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ImuProxy *arg1 = (PlayerCc::ImuProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  player_imu_data_calib_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ImuProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ImuProxy const *","GetRawValues", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ImuProxy * >(argp1);
  {
    try {
      result = ((PlayerCc::ImuProxy const *)arg1)->GetRawValues();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_imu_data_calib_t(static_cast< const player_imu_data_calib_t& >(result))), SWIGTYPE_p_player_imu_data_calib_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ImuProxy_SetDatatype(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ImuProxy *arg1 = (PlayerCc::ImuProxy *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ImuProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ImuProxy *","SetDatatype", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ImuProxy * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SetDatatype", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->SetDatatype(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ImuProxy_ResetOrientation(int argc, VALUE *argv, VALUE self) {
  PlayerCc::ImuProxy *arg1 = (PlayerCc::ImuProxy *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__ImuProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::ImuProxy *","ResetOrientation", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::ImuProxy * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","ResetOrientation", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->ResetOrientation(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


static swig_class SwigClassIrProxy;

SWIGINTERN VALUE
_wrap_new_IrProxy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::IrProxy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","IrProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","IrProxy", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::IrProxy *)new PlayerCc::IrProxy(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_IrProxy_allocate(VALUE self)
#else
_wrap_IrProxy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__IrProxy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_IrProxy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::IrProxy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","IrProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (PlayerCc::IrProxy *)new PlayerCc::IrProxy(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_IrProxy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IrProxy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_IrProxy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "IrProxy.new", 
    "    IrProxy.new(PlayerCc::PlayerClient *aPc, uint32_t aIndex)\n"
    "    IrProxy.new(PlayerCc::PlayerClient *aPc)\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_IrProxy(void *self) {
    PlayerCc::IrProxy *arg1 = (PlayerCc::IrProxy *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_IrProxy_GetCount(int argc, VALUE *argv, VALUE self) {
  PlayerCc::IrProxy *arg1 = (PlayerCc::IrProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__IrProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::IrProxy const *","GetCount", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::IrProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::IrProxy const *)arg1)->GetCount();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IrProxy_GetRange(int argc, VALUE *argv, VALUE self) {
  PlayerCc::IrProxy *arg1 = (PlayerCc::IrProxy *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__IrProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::IrProxy const *","GetRange", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::IrProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","GetRange", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (double)((PlayerCc::IrProxy const *)arg1)->GetRange(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IrProxy_GetVoltage(int argc, VALUE *argv, VALUE self) {
  PlayerCc::IrProxy *arg1 = (PlayerCc::IrProxy *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__IrProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::IrProxy const *","GetVoltage", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::IrProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","GetVoltage", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (double)((PlayerCc::IrProxy const *)arg1)->GetVoltage(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IrProxy_GetPoseCount(int argc, VALUE *argv, VALUE self) {
  PlayerCc::IrProxy *arg1 = (PlayerCc::IrProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__IrProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::IrProxy const *","GetPoseCount", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::IrProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::IrProxy const *)arg1)->GetPoseCount();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IrProxy_GetPose(int argc, VALUE *argv, VALUE self) {
  PlayerCc::IrProxy *arg1 = (PlayerCc::IrProxy *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  player_pose3d_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__IrProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::IrProxy const *","GetPose", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::IrProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","GetPose", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = ((PlayerCc::IrProxy const *)arg1)->GetPose(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_pose3d_t(static_cast< const player_pose3d_t& >(result))), SWIGTYPE_p_player_pose3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IrProxy_RequestGeom(int argc, VALUE *argv, VALUE self) {
  PlayerCc::IrProxy *arg1 = (PlayerCc::IrProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__IrProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::IrProxy *","RequestGeom", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::IrProxy * >(argp1);
  {
    try {
      (arg1)->RequestGeom();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


static swig_class SwigClassLaserProxy;

SWIGINTERN VALUE
_wrap_new_LaserProxy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::LaserProxy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","LaserProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","LaserProxy", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::LaserProxy *)new PlayerCc::LaserProxy(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_LaserProxy_allocate(VALUE self)
#else
_wrap_LaserProxy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__LaserProxy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_LaserProxy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::LaserProxy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","LaserProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (PlayerCc::LaserProxy *)new PlayerCc::LaserProxy(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_LaserProxy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LaserProxy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_LaserProxy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "LaserProxy.new", 
    "    LaserProxy.new(PlayerCc::PlayerClient *aPc, uint32_t aIndex)\n"
    "    LaserProxy.new(PlayerCc::PlayerClient *aPc)\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_LaserProxy(void *self) {
    PlayerCc::LaserProxy *arg1 = (PlayerCc::LaserProxy *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_LaserProxy_GetCount(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LaserProxy *arg1 = (PlayerCc::LaserProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LaserProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LaserProxy const *","GetCount", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LaserProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::LaserProxy const *)arg1)->GetCount();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LaserProxy_GetMaxRange(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LaserProxy *arg1 = (PlayerCc::LaserProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LaserProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LaserProxy const *","GetMaxRange", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LaserProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::LaserProxy const *)arg1)->GetMaxRange();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LaserProxy_GetScanRes(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LaserProxy *arg1 = (PlayerCc::LaserProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LaserProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LaserProxy const *","GetScanRes", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LaserProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::LaserProxy const *)arg1)->GetScanRes();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LaserProxy_GetRangeRes(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LaserProxy *arg1 = (PlayerCc::LaserProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LaserProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LaserProxy const *","GetRangeRes", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LaserProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::LaserProxy const *)arg1)->GetRangeRes();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LaserProxy_GetScanningFrequency(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LaserProxy *arg1 = (PlayerCc::LaserProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LaserProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LaserProxy const *","GetScanningFrequency", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LaserProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::LaserProxy const *)arg1)->GetScanningFrequency();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LaserProxy_GetMinAngle(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LaserProxy *arg1 = (PlayerCc::LaserProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LaserProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LaserProxy const *","GetMinAngle", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LaserProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::LaserProxy const *)arg1)->GetMinAngle();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LaserProxy_GetMaxAngle(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LaserProxy *arg1 = (PlayerCc::LaserProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LaserProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LaserProxy const *","GetMaxAngle", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LaserProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::LaserProxy const *)arg1)->GetMaxAngle();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LaserProxy_GetConfMinAngle(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LaserProxy *arg1 = (PlayerCc::LaserProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LaserProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LaserProxy const *","GetConfMinAngle", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LaserProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::LaserProxy const *)arg1)->GetConfMinAngle();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LaserProxy_GetConfMaxAngle(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LaserProxy *arg1 = (PlayerCc::LaserProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LaserProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LaserProxy const *","GetConfMaxAngle", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LaserProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::LaserProxy const *)arg1)->GetConfMaxAngle();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LaserProxy_IntensityOn(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LaserProxy *arg1 = (PlayerCc::LaserProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LaserProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LaserProxy const *","IntensityOn", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LaserProxy * >(argp1);
  {
    try {
      result = (bool)((PlayerCc::LaserProxy const *)arg1)->IntensityOn();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LaserProxy_GetPoint(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LaserProxy *arg1 = (PlayerCc::LaserProxy *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  player_point_2d_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LaserProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LaserProxy const *","GetPoint", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LaserProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","GetPoint", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = ((PlayerCc::LaserProxy const *)arg1)->GetPoint(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_point_2d_t(static_cast< const player_point_2d_t& >(result))), SWIGTYPE_p_player_point_2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LaserProxy_GetRange(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LaserProxy *arg1 = (PlayerCc::LaserProxy *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LaserProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LaserProxy const *","GetRange", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LaserProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","GetRange", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (double)((PlayerCc::LaserProxy const *)arg1)->GetRange(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LaserProxy_GetBearing(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LaserProxy *arg1 = (PlayerCc::LaserProxy *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LaserProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LaserProxy const *","GetBearing", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LaserProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","GetBearing", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (double)((PlayerCc::LaserProxy const *)arg1)->GetBearing(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LaserProxy_GetIntensity(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LaserProxy *arg1 = (PlayerCc::LaserProxy *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LaserProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LaserProxy const *","GetIntensity", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LaserProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","GetIntensity", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (int)((PlayerCc::LaserProxy const *)arg1)->GetIntensity(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LaserProxy_GetID(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LaserProxy *arg1 = (PlayerCc::LaserProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LaserProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LaserProxy const *","GetID", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LaserProxy * >(argp1);
  {
    try {
      result = (int)((PlayerCc::LaserProxy const *)arg1)->GetID();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LaserProxy_Configure(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LaserProxy *arg1 = (PlayerCc::LaserProxy *) 0 ;
  double arg2 ;
  double arg3 ;
  uint32_t arg4 ;
  uint32_t arg5 ;
  bool arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LaserProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LaserProxy *","Configure", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LaserProxy * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Configure", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Configure", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "uint32_t","Configure", 4, argv[2] ));
  } 
  arg4 = static_cast< uint32_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "uint32_t","Configure", 5, argv[3] ));
  } 
  arg5 = static_cast< uint32_t >(val5);
  ecode6 = SWIG_AsVal_bool(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "bool","Configure", 6, argv[4] ));
  } 
  arg6 = static_cast< bool >(val6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "double","Configure", 7, argv[5] ));
  } 
  arg7 = static_cast< double >(val7);
  {
    try {
      (arg1)->Configure(arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LaserProxy_RequestConfigure(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LaserProxy *arg1 = (PlayerCc::LaserProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LaserProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LaserProxy *","RequestConfigure", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LaserProxy * >(argp1);
  {
    try {
      (arg1)->RequestConfigure();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LaserProxy_RequestID(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LaserProxy *arg1 = (PlayerCc::LaserProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LaserProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LaserProxy *","RequestID", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LaserProxy * >(argp1);
  {
    try {
      (arg1)->RequestID();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LaserProxy_RequestGeom(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LaserProxy *arg1 = (PlayerCc::LaserProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LaserProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LaserProxy *","RequestGeom", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LaserProxy * >(argp1);
  {
    try {
      (arg1)->RequestGeom();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LaserProxy_GetPose(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LaserProxy *arg1 = (PlayerCc::LaserProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  player_pose3d_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LaserProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LaserProxy *","GetPose", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LaserProxy * >(argp1);
  {
    try {
      result = (arg1)->GetPose();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_pose3d_t(static_cast< const player_pose3d_t& >(result))), SWIGTYPE_p_player_pose3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LaserProxy_GetRobotPose(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LaserProxy *arg1 = (PlayerCc::LaserProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  player_pose3d_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LaserProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LaserProxy *","GetRobotPose", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LaserProxy * >(argp1);
  {
    try {
      result = (arg1)->GetRobotPose();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_pose3d_t(static_cast< const player_pose3d_t& >(result))), SWIGTYPE_p_player_pose3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LaserProxy_GetSize(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LaserProxy *arg1 = (PlayerCc::LaserProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  player_bbox3d_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LaserProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LaserProxy *","GetSize", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LaserProxy * >(argp1);
  {
    try {
      result = (arg1)->GetSize();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_bbox3d_t(static_cast< const player_bbox3d_t& >(result))), SWIGTYPE_p_player_bbox3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LaserProxy_GetMinLeft(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LaserProxy *arg1 = (PlayerCc::LaserProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LaserProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LaserProxy const *","GetMinLeft", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LaserProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::LaserProxy const *)arg1)->GetMinLeft();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LaserProxy_GetMinRight(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LaserProxy *arg1 = (PlayerCc::LaserProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LaserProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LaserProxy const *","GetMinRight", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LaserProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::LaserProxy const *)arg1)->GetMinRight();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LaserProxy_MinLeft(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LaserProxy *arg1 = (PlayerCc::LaserProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LaserProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LaserProxy const *","MinLeft", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LaserProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::LaserProxy const *)arg1)->MinLeft();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LaserProxy_MinRight(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LaserProxy *arg1 = (PlayerCc::LaserProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LaserProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LaserProxy const *","MinRight", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LaserProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::LaserProxy const *)arg1)->MinRight();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassLimbProxy;

SWIGINTERN VALUE
_wrap_new_LimbProxy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::LimbProxy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","LimbProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","LimbProxy", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::LimbProxy *)new PlayerCc::LimbProxy(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_LimbProxy_allocate(VALUE self)
#else
_wrap_LimbProxy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__LimbProxy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_LimbProxy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::LimbProxy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","LimbProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (PlayerCc::LimbProxy *)new PlayerCc::LimbProxy(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_LimbProxy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LimbProxy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_LimbProxy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "LimbProxy.new", 
    "    LimbProxy.new(PlayerCc::PlayerClient *aPc, uint32_t aIndex)\n"
    "    LimbProxy.new(PlayerCc::PlayerClient *aPc)\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_LimbProxy(void *self) {
    PlayerCc::LimbProxy *arg1 = (PlayerCc::LimbProxy *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_LimbProxy_RequestGeometry(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LimbProxy *arg1 = (PlayerCc::LimbProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LimbProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LimbProxy *","RequestGeometry", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LimbProxy * >(argp1);
  {
    try {
      (arg1)->RequestGeometry();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LimbProxy_SetPowerConfig(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LimbProxy *arg1 = (PlayerCc::LimbProxy *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LimbProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LimbProxy *","SetPowerConfig", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LimbProxy * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","SetPowerConfig", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->SetPowerConfig(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LimbProxy_SetBrakesConfig(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LimbProxy *arg1 = (PlayerCc::LimbProxy *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LimbProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LimbProxy *","SetBrakesConfig", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LimbProxy * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","SetBrakesConfig", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->SetBrakesConfig(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LimbProxy_SetSpeedConfig(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LimbProxy *arg1 = (PlayerCc::LimbProxy *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LimbProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LimbProxy *","SetSpeedConfig", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LimbProxy * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","SetSpeedConfig", 2, argv[0] ));
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->SetSpeedConfig(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LimbProxy_MoveHome(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LimbProxy *arg1 = (PlayerCc::LimbProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LimbProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LimbProxy *","MoveHome", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LimbProxy * >(argp1);
  {
    try {
      (arg1)->MoveHome();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LimbProxy_Stop(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LimbProxy *arg1 = (PlayerCc::LimbProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LimbProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LimbProxy *","Stop", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LimbProxy * >(argp1);
  {
    try {
      (arg1)->Stop();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LimbProxy_SetPose(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LimbProxy *arg1 = (PlayerCc::LimbProxy *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  float val10 ;
  int ecode10 = 0 ;
  
  if ((argc < 9) || (argc > 9)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 9)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LimbProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LimbProxy *","SetPose", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LimbProxy * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","SetPose", 2, argv[0] ));
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float","SetPose", 3, argv[1] ));
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "float","SetPose", 4, argv[2] ));
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "float","SetPose", 5, argv[3] ));
  } 
  arg5 = static_cast< float >(val5);
  ecode6 = SWIG_AsVal_float(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "float","SetPose", 6, argv[4] ));
  } 
  arg6 = static_cast< float >(val6);
  ecode7 = SWIG_AsVal_float(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "float","SetPose", 7, argv[5] ));
  } 
  arg7 = static_cast< float >(val7);
  ecode8 = SWIG_AsVal_float(argv[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), Ruby_Format_TypeError( "", "float","SetPose", 8, argv[6] ));
  } 
  arg8 = static_cast< float >(val8);
  ecode9 = SWIG_AsVal_float(argv[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), Ruby_Format_TypeError( "", "float","SetPose", 9, argv[7] ));
  } 
  arg9 = static_cast< float >(val9);
  ecode10 = SWIG_AsVal_float(argv[8], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), Ruby_Format_TypeError( "", "float","SetPose", 10, argv[8] ));
  } 
  arg10 = static_cast< float >(val10);
  {
    try {
      (arg1)->SetPose(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LimbProxy_SetPosition(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LimbProxy *arg1 = (PlayerCc::LimbProxy *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LimbProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LimbProxy *","SetPosition", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LimbProxy * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","SetPosition", 2, argv[0] ));
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float","SetPosition", 3, argv[1] ));
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "float","SetPosition", 4, argv[2] ));
  } 
  arg4 = static_cast< float >(val4);
  {
    try {
      (arg1)->SetPosition(arg2,arg3,arg4);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LimbProxy_VectorMove(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LimbProxy *arg1 = (PlayerCc::LimbProxy *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LimbProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LimbProxy *","VectorMove", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LimbProxy * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","VectorMove", 2, argv[0] ));
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float","VectorMove", 3, argv[1] ));
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "float","VectorMove", 4, argv[2] ));
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "float","VectorMove", 5, argv[3] ));
  } 
  arg5 = static_cast< float >(val5);
  {
    try {
      (arg1)->VectorMove(arg2,arg3,arg4,arg5);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LimbProxy_GetData(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LimbProxy *arg1 = (PlayerCc::LimbProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  player_limb_data_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LimbProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LimbProxy const *","GetData", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LimbProxy * >(argp1);
  {
    try {
      result = ((PlayerCc::LimbProxy const *)arg1)->GetData();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_limb_data_t(static_cast< const player_limb_data_t& >(result))), SWIGTYPE_p_player_limb_data_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LimbProxy_GetGeom(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LimbProxy *arg1 = (PlayerCc::LimbProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  player_limb_geom_req_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LimbProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LimbProxy const *","GetGeom", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LimbProxy * >(argp1);
  {
    try {
      result = ((PlayerCc::LimbProxy const *)arg1)->GetGeom();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_limb_geom_req_t(static_cast< const player_limb_geom_req_t& >(result))), SWIGTYPE_p_player_limb_geom_req_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassLinuxjoystickProxy;

SWIGINTERN VALUE
_wrap_new_LinuxjoystickProxy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::LinuxjoystickProxy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","LinuxjoystickProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","LinuxjoystickProxy", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::LinuxjoystickProxy *)new PlayerCc::LinuxjoystickProxy(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_LinuxjoystickProxy_allocate(VALUE self)
#else
_wrap_LinuxjoystickProxy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__LinuxjoystickProxy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_LinuxjoystickProxy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::LinuxjoystickProxy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","LinuxjoystickProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (PlayerCc::LinuxjoystickProxy *)new PlayerCc::LinuxjoystickProxy(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_LinuxjoystickProxy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LinuxjoystickProxy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_LinuxjoystickProxy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "LinuxjoystickProxy.new", 
    "    LinuxjoystickProxy.new(PlayerCc::PlayerClient *aPc, uint32_t aIndex)\n"
    "    LinuxjoystickProxy.new(PlayerCc::PlayerClient *aPc)\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_LinuxjoystickProxy(void *self) {
    PlayerCc::LinuxjoystickProxy *arg1 = (PlayerCc::LinuxjoystickProxy *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_LinuxjoystickProxy_GetButtons(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LinuxjoystickProxy *arg1 = (PlayerCc::LinuxjoystickProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LinuxjoystickProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LinuxjoystickProxy const *","GetButtons", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LinuxjoystickProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::LinuxjoystickProxy const *)arg1)->GetButtons();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LinuxjoystickProxy_GetAxes(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LinuxjoystickProxy *arg1 = (PlayerCc::LinuxjoystickProxy *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LinuxjoystickProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LinuxjoystickProxy const *","GetAxes", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LinuxjoystickProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","GetAxes", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (double)((PlayerCc::LinuxjoystickProxy const *)arg1)->GetAxes(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LinuxjoystickProxy_GetAxesCount(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LinuxjoystickProxy *arg1 = (PlayerCc::LinuxjoystickProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LinuxjoystickProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LinuxjoystickProxy const *","GetAxesCount", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LinuxjoystickProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::LinuxjoystickProxy const *)arg1)->GetAxesCount();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassLocalizeProxy;

SWIGINTERN VALUE
_wrap_new_LocalizeProxy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::LocalizeProxy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","LocalizeProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","LocalizeProxy", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::LocalizeProxy *)new PlayerCc::LocalizeProxy(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_LocalizeProxy_allocate(VALUE self)
#else
_wrap_LocalizeProxy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__LocalizeProxy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_LocalizeProxy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::LocalizeProxy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","LocalizeProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (PlayerCc::LocalizeProxy *)new PlayerCc::LocalizeProxy(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_LocalizeProxy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LocalizeProxy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_LocalizeProxy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "LocalizeProxy.new", 
    "    LocalizeProxy.new(PlayerCc::PlayerClient *aPc, uint32_t aIndex)\n"
    "    LocalizeProxy.new(PlayerCc::PlayerClient *aPc)\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_LocalizeProxy(void *self) {
    PlayerCc::LocalizeProxy *arg1 = (PlayerCc::LocalizeProxy *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_LocalizeProxy_GetMapSizeX(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LocalizeProxy *arg1 = (PlayerCc::LocalizeProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LocalizeProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LocalizeProxy const *","GetMapSizeX", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LocalizeProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::LocalizeProxy const *)arg1)->GetMapSizeX();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LocalizeProxy_GetMapSizeY(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LocalizeProxy *arg1 = (PlayerCc::LocalizeProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LocalizeProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LocalizeProxy const *","GetMapSizeY", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LocalizeProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::LocalizeProxy const *)arg1)->GetMapSizeY();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LocalizeProxy_GetMapTileX(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LocalizeProxy *arg1 = (PlayerCc::LocalizeProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LocalizeProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LocalizeProxy const *","GetMapTileX", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LocalizeProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::LocalizeProxy const *)arg1)->GetMapTileX();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LocalizeProxy_GetMapTileY(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LocalizeProxy *arg1 = (PlayerCc::LocalizeProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LocalizeProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LocalizeProxy const *","GetMapTileY", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LocalizeProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::LocalizeProxy const *)arg1)->GetMapTileY();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LocalizeProxy_GetMapScale(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LocalizeProxy *arg1 = (PlayerCc::LocalizeProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LocalizeProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LocalizeProxy const *","GetMapScale", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LocalizeProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::LocalizeProxy const *)arg1)->GetMapScale();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LocalizeProxy_GetPendingCount(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LocalizeProxy *arg1 = (PlayerCc::LocalizeProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LocalizeProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LocalizeProxy const *","GetPendingCount", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LocalizeProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::LocalizeProxy const *)arg1)->GetPendingCount();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LocalizeProxy_GetHypothCount(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LocalizeProxy *arg1 = (PlayerCc::LocalizeProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LocalizeProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LocalizeProxy const *","GetHypothCount", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LocalizeProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::LocalizeProxy const *)arg1)->GetHypothCount();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LocalizeProxy_GetHypoth(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LocalizeProxy *arg1 = (PlayerCc::LocalizeProxy *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  player_localize_hypoth_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LocalizeProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LocalizeProxy const *","GetHypoth", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LocalizeProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","GetHypoth", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = ((PlayerCc::LocalizeProxy const *)arg1)->GetHypoth(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_localize_hypoth_t(static_cast< const player_localize_hypoth_t& >(result))), SWIGTYPE_p_player_localize_hypoth_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LocalizeProxy_GetParticles(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LocalizeProxy *arg1 = (PlayerCc::LocalizeProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LocalizeProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LocalizeProxy *","GetParticles", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LocalizeProxy * >(argp1);
  {
    try {
      result = (int)(arg1)->GetParticles();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LocalizeProxy_GetParticlePose(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LocalizeProxy *arg1 = (PlayerCc::LocalizeProxy *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  player_pose2d_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LocalizeProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LocalizeProxy const *","GetParticlePose", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LocalizeProxy * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","GetParticlePose", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((PlayerCc::LocalizeProxy const *)arg1)->GetParticlePose(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_pose2d_t(static_cast< const player_pose2d_t& >(result))), SWIGTYPE_p_player_pose2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LocalizeProxy_SetPose(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LocalizeProxy *arg1 = (PlayerCc::LocalizeProxy *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LocalizeProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LocalizeProxy *","SetPose", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LocalizeProxy * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "double [3]","SetPose", 2, argv[0] )); 
  } 
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "double [3]","SetPose", 3, argv[1] )); 
  } 
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      (arg1)->SetPose(arg2,arg3);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LocalizeProxy_GetNumHypoths(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LocalizeProxy *arg1 = (PlayerCc::LocalizeProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LocalizeProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LocalizeProxy const *","GetNumHypoths", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LocalizeProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::LocalizeProxy const *)arg1)->GetNumHypoths();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LocalizeProxy_GetNumParticles(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LocalizeProxy *arg1 = (PlayerCc::LocalizeProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LocalizeProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LocalizeProxy const *","GetNumParticles", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LocalizeProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::LocalizeProxy const *)arg1)->GetNumParticles();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassLogProxy;

SWIGINTERN VALUE
_wrap_new_LogProxy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::LogProxy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","LogProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","LogProxy", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::LogProxy *)new PlayerCc::LogProxy(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_LogProxy_allocate(VALUE self)
#else
_wrap_LogProxy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__LogProxy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_LogProxy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::LogProxy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","LogProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (PlayerCc::LogProxy *)new PlayerCc::LogProxy(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_LogProxy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LogProxy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_LogProxy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "LogProxy.new", 
    "    LogProxy.new(PlayerCc::PlayerClient *aPc, uint32_t aIndex)\n"
    "    LogProxy.new(PlayerCc::PlayerClient *aPc)\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_LogProxy(void *self) {
    PlayerCc::LogProxy *arg1 = (PlayerCc::LogProxy *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_LogProxy_GetType(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LogProxy *arg1 = (PlayerCc::LogProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LogProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LogProxy const *","GetType", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LogProxy * >(argp1);
  {
    try {
      result = (int)((PlayerCc::LogProxy const *)arg1)->GetType();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LogProxy_GetState(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LogProxy *arg1 = (PlayerCc::LogProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LogProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LogProxy const *","GetState", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LogProxy * >(argp1);
  {
    try {
      result = (int)((PlayerCc::LogProxy const *)arg1)->GetState();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LogProxy_QueryState(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LogProxy *arg1 = (PlayerCc::LogProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LogProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LogProxy *","QueryState", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LogProxy * >(argp1);
  {
    try {
      (arg1)->QueryState();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LogProxy_SetState(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LogProxy *arg1 = (PlayerCc::LogProxy *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LogProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LogProxy *","SetState", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LogProxy * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SetState", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->SetState(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LogProxy_SetWriteState(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LogProxy *arg1 = (PlayerCc::LogProxy *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LogProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LogProxy *","SetWriteState", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LogProxy * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SetWriteState", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->SetWriteState(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LogProxy_SetReadState(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LogProxy *arg1 = (PlayerCc::LogProxy *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LogProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LogProxy *","SetReadState", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LogProxy * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SetReadState", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->SetReadState(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LogProxy_Rewind(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LogProxy *arg1 = (PlayerCc::LogProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LogProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LogProxy *","Rewind", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LogProxy * >(argp1);
  {
    try {
      (arg1)->Rewind();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LogProxy_SetFilename(int argc, VALUE *argv, VALUE self) {
  PlayerCc::LogProxy *arg1 = (PlayerCc::LogProxy *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__LogProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::LogProxy *","SetFilename", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::LogProxy * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "std::string const","SetFilename", 2, argv[0] )); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->SetFilename(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


static swig_class SwigClassMapProxy;

SWIGINTERN VALUE
_wrap_new_MapProxy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::MapProxy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","MapProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","MapProxy", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::MapProxy *)new PlayerCc::MapProxy(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_MapProxy_allocate(VALUE self)
#else
_wrap_MapProxy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__MapProxy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_MapProxy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::MapProxy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","MapProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (PlayerCc::MapProxy *)new PlayerCc::MapProxy(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_MapProxy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MapProxy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_MapProxy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "MapProxy.new", 
    "    MapProxy.new(PlayerCc::PlayerClient *aPc, uint32_t aIndex)\n"
    "    MapProxy.new(PlayerCc::PlayerClient *aPc)\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_MapProxy(void *self) {
    PlayerCc::MapProxy *arg1 = (PlayerCc::MapProxy *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_MapProxy_RequestMap(int argc, VALUE *argv, VALUE self) {
  PlayerCc::MapProxy *arg1 = (PlayerCc::MapProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__MapProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::MapProxy *","RequestMap", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::MapProxy * >(argp1);
  {
    try {
      (arg1)->RequestMap();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MapProxy_GetCellIndex(int argc, VALUE *argv, VALUE self) {
  PlayerCc::MapProxy *arg1 = (PlayerCc::MapProxy *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__MapProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::MapProxy const *","GetCellIndex", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::MapProxy * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","GetCellIndex", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","GetCellIndex", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (int)((PlayerCc::MapProxy const *)arg1)->GetCellIndex(arg2,arg3);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MapProxy_GetCell(int argc, VALUE *argv, VALUE self) {
  PlayerCc::MapProxy *arg1 = (PlayerCc::MapProxy *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int8_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__MapProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::MapProxy const *","GetCell", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::MapProxy * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","GetCell", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","GetCell", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (int8_t)((PlayerCc::MapProxy const *)arg1)->GetCell(arg2,arg3);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_signed_SS_char(static_cast< signed char >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MapProxy_GetResolution(int argc, VALUE *argv, VALUE self) {
  PlayerCc::MapProxy *arg1 = (PlayerCc::MapProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__MapProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::MapProxy const *","GetResolution", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::MapProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::MapProxy const *)arg1)->GetResolution();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MapProxy_GetWidth(int argc, VALUE *argv, VALUE self) {
  PlayerCc::MapProxy *arg1 = (PlayerCc::MapProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__MapProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::MapProxy const *","GetWidth", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::MapProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::MapProxy const *)arg1)->GetWidth();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MapProxy_GetHeight(int argc, VALUE *argv, VALUE self) {
  PlayerCc::MapProxy *arg1 = (PlayerCc::MapProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__MapProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::MapProxy const *","GetHeight", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::MapProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::MapProxy const *)arg1)->GetHeight();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MapProxy_GetOriginX(int argc, VALUE *argv, VALUE self) {
  PlayerCc::MapProxy *arg1 = (PlayerCc::MapProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__MapProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::MapProxy const *","GetOriginX", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::MapProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::MapProxy const *)arg1)->GetOriginX();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MapProxy_GetOriginY(int argc, VALUE *argv, VALUE self) {
  PlayerCc::MapProxy *arg1 = (PlayerCc::MapProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__MapProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::MapProxy const *","GetOriginY", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::MapProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::MapProxy const *)arg1)->GetOriginY();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MapProxy_GetMap(int argc, VALUE *argv, VALUE self) {
  PlayerCc::MapProxy *arg1 = (PlayerCc::MapProxy *) 0 ;
  int8_t *arg2 = (int8_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__MapProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::MapProxy const *","GetMap", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::MapProxy * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_signed_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "int8_t *","GetMap", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< int8_t * >(argp2);
  {
    try {
      ((PlayerCc::MapProxy const *)arg1)->GetMap(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


static swig_class SwigClassOpaqueProxy;

SWIGINTERN VALUE
_wrap_new_OpaqueProxy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::OpaqueProxy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","OpaqueProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","OpaqueProxy", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::OpaqueProxy *)new PlayerCc::OpaqueProxy(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_OpaqueProxy_allocate(VALUE self)
#else
_wrap_OpaqueProxy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__OpaqueProxy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_OpaqueProxy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::OpaqueProxy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","OpaqueProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (PlayerCc::OpaqueProxy *)new PlayerCc::OpaqueProxy(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_OpaqueProxy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_OpaqueProxy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_OpaqueProxy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "OpaqueProxy.new", 
    "    OpaqueProxy.new(PlayerCc::PlayerClient *aPc, uint32_t aIndex)\n"
    "    OpaqueProxy.new(PlayerCc::PlayerClient *aPc)\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_OpaqueProxy(void *self) {
    PlayerCc::OpaqueProxy *arg1 = (PlayerCc::OpaqueProxy *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_OpaqueProxy_GetCount(int argc, VALUE *argv, VALUE self) {
  PlayerCc::OpaqueProxy *arg1 = (PlayerCc::OpaqueProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__OpaqueProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::OpaqueProxy const *","GetCount", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::OpaqueProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::OpaqueProxy const *)arg1)->GetCount();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpaqueProxy_GetData(int argc, VALUE *argv, VALUE self) {
  PlayerCc::OpaqueProxy *arg1 = (PlayerCc::OpaqueProxy *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__OpaqueProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::OpaqueProxy const *","GetData", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::OpaqueProxy * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint8_t *","GetData", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< uint8_t * >(argp2);
  {
    try {
      ((PlayerCc::OpaqueProxy const *)arg1)->GetData(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpaqueProxy_SendCmd(int argc, VALUE *argv, VALUE self) {
  PlayerCc::OpaqueProxy *arg1 = (PlayerCc::OpaqueProxy *) 0 ;
  player_opaque_data_t *arg2 = (player_opaque_data_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__OpaqueProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::OpaqueProxy *","SendCmd", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::OpaqueProxy * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_player_opaque_data_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "player_opaque_data_t *","SendCmd", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< player_opaque_data_t * >(argp2);
  {
    try {
      (arg1)->SendCmd(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpaqueProxy_SendReq(int argc, VALUE *argv, VALUE self) {
  PlayerCc::OpaqueProxy *arg1 = (PlayerCc::OpaqueProxy *) 0 ;
  player_opaque_data_t *arg2 = (player_opaque_data_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__OpaqueProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::OpaqueProxy *","SendReq", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::OpaqueProxy * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_player_opaque_data_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "player_opaque_data_t *","SendReq", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< player_opaque_data_t * >(argp2);
  {
    try {
      result = (int)(arg1)->SendReq(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassPlannerProxy;

SWIGINTERN VALUE
_wrap_new_PlannerProxy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::PlannerProxy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","PlannerProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","PlannerProxy", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::PlannerProxy *)new PlayerCc::PlannerProxy(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_PlannerProxy_allocate(VALUE self)
#else
_wrap_PlannerProxy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__PlannerProxy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_PlannerProxy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::PlannerProxy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","PlannerProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (PlayerCc::PlannerProxy *)new PlayerCc::PlannerProxy(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_PlannerProxy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PlannerProxy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_PlannerProxy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "PlannerProxy.new", 
    "    PlannerProxy.new(PlayerCc::PlayerClient *aPc, uint32_t aIndex)\n"
    "    PlannerProxy.new(PlayerCc::PlayerClient *aPc)\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_PlannerProxy(void *self) {
    PlayerCc::PlannerProxy *arg1 = (PlayerCc::PlannerProxy *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_PlannerProxy_SetGoalPose(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlannerProxy *arg1 = (PlayerCc::PlannerProxy *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlannerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlannerProxy *","SetGoalPose", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlannerProxy * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetGoalPose", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetGoalPose", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","SetGoalPose", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      (arg1)->SetGoalPose(arg2,arg3,arg4);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlannerProxy_RequestWaypoints(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlannerProxy *arg1 = (PlayerCc::PlannerProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlannerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlannerProxy *","RequestWaypoints", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlannerProxy * >(argp1);
  {
    try {
      (arg1)->RequestWaypoints();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlannerProxy_SetEnable(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlannerProxy *arg1 = (PlayerCc::PlannerProxy *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlannerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlannerProxy *","SetEnable", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlannerProxy * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","SetEnable", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->SetEnable(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlannerProxy_GetPathValid(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlannerProxy *arg1 = (PlayerCc::PlannerProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlannerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlannerProxy const *","GetPathValid", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlannerProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::PlannerProxy const *)arg1)->GetPathValid();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlannerProxy_GetPathDone(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlannerProxy *arg1 = (PlayerCc::PlannerProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlannerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlannerProxy const *","GetPathDone", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlannerProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::PlannerProxy const *)arg1)->GetPathDone();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlannerProxy_GetPx(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlannerProxy *arg1 = (PlayerCc::PlannerProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlannerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlannerProxy const *","GetPx", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlannerProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::PlannerProxy const *)arg1)->GetPx();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlannerProxy_GetPy(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlannerProxy *arg1 = (PlayerCc::PlannerProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlannerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlannerProxy const *","GetPy", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlannerProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::PlannerProxy const *)arg1)->GetPy();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlannerProxy_GetPa(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlannerProxy *arg1 = (PlayerCc::PlannerProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlannerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlannerProxy const *","GetPa", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlannerProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::PlannerProxy const *)arg1)->GetPa();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlannerProxy_GetPose(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlannerProxy *arg1 = (PlayerCc::PlannerProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  player_pose2d_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlannerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlannerProxy const *","GetPose", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlannerProxy * >(argp1);
  {
    try {
      result = ((PlayerCc::PlannerProxy const *)arg1)->GetPose();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_pose2d_t(static_cast< const player_pose2d_t& >(result))), SWIGTYPE_p_player_pose2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlannerProxy_GetGx(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlannerProxy *arg1 = (PlayerCc::PlannerProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlannerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlannerProxy const *","GetGx", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlannerProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::PlannerProxy const *)arg1)->GetGx();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlannerProxy_GetGy(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlannerProxy *arg1 = (PlayerCc::PlannerProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlannerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlannerProxy const *","GetGy", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlannerProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::PlannerProxy const *)arg1)->GetGy();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlannerProxy_GetGa(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlannerProxy *arg1 = (PlayerCc::PlannerProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlannerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlannerProxy const *","GetGa", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlannerProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::PlannerProxy const *)arg1)->GetGa();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlannerProxy_GetGoal(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlannerProxy *arg1 = (PlayerCc::PlannerProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  player_pose2d_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlannerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlannerProxy const *","GetGoal", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlannerProxy * >(argp1);
  {
    try {
      result = ((PlayerCc::PlannerProxy const *)arg1)->GetGoal();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_pose2d_t(static_cast< const player_pose2d_t& >(result))), SWIGTYPE_p_player_pose2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlannerProxy_GetWx(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlannerProxy *arg1 = (PlayerCc::PlannerProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlannerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlannerProxy const *","GetWx", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlannerProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::PlannerProxy const *)arg1)->GetWx();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlannerProxy_GetWy(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlannerProxy *arg1 = (PlayerCc::PlannerProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlannerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlannerProxy const *","GetWy", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlannerProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::PlannerProxy const *)arg1)->GetWy();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlannerProxy_GetWa(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlannerProxy *arg1 = (PlayerCc::PlannerProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlannerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlannerProxy const *","GetWa", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlannerProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::PlannerProxy const *)arg1)->GetWa();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlannerProxy_GetCurrentWaypoint(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlannerProxy *arg1 = (PlayerCc::PlannerProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  player_pose2d_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlannerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlannerProxy const *","GetCurrentWaypoint", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlannerProxy * >(argp1);
  {
    try {
      result = ((PlayerCc::PlannerProxy const *)arg1)->GetCurrentWaypoint();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_pose2d_t(static_cast< const player_pose2d_t& >(result))), SWIGTYPE_p_player_pose2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlannerProxy_GetIx(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlannerProxy *arg1 = (PlayerCc::PlannerProxy *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlannerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlannerProxy const *","GetIx", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlannerProxy * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","GetIx", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)((PlayerCc::PlannerProxy const *)arg1)->GetIx(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlannerProxy_GetIy(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlannerProxy *arg1 = (PlayerCc::PlannerProxy *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlannerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlannerProxy const *","GetIy", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlannerProxy * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","GetIy", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)((PlayerCc::PlannerProxy const *)arg1)->GetIy(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlannerProxy_GetIa(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlannerProxy *arg1 = (PlayerCc::PlannerProxy *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlannerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlannerProxy const *","GetIa", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlannerProxy * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","GetIa", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)((PlayerCc::PlannerProxy const *)arg1)->GetIa(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlannerProxy_GetWaypoint(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlannerProxy *arg1 = (PlayerCc::PlannerProxy *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  player_pose2d_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlannerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlannerProxy const *","GetWaypoint", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlannerProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","GetWaypoint", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = ((PlayerCc::PlannerProxy const *)arg1)->GetWaypoint(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_pose2d_t(static_cast< const player_pose2d_t& >(result))), SWIGTYPE_p_player_pose2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlannerProxy_GetCurrentWaypointId(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlannerProxy *arg1 = (PlayerCc::PlannerProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlannerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlannerProxy const *","GetCurrentWaypointId", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlannerProxy * >(argp1);
  {
    try {
      result = (int)((PlayerCc::PlannerProxy const *)arg1)->GetCurrentWaypointId();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlannerProxy_GetWaypointCount(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlannerProxy *arg1 = (PlayerCc::PlannerProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlannerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlannerProxy const *","GetWaypointCount", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlannerProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::PlannerProxy const *)arg1)->GetWaypointCount();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassPointcloud3dProxy;

SWIGINTERN VALUE
_wrap_new_Pointcloud3dProxy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::Pointcloud3dProxy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","Pointcloud3dProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","Pointcloud3dProxy", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::Pointcloud3dProxy *)new PlayerCc::Pointcloud3dProxy(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Pointcloud3dProxy_allocate(VALUE self)
#else
_wrap_Pointcloud3dProxy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__Pointcloud3dProxy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_Pointcloud3dProxy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::Pointcloud3dProxy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","Pointcloud3dProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (PlayerCc::Pointcloud3dProxy *)new PlayerCc::Pointcloud3dProxy(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Pointcloud3dProxy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Pointcloud3dProxy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Pointcloud3dProxy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "Pointcloud3dProxy.new", 
    "    Pointcloud3dProxy.new(PlayerCc::PlayerClient *aPc, uint32_t aIndex)\n"
    "    Pointcloud3dProxy.new(PlayerCc::PlayerClient *aPc)\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_Pointcloud3dProxy(void *self) {
    PlayerCc::Pointcloud3dProxy *arg1 = (PlayerCc::Pointcloud3dProxy *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_Pointcloud3dProxy_GetCount(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Pointcloud3dProxy *arg1 = (PlayerCc::Pointcloud3dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Pointcloud3dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Pointcloud3dProxy const *","GetCount", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Pointcloud3dProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::Pointcloud3dProxy const *)arg1)->GetCount();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Pointcloud3dProxy_GetPoint(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Pointcloud3dProxy *arg1 = (PlayerCc::Pointcloud3dProxy *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  player_pointcloud3d_element_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Pointcloud3dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Pointcloud3dProxy const *","GetPoint", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Pointcloud3dProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","GetPoint", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = ((PlayerCc::Pointcloud3dProxy const *)arg1)->GetPoint(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_pointcloud3d_element_t(static_cast< const player_pointcloud3d_element_t& >(result))), SWIGTYPE_p_player_pointcloud3d_element_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassPosition1dProxy;

SWIGINTERN VALUE
_wrap_new_Position1dProxy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::Position1dProxy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","Position1dProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","Position1dProxy", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::Position1dProxy *)new PlayerCc::Position1dProxy(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Position1dProxy_allocate(VALUE self)
#else
_wrap_Position1dProxy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__Position1dProxy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_Position1dProxy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::Position1dProxy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","Position1dProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (PlayerCc::Position1dProxy *)new PlayerCc::Position1dProxy(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Position1dProxy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Position1dProxy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Position1dProxy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "Position1dProxy.new", 
    "    Position1dProxy.new(PlayerCc::PlayerClient *aPc, uint32_t aIndex)\n"
    "    Position1dProxy.new(PlayerCc::PlayerClient *aPc)\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_Position1dProxy(void *self) {
    PlayerCc::Position1dProxy *arg1 = (PlayerCc::Position1dProxy *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_Position1dProxy_SetSpeed(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position1dProxy *arg1 = (PlayerCc::Position1dProxy *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position1dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position1dProxy *","SetSpeed", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position1dProxy * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetSpeed", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetSpeed(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position1dProxy_GoTo(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position1dProxy *arg1 = (PlayerCc::Position1dProxy *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position1dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position1dProxy *","GoTo", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position1dProxy * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","GoTo", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","GoTo", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->GoTo(arg2,arg3);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position1dProxy_RequestGeom(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position1dProxy *arg1 = (PlayerCc::Position1dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position1dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position1dProxy *","RequestGeom", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position1dProxy * >(argp1);
  {
    try {
      (arg1)->RequestGeom();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position1dProxy_GetPose(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position1dProxy *arg1 = (PlayerCc::Position1dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  player_pose3d_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position1dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position1dProxy const *","GetPose", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position1dProxy * >(argp1);
  {
    try {
      result = ((PlayerCc::Position1dProxy const *)arg1)->GetPose();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_pose3d_t(static_cast< const player_pose3d_t& >(result))), SWIGTYPE_p_player_pose3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position1dProxy_GetSize(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position1dProxy *arg1 = (PlayerCc::Position1dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  player_bbox3d_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position1dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position1dProxy const *","GetSize", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position1dProxy * >(argp1);
  {
    try {
      result = ((PlayerCc::Position1dProxy const *)arg1)->GetSize();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_bbox3d_t(static_cast< const player_bbox3d_t& >(result))), SWIGTYPE_p_player_bbox3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position1dProxy_SetMotorEnable(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position1dProxy *arg1 = (PlayerCc::Position1dProxy *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position1dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position1dProxy *","SetMotorEnable", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position1dProxy * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","SetMotorEnable", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->SetMotorEnable(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position1dProxy_SetOdometry(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position1dProxy *arg1 = (PlayerCc::Position1dProxy *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position1dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position1dProxy *","SetOdometry", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position1dProxy * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetOdometry", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetOdometry(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position1dProxy_ResetOdometry(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position1dProxy *arg1 = (PlayerCc::Position1dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position1dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position1dProxy *","ResetOdometry", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position1dProxy * >(argp1);
  {
    try {
      (arg1)->ResetOdometry();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position1dProxy_GetPos(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position1dProxy *arg1 = (PlayerCc::Position1dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position1dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position1dProxy const *","GetPos", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position1dProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::Position1dProxy const *)arg1)->GetPos();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position1dProxy_GetVel(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position1dProxy *arg1 = (PlayerCc::Position1dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position1dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position1dProxy const *","GetVel", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position1dProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::Position1dProxy const *)arg1)->GetVel();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position1dProxy_GetStall(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position1dProxy *arg1 = (PlayerCc::Position1dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position1dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position1dProxy const *","GetStall", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position1dProxy * >(argp1);
  {
    try {
      result = (bool)((PlayerCc::Position1dProxy const *)arg1)->GetStall();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position1dProxy_GetStatus(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position1dProxy *arg1 = (PlayerCc::Position1dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position1dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position1dProxy const *","GetStatus", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position1dProxy * >(argp1);
  {
    try {
      result = (uint8_t)((PlayerCc::Position1dProxy const *)arg1)->GetStatus();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position1dProxy_IsLimitMin(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position1dProxy *arg1 = (PlayerCc::Position1dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position1dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position1dProxy const *","IsLimitMin", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position1dProxy * >(argp1);
  {
    try {
      result = (bool)((PlayerCc::Position1dProxy const *)arg1)->IsLimitMin();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position1dProxy_IsLimitCen(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position1dProxy *arg1 = (PlayerCc::Position1dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position1dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position1dProxy const *","IsLimitCen", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position1dProxy * >(argp1);
  {
    try {
      result = (bool)((PlayerCc::Position1dProxy const *)arg1)->IsLimitCen();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position1dProxy_IsLimitMax(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position1dProxy *arg1 = (PlayerCc::Position1dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position1dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position1dProxy const *","IsLimitMax", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position1dProxy * >(argp1);
  {
    try {
      result = (bool)((PlayerCc::Position1dProxy const *)arg1)->IsLimitMax();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position1dProxy_IsOverCurrent(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position1dProxy *arg1 = (PlayerCc::Position1dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position1dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position1dProxy const *","IsOverCurrent", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position1dProxy * >(argp1);
  {
    try {
      result = (bool)((PlayerCc::Position1dProxy const *)arg1)->IsOverCurrent();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position1dProxy_IsTrajComplete(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position1dProxy *arg1 = (PlayerCc::Position1dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position1dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position1dProxy const *","IsTrajComplete", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position1dProxy * >(argp1);
  {
    try {
      result = (bool)((PlayerCc::Position1dProxy const *)arg1)->IsTrajComplete();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position1dProxy_IsEnabled(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position1dProxy *arg1 = (PlayerCc::Position1dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position1dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position1dProxy const *","IsEnabled", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position1dProxy * >(argp1);
  {
    try {
      result = (bool)((PlayerCc::Position1dProxy const *)arg1)->IsEnabled();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassPosition2dProxy;

SWIGINTERN VALUE
_wrap_new_Position2dProxy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::Position2dProxy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","Position2dProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","Position2dProxy", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::Position2dProxy *)new PlayerCc::Position2dProxy(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Position2dProxy_allocate(VALUE self)
#else
_wrap_Position2dProxy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__Position2dProxy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_Position2dProxy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::Position2dProxy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","Position2dProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (PlayerCc::Position2dProxy *)new PlayerCc::Position2dProxy(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Position2dProxy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Position2dProxy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Position2dProxy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "Position2dProxy.new", 
    "    Position2dProxy.new(PlayerCc::PlayerClient *aPc, uint32_t aIndex)\n"
    "    Position2dProxy.new(PlayerCc::PlayerClient *aPc)\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_Position2dProxy(void *self) {
    PlayerCc::Position2dProxy *arg1 = (PlayerCc::Position2dProxy *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_Position2dProxy_SetSpeed__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position2dProxy *arg1 = (PlayerCc::Position2dProxy *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position2dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position2dProxy *","SetSpeed", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position2dProxy * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetSpeed", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetSpeed", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","SetSpeed", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      (arg1)->SetSpeed(arg2,arg3,arg4);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position2dProxy_SetSpeed__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position2dProxy *arg1 = (PlayerCc::Position2dProxy *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position2dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position2dProxy *","SetSpeed", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position2dProxy * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetSpeed", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetSpeed", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->SetSpeed(arg2,arg3);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position2dProxy_SetSpeed__SWIG_2(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position2dProxy *arg1 = (PlayerCc::Position2dProxy *) 0 ;
  player_pose2d_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position2dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position2dProxy *","SetSpeed", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position2dProxy * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_player_pose2d,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "player_pose2d_t","SetSpeed", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "player_pose2d_t","SetSpeed", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< player_pose2d_t * >(argp2));
    }
  }
  {
    try {
      (arg1)->SetSpeed(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Position2dProxy_SetSpeed(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__Position2dProxy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_player_pose2d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Position2dProxy_SetSpeed__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__Position2dProxy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Position2dProxy_SetSpeed__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__Position2dProxy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Position2dProxy_SetSpeed__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "Position2dProxy.SetSpeed", 
    "    void Position2dProxy.SetSpeed(double aXSpeed, double aYSpeed, double aYawSpeed)\n"
    "    void Position2dProxy.SetSpeed(double aXSpeed, double aYawSpeed)\n"
    "    void Position2dProxy.SetSpeed(player_pose2d_t vel)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position2dProxy_SetVelHead__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position2dProxy *arg1 = (PlayerCc::Position2dProxy *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position2dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position2dProxy *","SetVelHead", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position2dProxy * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetVelHead", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetVelHead", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","SetVelHead", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      (arg1)->SetVelHead(arg2,arg3,arg4);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position2dProxy_SetVelHead__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position2dProxy *arg1 = (PlayerCc::Position2dProxy *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position2dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position2dProxy *","SetVelHead", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position2dProxy * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetVelHead", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetVelHead", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->SetVelHead(arg2,arg3);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Position2dProxy_SetVelHead(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__Position2dProxy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Position2dProxy_SetVelHead__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__Position2dProxy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Position2dProxy_SetVelHead__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "Position2dProxy.SetVelHead", 
    "    void Position2dProxy.SetVelHead(double aXSpeed, double aYSpeed, double aYawHead)\n"
    "    void Position2dProxy.SetVelHead(double aXSpeed, double aYawHead)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position2dProxy_GoTo__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position2dProxy *arg1 = (PlayerCc::Position2dProxy *) 0 ;
  player_pose2d_t arg2 ;
  player_pose2d_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position2dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position2dProxy *","GoTo", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position2dProxy * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_player_pose2d,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "player_pose2d_t","GoTo", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "player_pose2d_t","GoTo", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< player_pose2d_t * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_player_pose2d,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "player_pose2d_t","GoTo", 3, argv[1] )); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "player_pose2d_t","GoTo", 3, argv[1]));
    } else {
      arg3 = *(reinterpret_cast< player_pose2d_t * >(argp3));
    }
  }
  {
    try {
      (arg1)->GoTo(arg2,arg3);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position2dProxy_GoTo__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position2dProxy *arg1 = (PlayerCc::Position2dProxy *) 0 ;
  player_pose2d_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position2dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position2dProxy *","GoTo", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position2dProxy * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_player_pose2d,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "player_pose2d_t","GoTo", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "player_pose2d_t","GoTo", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< player_pose2d_t * >(argp2));
    }
  }
  {
    try {
      (arg1)->GoTo(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position2dProxy_GoTo__SWIG_2(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position2dProxy *arg1 = (PlayerCc::Position2dProxy *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position2dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position2dProxy *","GoTo", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position2dProxy * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","GoTo", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","GoTo", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","GoTo", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      (arg1)->GoTo(arg2,arg3,arg4);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Position2dProxy_GoTo(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__Position2dProxy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_player_pose2d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Position2dProxy_GoTo__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__Position2dProxy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_player_pose2d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_player_pose2d, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Position2dProxy_GoTo__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__Position2dProxy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Position2dProxy_GoTo__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "Position2dProxy.GoTo", 
    "    void Position2dProxy.GoTo(player_pose2d_t pos, player_pose2d_t vel)\n"
    "    void Position2dProxy.GoTo(player_pose2d_t pos)\n"
    "    void Position2dProxy.GoTo(double aX, double aY, double aYaw)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position2dProxy_SetCarlike(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position2dProxy *arg1 = (PlayerCc::Position2dProxy *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position2dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position2dProxy *","SetCarlike", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position2dProxy * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetCarlike", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetCarlike", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->SetCarlike(arg2,arg3);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position2dProxy_RequestGeom(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position2dProxy *arg1 = (PlayerCc::Position2dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position2dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position2dProxy *","RequestGeom", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position2dProxy * >(argp1);
  {
    try {
      (arg1)->RequestGeom();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position2dProxy_GetOffset(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position2dProxy *arg1 = (PlayerCc::Position2dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  player_pose3d_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position2dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position2dProxy *","GetOffset", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position2dProxy * >(argp1);
  {
    try {
      result = (arg1)->GetOffset();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_pose3d_t(static_cast< const player_pose3d_t& >(result))), SWIGTYPE_p_player_pose3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position2dProxy_GetSize(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position2dProxy *arg1 = (PlayerCc::Position2dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  player_bbox3d_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position2dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position2dProxy *","GetSize", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position2dProxy * >(argp1);
  {
    try {
      result = (arg1)->GetSize();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_bbox3d_t(static_cast< const player_bbox3d_t& >(result))), SWIGTYPE_p_player_bbox3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position2dProxy_SetMotorEnable(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position2dProxy *arg1 = (PlayerCc::Position2dProxy *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position2dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position2dProxy *","SetMotorEnable", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position2dProxy * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","SetMotorEnable", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->SetMotorEnable(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position2dProxy_ResetOdometry(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position2dProxy *arg1 = (PlayerCc::Position2dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position2dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position2dProxy *","ResetOdometry", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position2dProxy * >(argp1);
  {
    try {
      (arg1)->ResetOdometry();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position2dProxy_SetOdometry(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position2dProxy *arg1 = (PlayerCc::Position2dProxy *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position2dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position2dProxy *","SetOdometry", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position2dProxy * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetOdometry", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetOdometry", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","SetOdometry", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      (arg1)->SetOdometry(arg2,arg3,arg4);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position2dProxy_GetXPos(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position2dProxy *arg1 = (PlayerCc::Position2dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position2dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position2dProxy const *","GetXPos", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position2dProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::Position2dProxy const *)arg1)->GetXPos();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position2dProxy_GetYPos(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position2dProxy *arg1 = (PlayerCc::Position2dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position2dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position2dProxy const *","GetYPos", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position2dProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::Position2dProxy const *)arg1)->GetYPos();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position2dProxy_GetYaw(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position2dProxy *arg1 = (PlayerCc::Position2dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position2dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position2dProxy const *","GetYaw", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position2dProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::Position2dProxy const *)arg1)->GetYaw();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position2dProxy_GetXSpeed(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position2dProxy *arg1 = (PlayerCc::Position2dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position2dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position2dProxy const *","GetXSpeed", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position2dProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::Position2dProxy const *)arg1)->GetXSpeed();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position2dProxy_GetYSpeed(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position2dProxy *arg1 = (PlayerCc::Position2dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position2dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position2dProxy const *","GetYSpeed", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position2dProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::Position2dProxy const *)arg1)->GetYSpeed();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position2dProxy_GetYawSpeed(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position2dProxy *arg1 = (PlayerCc::Position2dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position2dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position2dProxy const *","GetYawSpeed", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position2dProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::Position2dProxy const *)arg1)->GetYawSpeed();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position2dProxy_GetStall(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position2dProxy *arg1 = (PlayerCc::Position2dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position2dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position2dProxy const *","GetStall", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position2dProxy * >(argp1);
  {
    try {
      result = (bool)((PlayerCc::Position2dProxy const *)arg1)->GetStall();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassPosition3dProxy;

SWIGINTERN VALUE
_wrap_new_Position3dProxy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::Position3dProxy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","Position3dProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","Position3dProxy", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::Position3dProxy *)new PlayerCc::Position3dProxy(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Position3dProxy_allocate(VALUE self)
#else
_wrap_Position3dProxy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__Position3dProxy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_Position3dProxy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::Position3dProxy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","Position3dProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (PlayerCc::Position3dProxy *)new PlayerCc::Position3dProxy(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Position3dProxy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Position3dProxy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Position3dProxy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "Position3dProxy.new", 
    "    Position3dProxy.new(PlayerCc::PlayerClient *aPc, uint32_t aIndex)\n"
    "    Position3dProxy.new(PlayerCc::PlayerClient *aPc)\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_Position3dProxy(void *self) {
    PlayerCc::Position3dProxy *arg1 = (PlayerCc::Position3dProxy *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_Position3dProxy_SetSpeed__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position3dProxy *arg1 = (PlayerCc::Position3dProxy *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position3dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position3dProxy *","SetSpeed", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position3dProxy * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetSpeed", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetSpeed", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","SetSpeed", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","SetSpeed", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","SetSpeed", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "double","SetSpeed", 7, argv[5] ));
  } 
  arg7 = static_cast< double >(val7);
  {
    try {
      (arg1)->SetSpeed(arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position3dProxy_SetSpeed__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position3dProxy *arg1 = (PlayerCc::Position3dProxy *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position3dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position3dProxy *","SetSpeed", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position3dProxy * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetSpeed", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetSpeed", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","SetSpeed", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","SetSpeed", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      (arg1)->SetSpeed(arg2,arg3,arg4,arg5);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position3dProxy_SetSpeed__SWIG_2(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position3dProxy *arg1 = (PlayerCc::Position3dProxy *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position3dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position3dProxy *","SetSpeed", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position3dProxy * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetSpeed", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetSpeed", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","SetSpeed", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      (arg1)->SetSpeed(arg2,arg3,arg4);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position3dProxy_SetSpeed__SWIG_3(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position3dProxy *arg1 = (PlayerCc::Position3dProxy *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position3dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position3dProxy *","SetSpeed", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position3dProxy * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetSpeed", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetSpeed", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->SetSpeed(arg2,arg3);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position3dProxy_SetSpeed__SWIG_4(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position3dProxy *arg1 = (PlayerCc::Position3dProxy *) 0 ;
  player_pose3d_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position3dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position3dProxy *","SetSpeed", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position3dProxy * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_player_pose3d,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "player_pose3d_t","SetSpeed", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "player_pose3d_t","SetSpeed", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< player_pose3d_t * >(argp2));
    }
  }
  {
    try {
      (arg1)->SetSpeed(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Position3dProxy_SetSpeed(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[8];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 8) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__Position3dProxy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_player_pose3d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Position3dProxy_SetSpeed__SWIG_4(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__Position3dProxy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Position3dProxy_SetSpeed__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__Position3dProxy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Position3dProxy_SetSpeed__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__Position3dProxy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Position3dProxy_SetSpeed__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__Position3dProxy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_Position3dProxy_SetSpeed__SWIG_0(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 8, "Position3dProxy.SetSpeed", 
    "    void Position3dProxy.SetSpeed(double aXSpeed, double aYSpeed, double aZSpeed, double aRollSpeed, double aPitchSpeed, double aYawSpeed)\n"
    "    void Position3dProxy.SetSpeed(double aXSpeed, double aYSpeed, double aZSpeed, double aYawSpeed)\n"
    "    void Position3dProxy.SetSpeed(double aXSpeed, double aYSpeed, double aYawSpeed)\n"
    "    void Position3dProxy.SetSpeed(double aXSpeed, double aYawSpeed)\n"
    "    void Position3dProxy.SetSpeed(player_pose3d_t vel)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position3dProxy_GoTo__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position3dProxy *arg1 = (PlayerCc::Position3dProxy *) 0 ;
  player_pose3d_t arg2 ;
  player_pose3d_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position3dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position3dProxy *","GoTo", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position3dProxy * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_player_pose3d,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "player_pose3d_t","GoTo", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "player_pose3d_t","GoTo", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< player_pose3d_t * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_player_pose3d,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "player_pose3d_t","GoTo", 3, argv[1] )); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "player_pose3d_t","GoTo", 3, argv[1]));
    } else {
      arg3 = *(reinterpret_cast< player_pose3d_t * >(argp3));
    }
  }
  {
    try {
      (arg1)->GoTo(arg2,arg3);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position3dProxy_GoTo__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position3dProxy *arg1 = (PlayerCc::Position3dProxy *) 0 ;
  player_pose3d_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position3dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position3dProxy *","GoTo", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position3dProxy * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_player_pose3d,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "player_pose3d_t","GoTo", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "player_pose3d_t","GoTo", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< player_pose3d_t * >(argp2));
    }
  }
  {
    try {
      (arg1)->GoTo(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position3dProxy_GoTo__SWIG_2(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position3dProxy *arg1 = (PlayerCc::Position3dProxy *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position3dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position3dProxy *","GoTo", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position3dProxy * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","GoTo", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","GoTo", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","GoTo", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","GoTo", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","GoTo", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "double","GoTo", 7, argv[5] ));
  } 
  arg7 = static_cast< double >(val7);
  {
    try {
      (arg1)->GoTo(arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Position3dProxy_GoTo(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[8];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 8) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__Position3dProxy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_player_pose3d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Position3dProxy_GoTo__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__Position3dProxy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_player_pose3d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_player_pose3d, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Position3dProxy_GoTo__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__Position3dProxy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_Position3dProxy_GoTo__SWIG_2(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 8, "Position3dProxy.GoTo", 
    "    void Position3dProxy.GoTo(player_pose3d_t aPos, player_pose3d_t aVel)\n"
    "    void Position3dProxy.GoTo(player_pose3d_t aPos)\n"
    "    void Position3dProxy.GoTo(double aX, double aY, double aZ, double aRoll, double aPitch, double aYaw)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position3dProxy_SetMotorEnable(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position3dProxy *arg1 = (PlayerCc::Position3dProxy *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position3dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position3dProxy *","SetMotorEnable", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position3dProxy * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","SetMotorEnable", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->SetMotorEnable(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position3dProxy_SelectVelocityControl(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position3dProxy *arg1 = (PlayerCc::Position3dProxy *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position3dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position3dProxy *","SelectVelocityControl", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position3dProxy * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SelectVelocityControl", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->SelectVelocityControl(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position3dProxy_ResetOdometry(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position3dProxy *arg1 = (PlayerCc::Position3dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position3dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position3dProxy *","ResetOdometry", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position3dProxy * >(argp1);
  {
    try {
      (arg1)->ResetOdometry();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position3dProxy_SetOdometry(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position3dProxy *arg1 = (PlayerCc::Position3dProxy *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position3dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position3dProxy *","SetOdometry", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position3dProxy * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetOdometry", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetOdometry", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","SetOdometry", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","SetOdometry", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","SetOdometry", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "double","SetOdometry", 7, argv[5] ));
  } 
  arg7 = static_cast< double >(val7);
  {
    try {
      (arg1)->SetOdometry(arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position3dProxy_RequestGeom(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position3dProxy *arg1 = (PlayerCc::Position3dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position3dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position3dProxy *","RequestGeom", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position3dProxy * >(argp1);
  {
    try {
      (arg1)->RequestGeom();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position3dProxy_GetXPos(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position3dProxy *arg1 = (PlayerCc::Position3dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position3dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position3dProxy const *","GetXPos", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position3dProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::Position3dProxy const *)arg1)->GetXPos();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position3dProxy_GetYPos(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position3dProxy *arg1 = (PlayerCc::Position3dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position3dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position3dProxy const *","GetYPos", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position3dProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::Position3dProxy const *)arg1)->GetYPos();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position3dProxy_GetZPos(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position3dProxy *arg1 = (PlayerCc::Position3dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position3dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position3dProxy const *","GetZPos", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position3dProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::Position3dProxy const *)arg1)->GetZPos();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position3dProxy_GetRoll(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position3dProxy *arg1 = (PlayerCc::Position3dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position3dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position3dProxy const *","GetRoll", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position3dProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::Position3dProxy const *)arg1)->GetRoll();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position3dProxy_GetPitch(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position3dProxy *arg1 = (PlayerCc::Position3dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position3dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position3dProxy const *","GetPitch", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position3dProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::Position3dProxy const *)arg1)->GetPitch();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position3dProxy_GetYaw(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position3dProxy *arg1 = (PlayerCc::Position3dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position3dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position3dProxy const *","GetYaw", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position3dProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::Position3dProxy const *)arg1)->GetYaw();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position3dProxy_GetXSpeed(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position3dProxy *arg1 = (PlayerCc::Position3dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position3dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position3dProxy const *","GetXSpeed", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position3dProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::Position3dProxy const *)arg1)->GetXSpeed();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position3dProxy_GetYSpeed(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position3dProxy *arg1 = (PlayerCc::Position3dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position3dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position3dProxy const *","GetYSpeed", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position3dProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::Position3dProxy const *)arg1)->GetYSpeed();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position3dProxy_GetZSpeed(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position3dProxy *arg1 = (PlayerCc::Position3dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position3dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position3dProxy const *","GetZSpeed", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position3dProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::Position3dProxy const *)arg1)->GetZSpeed();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position3dProxy_GetRollSpeed(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position3dProxy *arg1 = (PlayerCc::Position3dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position3dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position3dProxy const *","GetRollSpeed", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position3dProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::Position3dProxy const *)arg1)->GetRollSpeed();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position3dProxy_GetPitchSpeed(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position3dProxy *arg1 = (PlayerCc::Position3dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position3dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position3dProxy const *","GetPitchSpeed", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position3dProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::Position3dProxy const *)arg1)->GetPitchSpeed();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position3dProxy_GetYawSpeed(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position3dProxy *arg1 = (PlayerCc::Position3dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position3dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position3dProxy const *","GetYawSpeed", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position3dProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::Position3dProxy const *)arg1)->GetYawSpeed();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Position3dProxy_GetStall(int argc, VALUE *argv, VALUE self) {
  PlayerCc::Position3dProxy *arg1 = (PlayerCc::Position3dProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__Position3dProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::Position3dProxy const *","GetStall", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::Position3dProxy * >(argp1);
  {
    try {
      result = (bool)((PlayerCc::Position3dProxy const *)arg1)->GetStall();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassPowerProxy;

SWIGINTERN VALUE
_wrap_new_PowerProxy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::PowerProxy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","PowerProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","PowerProxy", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::PowerProxy *)new PlayerCc::PowerProxy(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_PowerProxy_allocate(VALUE self)
#else
_wrap_PowerProxy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__PowerProxy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_PowerProxy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::PowerProxy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","PowerProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (PlayerCc::PowerProxy *)new PlayerCc::PowerProxy(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_PowerProxy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PowerProxy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_PowerProxy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "PowerProxy.new", 
    "    PowerProxy.new(PlayerCc::PlayerClient *aPc, uint32_t aIndex)\n"
    "    PowerProxy.new(PlayerCc::PlayerClient *aPc)\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_PowerProxy(void *self) {
    PlayerCc::PowerProxy *arg1 = (PlayerCc::PowerProxy *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_PowerProxy_GetCharge(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PowerProxy *arg1 = (PlayerCc::PowerProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PowerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PowerProxy const *","GetCharge", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PowerProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::PowerProxy const *)arg1)->GetCharge();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PowerProxy_GetPercent(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PowerProxy *arg1 = (PlayerCc::PowerProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PowerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PowerProxy const *","GetPercent", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PowerProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::PowerProxy const *)arg1)->GetPercent();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PowerProxy_GetJoules(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PowerProxy *arg1 = (PlayerCc::PowerProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PowerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PowerProxy const *","GetJoules", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PowerProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::PowerProxy const *)arg1)->GetJoules();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PowerProxy_GetWatts(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PowerProxy *arg1 = (PlayerCc::PowerProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PowerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PowerProxy const *","GetWatts", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PowerProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::PowerProxy const *)arg1)->GetWatts();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PowerProxy_GetCharging(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PowerProxy *arg1 = (PlayerCc::PowerProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PowerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PowerProxy const *","GetCharging", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PowerProxy * >(argp1);
  {
    try {
      result = (bool)((PlayerCc::PowerProxy const *)arg1)->GetCharging();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PowerProxy_IsValid(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PowerProxy *arg1 = (PlayerCc::PowerProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PowerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PowerProxy const *","IsValid", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PowerProxy * >(argp1);
  {
    try {
      result = (bool)((PlayerCc::PowerProxy const *)arg1)->IsValid();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassPtzProxy;

SWIGINTERN VALUE
_wrap_new_PtzProxy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::PtzProxy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","PtzProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","PtzProxy", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::PtzProxy *)new PlayerCc::PtzProxy(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_PtzProxy_allocate(VALUE self)
#else
_wrap_PtzProxy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__PtzProxy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_PtzProxy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::PtzProxy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","PtzProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (PlayerCc::PtzProxy *)new PlayerCc::PtzProxy(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_PtzProxy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PtzProxy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_PtzProxy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "PtzProxy.new", 
    "    PtzProxy.new(PlayerCc::PlayerClient *aPc, uint32_t aIndex)\n"
    "    PtzProxy.new(PlayerCc::PlayerClient *aPc)\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_PtzProxy(void *self) {
    PlayerCc::PtzProxy *arg1 = (PlayerCc::PtzProxy *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_PtzProxy_SetCam(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PtzProxy *arg1 = (PlayerCc::PtzProxy *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PtzProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PtzProxy *","SetCam", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PtzProxy * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetCam", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetCam", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","SetCam", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      (arg1)->SetCam(arg2,arg3,arg4);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PtzProxy_SetSpeed__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PtzProxy *arg1 = (PlayerCc::PtzProxy *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PtzProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PtzProxy *","SetSpeed", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PtzProxy * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetSpeed", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetSpeed", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","SetSpeed", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      (arg1)->SetSpeed(arg2,arg3,arg4);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PtzProxy_SetSpeed__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PtzProxy *arg1 = (PlayerCc::PtzProxy *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PtzProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PtzProxy *","SetSpeed", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PtzProxy * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetSpeed", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetSpeed", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->SetSpeed(arg2,arg3);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PtzProxy_SetSpeed__SWIG_2(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PtzProxy *arg1 = (PlayerCc::PtzProxy *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PtzProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PtzProxy *","SetSpeed", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PtzProxy * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","SetSpeed", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetSpeed(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PtzProxy_SetSpeed__SWIG_3(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PtzProxy *arg1 = (PlayerCc::PtzProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PtzProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PtzProxy *","SetSpeed", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PtzProxy * >(argp1);
  {
    try {
      (arg1)->SetSpeed();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_PtzProxy_SetSpeed(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PtzProxy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_PtzProxy_SetSpeed__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PtzProxy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PtzProxy_SetSpeed__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PtzProxy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_PtzProxy_SetSpeed__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PtzProxy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_PtzProxy_SetSpeed__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "PtzProxy.SetSpeed", 
    "    void PtzProxy.SetSpeed(double aPanSpeed, double aTiltSpeed, double aZoomSpeed)\n"
    "    void PtzProxy.SetSpeed(double aPanSpeed, double aTiltSpeed)\n"
    "    void PtzProxy.SetSpeed(double aPanSpeed)\n"
    "    void PtzProxy.SetSpeed()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PtzProxy_SelectControlMode(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PtzProxy *arg1 = (PlayerCc::PtzProxy *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PtzProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PtzProxy *","SelectControlMode", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PtzProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","SelectControlMode", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      (arg1)->SelectControlMode(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PtzProxy_GetPan(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PtzProxy *arg1 = (PlayerCc::PtzProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PtzProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PtzProxy const *","GetPan", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PtzProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::PtzProxy const *)arg1)->GetPan();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PtzProxy_GetTilt(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PtzProxy *arg1 = (PlayerCc::PtzProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PtzProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PtzProxy const *","GetTilt", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PtzProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::PtzProxy const *)arg1)->GetTilt();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PtzProxy_GetZoom(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PtzProxy *arg1 = (PlayerCc::PtzProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PtzProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PtzProxy const *","GetZoom", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PtzProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::PtzProxy const *)arg1)->GetZoom();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PtzProxy_GetStatus(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PtzProxy *arg1 = (PlayerCc::PtzProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PtzProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PtzProxy *","GetStatus", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PtzProxy * >(argp1);
  {
    try {
      result = (int)(arg1)->GetStatus();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassRangerProxy;

SWIGINTERN VALUE
_wrap_new_RangerProxy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::RangerProxy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","RangerProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","RangerProxy", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::RangerProxy *)new PlayerCc::RangerProxy(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_RangerProxy_allocate(VALUE self)
#else
_wrap_RangerProxy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__RangerProxy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_RangerProxy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::RangerProxy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","RangerProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (PlayerCc::RangerProxy *)new PlayerCc::RangerProxy(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_RangerProxy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RangerProxy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_RangerProxy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "RangerProxy.new", 
    "    RangerProxy.new(PlayerCc::PlayerClient *aPc, uint32_t aIndex)\n"
    "    RangerProxy.new(PlayerCc::PlayerClient *aPc)\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_RangerProxy(void *self) {
    PlayerCc::RangerProxy *arg1 = (PlayerCc::RangerProxy *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_RangerProxy_GetElementCount(int argc, VALUE *argv, VALUE self) {
  PlayerCc::RangerProxy *arg1 = (PlayerCc::RangerProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__RangerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::RangerProxy const *","GetElementCount", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::RangerProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::RangerProxy const *)arg1)->GetElementCount();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RangerProxy_GetDevicePose(int argc, VALUE *argv, VALUE self) {
  PlayerCc::RangerProxy *arg1 = (PlayerCc::RangerProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  player_pose3d_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__RangerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::RangerProxy const *","GetDevicePose", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::RangerProxy * >(argp1);
  {
    try {
      result = ((PlayerCc::RangerProxy const *)arg1)->GetDevicePose();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_pose3d_t(static_cast< const player_pose3d_t& >(result))), SWIGTYPE_p_player_pose3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RangerProxy_GetDeviceSize(int argc, VALUE *argv, VALUE self) {
  PlayerCc::RangerProxy *arg1 = (PlayerCc::RangerProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  player_bbox3d_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__RangerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::RangerProxy const *","GetDeviceSize", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::RangerProxy * >(argp1);
  {
    try {
      result = ((PlayerCc::RangerProxy const *)arg1)->GetDeviceSize();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_bbox3d_t(static_cast< const player_bbox3d_t& >(result))), SWIGTYPE_p_player_bbox3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RangerProxy_GetElementPose(int argc, VALUE *argv, VALUE self) {
  PlayerCc::RangerProxy *arg1 = (PlayerCc::RangerProxy *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  player_pose3d_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__RangerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::RangerProxy const *","GetElementPose", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::RangerProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","GetElementPose", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = ((PlayerCc::RangerProxy const *)arg1)->GetElementPose(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_pose3d_t(static_cast< const player_pose3d_t& >(result))), SWIGTYPE_p_player_pose3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RangerProxy_GetElementSize(int argc, VALUE *argv, VALUE self) {
  PlayerCc::RangerProxy *arg1 = (PlayerCc::RangerProxy *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  player_bbox3d_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__RangerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::RangerProxy const *","GetElementSize", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::RangerProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","GetElementSize", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = ((PlayerCc::RangerProxy const *)arg1)->GetElementSize(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_bbox3d_t(static_cast< const player_bbox3d_t& >(result))), SWIGTYPE_p_player_bbox3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RangerProxy_GetRangeCount(int argc, VALUE *argv, VALUE self) {
  PlayerCc::RangerProxy *arg1 = (PlayerCc::RangerProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__RangerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::RangerProxy const *","GetRangeCount", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::RangerProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::RangerProxy const *)arg1)->GetRangeCount();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RangerProxy_GetRange(int argc, VALUE *argv, VALUE self) {
  PlayerCc::RangerProxy *arg1 = (PlayerCc::RangerProxy *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__RangerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::RangerProxy const *","GetRange", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::RangerProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","GetRange", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (double)((PlayerCc::RangerProxy const *)arg1)->GetRange(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RangerProxy_GetIntensityCount(int argc, VALUE *argv, VALUE self) {
  PlayerCc::RangerProxy *arg1 = (PlayerCc::RangerProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__RangerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::RangerProxy const *","GetIntensityCount", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::RangerProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::RangerProxy const *)arg1)->GetIntensityCount();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RangerProxy_GetIntensity(int argc, VALUE *argv, VALUE self) {
  PlayerCc::RangerProxy *arg1 = (PlayerCc::RangerProxy *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__RangerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::RangerProxy const *","GetIntensity", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::RangerProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","GetIntensity", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (double)((PlayerCc::RangerProxy const *)arg1)->GetIntensity(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RangerProxy_SetPower(int argc, VALUE *argv, VALUE self) {
  PlayerCc::RangerProxy *arg1 = (PlayerCc::RangerProxy *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__RangerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::RangerProxy *","SetPower", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::RangerProxy * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","SetPower", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->SetPower(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RangerProxy_SetIntensityData(int argc, VALUE *argv, VALUE self) {
  PlayerCc::RangerProxy *arg1 = (PlayerCc::RangerProxy *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__RangerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::RangerProxy *","SetIntensityData", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::RangerProxy * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","SetIntensityData", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->SetIntensityData(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RangerProxy_RequestGeom(int argc, VALUE *argv, VALUE self) {
  PlayerCc::RangerProxy *arg1 = (PlayerCc::RangerProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__RangerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::RangerProxy *","RequestGeom", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::RangerProxy * >(argp1);
  {
    try {
      (arg1)->RequestGeom();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RangerProxy_Configure(int argc, VALUE *argv, VALUE self) {
  PlayerCc::RangerProxy *arg1 = (PlayerCc::RangerProxy *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__RangerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::RangerProxy *","Configure", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::RangerProxy * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Configure", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Configure", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Configure", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","Configure", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","Configure", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "double","Configure", 7, argv[5] ));
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(argv[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), Ruby_Format_TypeError( "", "double","Configure", 8, argv[6] ));
  } 
  arg8 = static_cast< double >(val8);
  {
    try {
      (arg1)->Configure(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RangerProxy_RequestConfigure(int argc, VALUE *argv, VALUE self) {
  PlayerCc::RangerProxy *arg1 = (PlayerCc::RangerProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__RangerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::RangerProxy *","RequestConfigure", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::RangerProxy * >(argp1);
  {
    try {
      (arg1)->RequestConfigure();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RangerProxy_GetMinAngle(int argc, VALUE *argv, VALUE self) {
  PlayerCc::RangerProxy *arg1 = (PlayerCc::RangerProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__RangerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::RangerProxy const *","GetMinAngle", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::RangerProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::RangerProxy const *)arg1)->GetMinAngle();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RangerProxy_GetMaxAngle(int argc, VALUE *argv, VALUE self) {
  PlayerCc::RangerProxy *arg1 = (PlayerCc::RangerProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__RangerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::RangerProxy const *","GetMaxAngle", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::RangerProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::RangerProxy const *)arg1)->GetMaxAngle();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RangerProxy_GetAngularRes(int argc, VALUE *argv, VALUE self) {
  PlayerCc::RangerProxy *arg1 = (PlayerCc::RangerProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__RangerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::RangerProxy const *","GetAngularRes", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::RangerProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::RangerProxy const *)arg1)->GetAngularRes();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RangerProxy_GetMinRange(int argc, VALUE *argv, VALUE self) {
  PlayerCc::RangerProxy *arg1 = (PlayerCc::RangerProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__RangerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::RangerProxy const *","GetMinRange", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::RangerProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::RangerProxy const *)arg1)->GetMinRange();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RangerProxy_GetMaxRange(int argc, VALUE *argv, VALUE self) {
  PlayerCc::RangerProxy *arg1 = (PlayerCc::RangerProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__RangerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::RangerProxy const *","GetMaxRange", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::RangerProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::RangerProxy const *)arg1)->GetMaxRange();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RangerProxy_GetRangeRes(int argc, VALUE *argv, VALUE self) {
  PlayerCc::RangerProxy *arg1 = (PlayerCc::RangerProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__RangerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::RangerProxy const *","GetRangeRes", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::RangerProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::RangerProxy const *)arg1)->GetRangeRes();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RangerProxy_GetFrequency(int argc, VALUE *argv, VALUE self) {
  PlayerCc::RangerProxy *arg1 = (PlayerCc::RangerProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__RangerProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::RangerProxy const *","GetFrequency", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::RangerProxy * >(argp1);
  {
    try {
      result = (double)((PlayerCc::RangerProxy const *)arg1)->GetFrequency();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassRFIDProxy;

SWIGINTERN VALUE
_wrap_new_RFIDProxy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::RFIDProxy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","RFIDProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","RFIDProxy", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::RFIDProxy *)new PlayerCc::RFIDProxy(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_RFIDProxy_allocate(VALUE self)
#else
_wrap_RFIDProxy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__RFIDProxy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_RFIDProxy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::RFIDProxy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","RFIDProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (PlayerCc::RFIDProxy *)new PlayerCc::RFIDProxy(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_RFIDProxy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RFIDProxy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_RFIDProxy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "RFIDProxy.new", 
    "    RFIDProxy.new(PlayerCc::PlayerClient *aPc, uint32_t aIndex)\n"
    "    RFIDProxy.new(PlayerCc::PlayerClient *aPc)\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_RFIDProxy(void *self) {
    PlayerCc::RFIDProxy *arg1 = (PlayerCc::RFIDProxy *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_RFIDProxy_GetTagsCount(int argc, VALUE *argv, VALUE self) {
  PlayerCc::RFIDProxy *arg1 = (PlayerCc::RFIDProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__RFIDProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::RFIDProxy const *","GetTagsCount", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::RFIDProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::RFIDProxy const *)arg1)->GetTagsCount();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RFIDProxy_GetRFIDTag(int argc, VALUE *argv, VALUE self) {
  PlayerCc::RFIDProxy *arg1 = (PlayerCc::RFIDProxy *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  playerc_rfidtag_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__RFIDProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::RFIDProxy const *","GetRFIDTag", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::RFIDProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","GetRFIDTag", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = ((PlayerCc::RFIDProxy const *)arg1)->GetRFIDTag(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new playerc_rfidtag_t(static_cast< const playerc_rfidtag_t& >(result))), SWIGTYPE_p_playerc_rfidtag_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassSimulationProxy;

SWIGINTERN VALUE
_wrap_new_SimulationProxy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::SimulationProxy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","SimulationProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","SimulationProxy", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::SimulationProxy *)new PlayerCc::SimulationProxy(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_SimulationProxy_allocate(VALUE self)
#else
_wrap_SimulationProxy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__SimulationProxy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_SimulationProxy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::SimulationProxy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","SimulationProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (PlayerCc::SimulationProxy *)new PlayerCc::SimulationProxy(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_SimulationProxy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SimulationProxy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SimulationProxy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "SimulationProxy.new", 
    "    SimulationProxy.new(PlayerCc::PlayerClient *aPc, uint32_t aIndex)\n"
    "    SimulationProxy.new(PlayerCc::PlayerClient *aPc)\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_SimulationProxy(void *self) {
    PlayerCc::SimulationProxy *arg1 = (PlayerCc::SimulationProxy *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_SimulationProxy_SetPose2d(int argc, VALUE *argv, VALUE self) {
  PlayerCc::SimulationProxy *arg1 = (PlayerCc::SimulationProxy *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__SimulationProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::SimulationProxy *","SetPose2d", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::SimulationProxy * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char *","SetPose2d", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetPose2d", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","SetPose2d", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","SetPose2d", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      (arg1)->SetPose2d(arg2,arg3,arg4,arg5);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimulationProxy_GetPose2d(int argc, VALUE *argv, VALUE self) {
  PlayerCc::SimulationProxy *arg1 = (PlayerCc::SimulationProxy *) 0 ;
  char *arg2 = (char *) 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double temp3 ;
  int res3 = SWIG_TMPOBJ ;
  double temp4 ;
  int res4 = SWIG_TMPOBJ ;
  double temp5 ;
  int res5 = SWIG_TMPOBJ ;
  VALUE vresult = Qnil;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__SimulationProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::SimulationProxy *","GetPose2d", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::SimulationProxy * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char *","GetPose2d", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      (arg1)->GetPose2d(arg2,*arg3,*arg4,*arg5);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = rb_ary_new();
  if (SWIG_IsTmpObj(res3)) {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_double((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_double((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_double((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_double, new_flags));
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimulationProxy_SetPose3d(int argc, VALUE *argv, VALUE self) {
  PlayerCc::SimulationProxy *arg1 = (PlayerCc::SimulationProxy *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__SimulationProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::SimulationProxy *","SetPose3d", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::SimulationProxy * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char *","SetPose3d", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetPose3d", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","SetPose3d", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","SetPose3d", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","SetPose3d", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "double","SetPose3d", 7, argv[5] ));
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(argv[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), Ruby_Format_TypeError( "", "double","SetPose3d", 8, argv[6] ));
  } 
  arg8 = static_cast< double >(val8);
  {
    try {
      (arg1)->SetPose3d(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimulationProxy_GetPose3d(int argc, VALUE *argv, VALUE self) {
  PlayerCc::SimulationProxy *arg1 = (PlayerCc::SimulationProxy *) 0 ;
  char *arg2 = (char *) 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  double *arg8 = 0 ;
  double *arg9 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double temp3 ;
  int res3 = SWIG_TMPOBJ ;
  double temp4 ;
  int res4 = SWIG_TMPOBJ ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  VALUE vresult = Qnil;
  
  arg3 = &temp3;
  arg4 = &temp4;
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__SimulationProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::SimulationProxy *","GetPose3d", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::SimulationProxy * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char *","GetPose3d", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res5 = SWIG_ConvertPtr(argv[1], &argp5, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "double &","GetPose3d", 5, argv[1] )); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "double &","GetPose3d", 5, argv[1])); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(argv[2], &argp6, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "double &","GetPose3d", 6, argv[2] )); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "double &","GetPose3d", 6, argv[2])); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(argv[3], &argp7, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "double &","GetPose3d", 7, argv[3] )); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "double &","GetPose3d", 7, argv[3])); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  res8 = SWIG_ConvertPtr(argv[4], &argp8, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "double &","GetPose3d", 8, argv[4] )); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "double &","GetPose3d", 8, argv[4])); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  res9 = SWIG_ConvertPtr(argv[5], &argp9, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), Ruby_Format_TypeError( "", "double &","GetPose3d", 9, argv[5] )); 
  }
  if (!argp9) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "double &","GetPose3d", 9, argv[5])); 
  }
  arg9 = reinterpret_cast< double * >(argp9);
  {
    try {
      (arg1)->GetPose3d(arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = rb_ary_new();
  if (SWIG_IsTmpObj(res3)) {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_double((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_double((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_double, new_flags));
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimulationProxy_GetProperty(int argc, VALUE *argv, VALUE self) {
  PlayerCc::SimulationProxy *arg1 = (PlayerCc::SimulationProxy *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = (void *) 0 ;
  size_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  size_t val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__SimulationProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::SimulationProxy *","GetProperty", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::SimulationProxy * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char *","GetProperty", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char *","GetProperty", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "void *","GetProperty", 4, argv[2] )); 
  }
  ecode5 = SWIG_AsVal_size_t(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "size_t","GetProperty", 5, argv[3] ));
  } 
  arg5 = static_cast< size_t >(val5);
  {
    try {
      (arg1)->GetProperty(arg2,arg3,arg4,arg5);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimulationProxy_SetProperty(int argc, VALUE *argv, VALUE self) {
  PlayerCc::SimulationProxy *arg1 = (PlayerCc::SimulationProxy *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = (void *) 0 ;
  size_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  size_t val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__SimulationProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::SimulationProxy *","SetProperty", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::SimulationProxy * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char *","SetProperty", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char *","SetProperty", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "void *","SetProperty", 4, argv[2] )); 
  }
  ecode5 = SWIG_AsVal_size_t(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "size_t","SetProperty", 5, argv[3] ));
  } 
  arg5 = static_cast< size_t >(val5);
  {
    try {
      (arg1)->SetProperty(arg2,arg3,arg4,arg5);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


static swig_class SwigClassSonarProxy;

SWIGINTERN VALUE
_wrap_new_SonarProxy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::SonarProxy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","SonarProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","SonarProxy", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::SonarProxy *)new PlayerCc::SonarProxy(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_SonarProxy_allocate(VALUE self)
#else
_wrap_SonarProxy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__SonarProxy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_SonarProxy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::SonarProxy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","SonarProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (PlayerCc::SonarProxy *)new PlayerCc::SonarProxy(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_SonarProxy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SonarProxy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SonarProxy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "SonarProxy.new", 
    "    SonarProxy.new(PlayerCc::PlayerClient *aPc, uint32_t aIndex)\n"
    "    SonarProxy.new(PlayerCc::PlayerClient *aPc)\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_SonarProxy(void *self) {
    PlayerCc::SonarProxy *arg1 = (PlayerCc::SonarProxy *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_SonarProxy_GetCount(int argc, VALUE *argv, VALUE self) {
  PlayerCc::SonarProxy *arg1 = (PlayerCc::SonarProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__SonarProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::SonarProxy const *","GetCount", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::SonarProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::SonarProxy const *)arg1)->GetCount();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SonarProxy_GetScan(int argc, VALUE *argv, VALUE self) {
  PlayerCc::SonarProxy *arg1 = (PlayerCc::SonarProxy *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__SonarProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::SonarProxy const *","GetScan", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::SonarProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","GetScan", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (double)((PlayerCc::SonarProxy const *)arg1)->GetScan(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SonarProxy_GetPoseCount(int argc, VALUE *argv, VALUE self) {
  PlayerCc::SonarProxy *arg1 = (PlayerCc::SonarProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__SonarProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::SonarProxy const *","GetPoseCount", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::SonarProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::SonarProxy const *)arg1)->GetPoseCount();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SonarProxy_GetPose(int argc, VALUE *argv, VALUE self) {
  PlayerCc::SonarProxy *arg1 = (PlayerCc::SonarProxy *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  player_pose3d_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__SonarProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::SonarProxy const *","GetPose", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::SonarProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","GetPose", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = ((PlayerCc::SonarProxy const *)arg1)->GetPose(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_pose3d_t(static_cast< const player_pose3d_t& >(result))), SWIGTYPE_p_player_pose3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SonarProxy_RequestGeom(int argc, VALUE *argv, VALUE self) {
  PlayerCc::SonarProxy *arg1 = (PlayerCc::SonarProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__SonarProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::SonarProxy *","RequestGeom", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::SonarProxy * >(argp1);
  {
    try {
      (arg1)->RequestGeom();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


static swig_class SwigClassSpeechProxy;

SWIGINTERN VALUE
_wrap_new_SpeechProxy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::SpeechProxy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","SpeechProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","SpeechProxy", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::SpeechProxy *)new PlayerCc::SpeechProxy(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_SpeechProxy_allocate(VALUE self)
#else
_wrap_SpeechProxy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__SpeechProxy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_SpeechProxy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::SpeechProxy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","SpeechProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (PlayerCc::SpeechProxy *)new PlayerCc::SpeechProxy(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_SpeechProxy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SpeechProxy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SpeechProxy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "SpeechProxy.new", 
    "    SpeechProxy.new(PlayerCc::PlayerClient *aPc, uint32_t aIndex)\n"
    "    SpeechProxy.new(PlayerCc::PlayerClient *aPc)\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_SpeechProxy(void *self) {
    PlayerCc::SpeechProxy *arg1 = (PlayerCc::SpeechProxy *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_SpeechProxy_Say(int argc, VALUE *argv, VALUE self) {
  PlayerCc::SpeechProxy *arg1 = (PlayerCc::SpeechProxy *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__SpeechProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::SpeechProxy *","Say", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::SpeechProxy * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "std::string","Say", 2, argv[0] )); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->Say(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


static swig_class SwigClassSpeechRecognitionProxy;

SWIGINTERN VALUE
_wrap_new_SpeechRecognitionProxy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::SpeechRecognitionProxy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","SpeechRecognitionProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","SpeechRecognitionProxy", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::SpeechRecognitionProxy *)new PlayerCc::SpeechRecognitionProxy(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_SpeechRecognitionProxy_allocate(VALUE self)
#else
_wrap_SpeechRecognitionProxy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__SpeechRecognitionProxy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_SpeechRecognitionProxy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::SpeechRecognitionProxy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","SpeechRecognitionProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (PlayerCc::SpeechRecognitionProxy *)new PlayerCc::SpeechRecognitionProxy(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_SpeechRecognitionProxy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SpeechRecognitionProxy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SpeechRecognitionProxy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "SpeechRecognitionProxy.new", 
    "    SpeechRecognitionProxy.new(PlayerCc::PlayerClient *aPc, uint32_t aIndex)\n"
    "    SpeechRecognitionProxy.new(PlayerCc::PlayerClient *aPc)\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_SpeechRecognitionProxy(void *self) {
    PlayerCc::SpeechRecognitionProxy *arg1 = (PlayerCc::SpeechRecognitionProxy *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_SpeechRecognitionProxy_GetWord(int argc, VALUE *argv, VALUE self) {
  PlayerCc::SpeechRecognitionProxy *arg1 = (PlayerCc::SpeechRecognitionProxy *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__SpeechRecognitionProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::SpeechRecognitionProxy const *","GetWord", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::SpeechRecognitionProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","GetWord", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = ((PlayerCc::SpeechRecognitionProxy const *)arg1)->GetWord(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SpeechRecognitionProxy_GetCount(int argc, VALUE *argv, VALUE self) {
  PlayerCc::SpeechRecognitionProxy *arg1 = (PlayerCc::SpeechRecognitionProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__SpeechRecognitionProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::SpeechRecognitionProxy const *","GetCount", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::SpeechRecognitionProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::SpeechRecognitionProxy const *)arg1)->GetCount();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassVectorMapProxy;

SWIGINTERN VALUE
_wrap_new_VectorMapProxy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::VectorMapProxy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","VectorMapProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","VectorMapProxy", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::VectorMapProxy *)new PlayerCc::VectorMapProxy(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_VectorMapProxy_allocate(VALUE self)
#else
_wrap_VectorMapProxy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__VectorMapProxy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_VectorMapProxy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::VectorMapProxy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","VectorMapProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (PlayerCc::VectorMapProxy *)new PlayerCc::VectorMapProxy(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_VectorMapProxy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorMapProxy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_VectorMapProxy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "VectorMapProxy.new", 
    "    VectorMapProxy.new(PlayerCc::PlayerClient *aPc, uint32_t aIndex)\n"
    "    VectorMapProxy.new(PlayerCc::PlayerClient *aPc)\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_VectorMapProxy(void *self) {
    PlayerCc::VectorMapProxy *arg1 = (PlayerCc::VectorMapProxy *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_VectorMapProxy_GetMapInfo(int argc, VALUE *argv, VALUE self) {
  PlayerCc::VectorMapProxy *arg1 = (PlayerCc::VectorMapProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__VectorMapProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::VectorMapProxy *","GetMapInfo", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::VectorMapProxy * >(argp1);
  {
    try {
      (arg1)->GetMapInfo();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorMapProxy_GetLayerData(int argc, VALUE *argv, VALUE self) {
  PlayerCc::VectorMapProxy *arg1 = (PlayerCc::VectorMapProxy *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__VectorMapProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::VectorMapProxy *","GetLayerData", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::VectorMapProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","GetLayerData", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (arg1)->GetLayerData(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorMapProxy_GetLayerCount(int argc, VALUE *argv, VALUE self) {
  PlayerCc::VectorMapProxy *arg1 = (PlayerCc::VectorMapProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__VectorMapProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::VectorMapProxy const *","GetLayerCount", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::VectorMapProxy * >(argp1);
  {
    try {
      result = (int)((PlayerCc::VectorMapProxy const *)arg1)->GetLayerCount();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorMapProxy_GetLayerNames(int argc, VALUE *argv, VALUE self) {
  PlayerCc::VectorMapProxy *arg1 = (PlayerCc::VectorMapProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::string,std::allocator< std::string > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__VectorMapProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::VectorMapProxy const *","GetLayerNames", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::VectorMapProxy * >(argp1);
  {
    try {
      result = ((PlayerCc::VectorMapProxy const *)arg1)->GetLayerNames();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new std::vector< std::string,std::allocator< std::string > >(static_cast< const std::vector< std::string,std::allocator< std::string > >& >(result))), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorMapProxy_GetFeatureCount(int argc, VALUE *argv, VALUE self) {
  PlayerCc::VectorMapProxy *arg1 = (PlayerCc::VectorMapProxy *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__VectorMapProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::VectorMapProxy const *","GetFeatureCount", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::VectorMapProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","GetFeatureCount", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (int)((PlayerCc::VectorMapProxy const *)arg1)->GetFeatureCount(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorMapProxy_GetFeatureData(int argc, VALUE *argv, VALUE self) {
  PlayerCc::VectorMapProxy *arg1 = (PlayerCc::VectorMapProxy *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  uint8_t *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__VectorMapProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::VectorMapProxy const *","GetFeatureData", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::VectorMapProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","GetFeatureData", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","GetFeatureData", 3, argv[1] ));
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      result = (uint8_t *)((PlayerCc::VectorMapProxy const *)arg1)->GetFeatureData(arg2,arg3);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VectorMapProxy_GetFeatureDataCount(int argc, VALUE *argv, VALUE self) {
  PlayerCc::VectorMapProxy *arg1 = (PlayerCc::VectorMapProxy *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  size_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__VectorMapProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::VectorMapProxy const *","GetFeatureDataCount", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::VectorMapProxy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","GetFeatureDataCount", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","GetFeatureDataCount", 3, argv[1] ));
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      result = ((PlayerCc::VectorMapProxy const *)arg1)->GetFeatureDataCount(arg2,arg3);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassWiFiProxy;

SWIGINTERN VALUE
_wrap_new_WiFiProxy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::WiFiProxy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","WiFiProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","WiFiProxy", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::WiFiProxy *)new PlayerCc::WiFiProxy(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_WiFiProxy_allocate(VALUE self)
#else
_wrap_WiFiProxy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__WiFiProxy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_WiFiProxy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::WiFiProxy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","WiFiProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (PlayerCc::WiFiProxy *)new PlayerCc::WiFiProxy(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_WiFiProxy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_WiFiProxy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_WiFiProxy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "WiFiProxy.new", 
    "    WiFiProxy.new(PlayerCc::PlayerClient *aPc, uint32_t aIndex)\n"
    "    WiFiProxy.new(PlayerCc::PlayerClient *aPc)\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_WiFiProxy(void *self) {
    PlayerCc::WiFiProxy *arg1 = (PlayerCc::WiFiProxy *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_WiFiProxy_GetLink(int argc, VALUE *argv, VALUE self) {
  PlayerCc::WiFiProxy *arg1 = (PlayerCc::WiFiProxy *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  playerc_wifi_link_t *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__WiFiProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::WiFiProxy *","GetLink", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::WiFiProxy * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","GetLink", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (playerc_wifi_link_t *)(arg1)->GetLink(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_playerc_wifi_link_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WiFiProxy_GetLinkCount(int argc, VALUE *argv, VALUE self) {
  PlayerCc::WiFiProxy *arg1 = (PlayerCc::WiFiProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__WiFiProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::WiFiProxy const *","GetLinkCount", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::WiFiProxy * >(argp1);
  {
    try {
      result = (int)((PlayerCc::WiFiProxy const *)arg1)->GetLinkCount();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WiFiProxy_GetOwnIP(int argc, VALUE *argv, VALUE self) {
  PlayerCc::WiFiProxy *arg1 = (PlayerCc::WiFiProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__WiFiProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::WiFiProxy const *","GetOwnIP", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::WiFiProxy * >(argp1);
  {
    try {
      result = (char *)((PlayerCc::WiFiProxy const *)arg1)->GetOwnIP();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WiFiProxy_GetLinkIP(int argc, VALUE *argv, VALUE self) {
  PlayerCc::WiFiProxy *arg1 = (PlayerCc::WiFiProxy *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__WiFiProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::WiFiProxy const *","GetLinkIP", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::WiFiProxy * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","GetLinkIP", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (char *)((PlayerCc::WiFiProxy const *)arg1)->GetLinkIP(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WiFiProxy_GetLinkMAC(int argc, VALUE *argv, VALUE self) {
  PlayerCc::WiFiProxy *arg1 = (PlayerCc::WiFiProxy *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__WiFiProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::WiFiProxy const *","GetLinkMAC", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::WiFiProxy * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","GetLinkMAC", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (char *)((PlayerCc::WiFiProxy const *)arg1)->GetLinkMAC(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WiFiProxy_GetLinkESSID(int argc, VALUE *argv, VALUE self) {
  PlayerCc::WiFiProxy *arg1 = (PlayerCc::WiFiProxy *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__WiFiProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::WiFiProxy const *","GetLinkESSID", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::WiFiProxy * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","GetLinkESSID", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (char *)((PlayerCc::WiFiProxy const *)arg1)->GetLinkESSID(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WiFiProxy_GetLinkFreq(int argc, VALUE *argv, VALUE self) {
  PlayerCc::WiFiProxy *arg1 = (PlayerCc::WiFiProxy *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__WiFiProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::WiFiProxy const *","GetLinkFreq", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::WiFiProxy * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","GetLinkFreq", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)((PlayerCc::WiFiProxy const *)arg1)->GetLinkFreq(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WiFiProxy_GetLinkMode(int argc, VALUE *argv, VALUE self) {
  PlayerCc::WiFiProxy *arg1 = (PlayerCc::WiFiProxy *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__WiFiProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::WiFiProxy const *","GetLinkMode", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::WiFiProxy * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","GetLinkMode", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)((PlayerCc::WiFiProxy const *)arg1)->GetLinkMode(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WiFiProxy_GetLinkEncrypt(int argc, VALUE *argv, VALUE self) {
  PlayerCc::WiFiProxy *arg1 = (PlayerCc::WiFiProxy *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__WiFiProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::WiFiProxy const *","GetLinkEncrypt", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::WiFiProxy * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","GetLinkEncrypt", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)((PlayerCc::WiFiProxy const *)arg1)->GetLinkEncrypt(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WiFiProxy_GetLinkQuality(int argc, VALUE *argv, VALUE self) {
  PlayerCc::WiFiProxy *arg1 = (PlayerCc::WiFiProxy *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__WiFiProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::WiFiProxy const *","GetLinkQuality", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::WiFiProxy * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","GetLinkQuality", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)((PlayerCc::WiFiProxy const *)arg1)->GetLinkQuality(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WiFiProxy_GetLinkLevel(int argc, VALUE *argv, VALUE self) {
  PlayerCc::WiFiProxy *arg1 = (PlayerCc::WiFiProxy *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__WiFiProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::WiFiProxy const *","GetLinkLevel", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::WiFiProxy * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","GetLinkLevel", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)((PlayerCc::WiFiProxy const *)arg1)->GetLinkLevel(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WiFiProxy_GetLinkNoise(int argc, VALUE *argv, VALUE self) {
  PlayerCc::WiFiProxy *arg1 = (PlayerCc::WiFiProxy *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__WiFiProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::WiFiProxy const *","GetLinkNoise", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::WiFiProxy * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","GetLinkNoise", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)((PlayerCc::WiFiProxy const *)arg1)->GetLinkNoise(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassWSNProxy;

SWIGINTERN VALUE
_wrap_new_WSNProxy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PlayerCc::WSNProxy *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","WSNProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","WSNProxy", 2, argv[1] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PlayerCc::WSNProxy *)new PlayerCc::WSNProxy(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_WSNProxy_allocate(VALUE self)
#else
_wrap_WSNProxy_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__WSNProxy);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_WSNProxy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerClient *arg1 = (PlayerCc::PlayerClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PlayerCc::WSNProxy *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_PlayerCc__PlayerClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerClient *","WSNProxy", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerClient * >(argp1);
  {
    try {
      result = (PlayerCc::WSNProxy *)new PlayerCc::WSNProxy(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_WSNProxy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_WSNProxy__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_WSNProxy__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "WSNProxy.new", 
    "    WSNProxy.new(PlayerCc::PlayerClient *aPc, uint32_t aIndex)\n"
    "    WSNProxy.new(PlayerCc::PlayerClient *aPc)\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_WSNProxy(void *self) {
    PlayerCc::WSNProxy *arg1 = (PlayerCc::WSNProxy *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_WSNProxy_GetNodeType(int argc, VALUE *argv, VALUE self) {
  PlayerCc::WSNProxy *arg1 = (PlayerCc::WSNProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__WSNProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::WSNProxy const *","GetNodeType", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::WSNProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::WSNProxy const *)arg1)->GetNodeType();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WSNProxy_GetNodeID(int argc, VALUE *argv, VALUE self) {
  PlayerCc::WSNProxy *arg1 = (PlayerCc::WSNProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__WSNProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::WSNProxy const *","GetNodeID", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::WSNProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::WSNProxy const *)arg1)->GetNodeID();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WSNProxy_GetNodeParentID(int argc, VALUE *argv, VALUE self) {
  PlayerCc::WSNProxy *arg1 = (PlayerCc::WSNProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__WSNProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::WSNProxy const *","GetNodeParentID", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::WSNProxy * >(argp1);
  {
    try {
      result = (uint32_t)((PlayerCc::WSNProxy const *)arg1)->GetNodeParentID();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WSNProxy_GetNodeDataPacket(int argc, VALUE *argv, VALUE self) {
  PlayerCc::WSNProxy *arg1 = (PlayerCc::WSNProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  player_wsn_node_data_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__WSNProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::WSNProxy const *","GetNodeDataPacket", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::WSNProxy * >(argp1);
  {
    try {
      result = ((PlayerCc::WSNProxy const *)arg1)->GetNodeDataPacket();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj((new player_wsn_node_data_t(static_cast< const player_wsn_node_data_t& >(result))), SWIGTYPE_p_player_wsn_node_data_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WSNProxy_SetDevState(int argc, VALUE *argv, VALUE self) {
  PlayerCc::WSNProxy *arg1 = (PlayerCc::WSNProxy *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__WSNProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::WSNProxy *","SetDevState", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::WSNProxy * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SetDevState", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","SetDevState", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","SetDevState", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "int","SetDevState", 5, argv[3] ));
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      (arg1)->SetDevState(arg2,arg3,arg4,arg5);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WSNProxy_Power(int argc, VALUE *argv, VALUE self) {
  PlayerCc::WSNProxy *arg1 = (PlayerCc::WSNProxy *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__WSNProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::WSNProxy *","Power", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::WSNProxy * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Power", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","Power", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","Power", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      (arg1)->Power(arg2,arg3,arg4);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WSNProxy_DataType(int argc, VALUE *argv, VALUE self) {
  PlayerCc::WSNProxy *arg1 = (PlayerCc::WSNProxy *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__WSNProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::WSNProxy *","DataType", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::WSNProxy * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","DataType", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->DataType(arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WSNProxy_DataFreq(int argc, VALUE *argv, VALUE self) {
  PlayerCc::WSNProxy *arg1 = (PlayerCc::WSNProxy *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__WSNProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::WSNProxy *","DataFreq", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::WSNProxy * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","DataFreq", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","DataFreq", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "float","DataFreq", 4, argv[2] ));
  } 
  arg4 = static_cast< float >(val4);
  {
    try {
      (arg1)->DataFreq(arg2,arg3,arg4);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  player_point_2d_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_player_point_2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "player_point_2d_t const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "player_point_2d_t const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< player_point_2d_t * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(player_point_2d const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  player_pose2d_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_player_pose2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "player_pose2d_t const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "player_pose2d_t const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< player_pose2d_t * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(player_pose2d const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  player_pose3d_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_player_pose3d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "player_pose3d_t const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "player_pose3d_t const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< player_pose3d_t * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(player_pose3d const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_4(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  player_bbox2d_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_player_bbox2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "player_bbox2d_t const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "player_bbox2d_t const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< player_bbox2d_t * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(player_bbox2d const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_5(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  player_bbox3d_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_player_bbox3d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "player_bbox3d_t const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "player_bbox3d_t const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< player_bbox3d_t * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(player_bbox3d const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_6(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  player_segment_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_player_segment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "player_segment_t const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "player_segment_t const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< player_segment_t * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(player_segment const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_7(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  player_extent2d_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_player_extent2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "player_extent2d_t const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "player_extent2d_t const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< player_extent2d_t * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(player_extent2d const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_8(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  playerc_device_info_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_playerc_device_info_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "playerc_device_info_t const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "playerc_device_info_t const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< playerc_device_info_t * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(playerc_device_info_t const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_9(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  PlayerCc::ClientProxy *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_PlayerCc__ClientProxy,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "PlayerCc::ClientProxy const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "PlayerCc::ClientProxy const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< PlayerCc::ClientProxy * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(PlayerCc::ClientProxy const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_10(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  PlayerCc::ActArrayProxy *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_PlayerCc__ActArrayProxy,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "PlayerCc::ActArrayProxy const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "PlayerCc::ActArrayProxy const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< PlayerCc::ActArrayProxy * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(PlayerCc::ActArrayProxy const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_11(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  PlayerCc::AioProxy *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_PlayerCc__AioProxy,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "PlayerCc::AioProxy const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "PlayerCc::AioProxy const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< PlayerCc::AioProxy * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(PlayerCc::AioProxy const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_12(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  PlayerCc::AudioProxy *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_PlayerCc__AudioProxy,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "PlayerCc::AudioProxy const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "PlayerCc::AudioProxy const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< PlayerCc::AudioProxy * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(PlayerCc::AudioProxy const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_13(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  PlayerCc::BlobfinderProxy *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_PlayerCc__BlobfinderProxy,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "PlayerCc::BlobfinderProxy const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "PlayerCc::BlobfinderProxy const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< PlayerCc::BlobfinderProxy * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(PlayerCc::BlobfinderProxy const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_14(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  PlayerCc::BumperProxy *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_PlayerCc__BumperProxy,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "PlayerCc::BumperProxy const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "PlayerCc::BumperProxy const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< PlayerCc::BumperProxy * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(PlayerCc::BumperProxy const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_15(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  PlayerCc::CameraProxy *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_PlayerCc__CameraProxy,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "PlayerCc::CameraProxy const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "PlayerCc::CameraProxy const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< PlayerCc::CameraProxy * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(PlayerCc::CameraProxy const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_16(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  PlayerCc::DioProxy *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_PlayerCc__DioProxy,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "PlayerCc::DioProxy const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "PlayerCc::DioProxy const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< PlayerCc::DioProxy * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(PlayerCc::DioProxy const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_17(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  PlayerCc::FiducialProxy *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_PlayerCc__FiducialProxy,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "PlayerCc::FiducialProxy const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "PlayerCc::FiducialProxy const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< PlayerCc::FiducialProxy * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(PlayerCc::FiducialProxy const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_18(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  PlayerCc::GpsProxy *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_PlayerCc__GpsProxy,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "PlayerCc::GpsProxy const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "PlayerCc::GpsProxy const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< PlayerCc::GpsProxy * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(PlayerCc::GpsProxy const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_19(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  PlayerCc::GripperProxy *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_PlayerCc__GripperProxy,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "PlayerCc::GripperProxy const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "PlayerCc::GripperProxy const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< PlayerCc::GripperProxy * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(PlayerCc::GripperProxy const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_20(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  PlayerCc::ImuProxy *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_PlayerCc__ImuProxy,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "PlayerCc::ImuProxy const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "PlayerCc::ImuProxy const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< PlayerCc::ImuProxy * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(PlayerCc::ImuProxy const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_21(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  PlayerCc::IrProxy *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_PlayerCc__IrProxy,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "PlayerCc::IrProxy const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "PlayerCc::IrProxy const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< PlayerCc::IrProxy * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(PlayerCc::IrProxy const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_22(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  PlayerCc::LaserProxy *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_PlayerCc__LaserProxy,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "PlayerCc::LaserProxy const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "PlayerCc::LaserProxy const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< PlayerCc::LaserProxy * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(PlayerCc::LaserProxy const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_23(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  PlayerCc::LimbProxy *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_PlayerCc__LimbProxy,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "PlayerCc::LimbProxy const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "PlayerCc::LimbProxy const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< PlayerCc::LimbProxy * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(PlayerCc::LimbProxy const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_24(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  PlayerCc::LinuxjoystickProxy *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_PlayerCc__LinuxjoystickProxy,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "PlayerCc::LinuxjoystickProxy const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "PlayerCc::LinuxjoystickProxy const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< PlayerCc::LinuxjoystickProxy * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(PlayerCc::LinuxjoystickProxy const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_25(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  PlayerCc::LocalizeProxy *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_PlayerCc__LocalizeProxy,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "PlayerCc::LocalizeProxy const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "PlayerCc::LocalizeProxy const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< PlayerCc::LocalizeProxy * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(PlayerCc::LocalizeProxy const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_26(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  PlayerCc::LogProxy *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_PlayerCc__LogProxy,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "PlayerCc::LogProxy const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "PlayerCc::LogProxy const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< PlayerCc::LogProxy * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(PlayerCc::LogProxy const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_27(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  PlayerCc::MapProxy *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_PlayerCc__MapProxy,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "PlayerCc::MapProxy const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "PlayerCc::MapProxy const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< PlayerCc::MapProxy * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(PlayerCc::MapProxy const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_28(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  PlayerCc::OpaqueProxy *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_PlayerCc__OpaqueProxy,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "PlayerCc::OpaqueProxy const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "PlayerCc::OpaqueProxy const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< PlayerCc::OpaqueProxy * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(PlayerCc::OpaqueProxy const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_29(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  PlayerCc::PlannerProxy *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_PlayerCc__PlannerProxy,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "PlayerCc::PlannerProxy const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "PlayerCc::PlannerProxy const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< PlayerCc::PlannerProxy * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(PlayerCc::PlannerProxy const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_30(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  PlayerCc::Position1dProxy *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_PlayerCc__Position1dProxy,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "PlayerCc::Position1dProxy const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "PlayerCc::Position1dProxy const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< PlayerCc::Position1dProxy * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(PlayerCc::Position1dProxy const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_31(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  PlayerCc::Position2dProxy *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_PlayerCc__Position2dProxy,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "PlayerCc::Position2dProxy const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "PlayerCc::Position2dProxy const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< PlayerCc::Position2dProxy * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(PlayerCc::Position2dProxy const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_32(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  PlayerCc::Position3dProxy *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_PlayerCc__Position3dProxy,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "PlayerCc::Position3dProxy const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "PlayerCc::Position3dProxy const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< PlayerCc::Position3dProxy * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(PlayerCc::Position3dProxy const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_33(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  PlayerCc::PowerProxy *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_PlayerCc__PowerProxy,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "PlayerCc::PowerProxy const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "PlayerCc::PowerProxy const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< PlayerCc::PowerProxy * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(PlayerCc::PowerProxy const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_34(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  PlayerCc::PtzProxy *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_PlayerCc__PtzProxy,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "PlayerCc::PtzProxy const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "PlayerCc::PtzProxy const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< PlayerCc::PtzProxy * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(PlayerCc::PtzProxy const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_35(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  PlayerCc::RangerProxy *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_PlayerCc__RangerProxy,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "PlayerCc::RangerProxy const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "PlayerCc::RangerProxy const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< PlayerCc::RangerProxy * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(PlayerCc::RangerProxy const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_36(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  PlayerCc::SimulationProxy *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_PlayerCc__SimulationProxy,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "PlayerCc::SimulationProxy const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "PlayerCc::SimulationProxy const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< PlayerCc::SimulationProxy * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(PlayerCc::SimulationProxy const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_37(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  PlayerCc::SonarProxy *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_PlayerCc__SonarProxy,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "PlayerCc::SonarProxy const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "PlayerCc::SonarProxy const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< PlayerCc::SonarProxy * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(PlayerCc::SonarProxy const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_38(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  PlayerCc::SpeechProxy *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_PlayerCc__SpeechProxy,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "PlayerCc::SpeechProxy const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "PlayerCc::SpeechProxy const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< PlayerCc::SpeechProxy * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(PlayerCc::SpeechProxy const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_39(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  PlayerCc::SpeechRecognitionProxy *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_PlayerCc__SpeechRecognitionProxy,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "PlayerCc::SpeechRecognitionProxy const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "PlayerCc::SpeechRecognitionProxy const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< PlayerCc::SpeechRecognitionProxy * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(PlayerCc::SpeechRecognitionProxy const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_40(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  PlayerCc::VectorMapProxy *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_PlayerCc__VectorMapProxy,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "PlayerCc::VectorMapProxy const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "PlayerCc::VectorMapProxy const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< PlayerCc::VectorMapProxy * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(PlayerCc::VectorMapProxy const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_41(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  PlayerCc::WiFiProxy *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_PlayerCc__WiFiProxy,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "PlayerCc::WiFiProxy const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "PlayerCc::WiFiProxy const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< PlayerCc::WiFiProxy * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(PlayerCc::WiFiProxy const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_42(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  PlayerCc::RFIDProxy *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_PlayerCc__RFIDProxy,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "PlayerCc::RFIDProxy const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "PlayerCc::RFIDProxy const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< PlayerCc::RFIDProxy * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(PlayerCc::RFIDProxy const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___lshift____SWIG_43(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  PlayerCc::WSNProxy *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_PlayerCc__WSNProxy,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "PlayerCc::WSNProxy const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "PlayerCc::WSNProxy const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< PlayerCc::WSNProxy * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(PlayerCc::WSNProxy const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassPlayerError;

SWIGINTERN VALUE
_wrap_PlayerError_GetErrorStr(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerError *arg1 = (PlayerCc::PlayerError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlayerError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerError const *","GetErrorStr", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerError * >(argp1);
  {
    try {
      result = ((PlayerCc::PlayerError const *)arg1)->GetErrorStr();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlayerError_GetErrorFun(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerError *arg1 = (PlayerCc::PlayerError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlayerError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerError const *","GetErrorFun", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerError * >(argp1);
  {
    try {
      result = ((PlayerCc::PlayerError const *)arg1)->GetErrorFun();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PlayerError_GetErrorCode(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerError *arg1 = (PlayerCc::PlayerError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_PlayerCc__PlayerError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "PlayerCc::PlayerError const *","GetErrorCode", 1, self )); 
  }
  arg1 = reinterpret_cast< PlayerCc::PlayerError * >(argp1);
  {
    try {
      result = (int)((PlayerCc::PlayerError const *)arg1)->GetErrorCode();
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_PlayerError__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::string arg1 ;
  std::string arg2 ;
  int arg3 ;
  int val3 ;
  int ecode3 = 0 ;
  PlayerCc::PlayerError *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "std::string const","PlayerError", 1, argv[0] )); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "std::string const","PlayerError", 2, argv[1] )); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","PlayerError", 3, argv[2] ));
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (PlayerCc::PlayerError *)new PlayerCc::PlayerError(arg1,arg2,arg3);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_PlayerError__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::string arg1 ;
  std::string arg2 ;
  PlayerCc::PlayerError *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "std::string const","PlayerError", 1, argv[0] )); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "std::string const","PlayerError", 2, argv[1] )); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PlayerCc::PlayerError *)new PlayerCc::PlayerError(arg1,arg2);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_PlayerError__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::string arg1 ;
  PlayerCc::PlayerError *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "std::string const","PlayerError", 1, argv[0] )); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PlayerCc::PlayerError *)new PlayerCc::PlayerError(arg1);
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_PlayerError_allocate(VALUE self)
#else
_wrap_PlayerError_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_PlayerCc__PlayerError);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_PlayerError__SWIG_3(int argc, VALUE *argv, VALUE self) {
  PlayerCc::PlayerError *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (PlayerCc::PlayerError *)new PlayerCc::PlayerError();
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_PlayerError(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_PlayerError__SWIG_3(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PlayerError__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_PlayerError__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_PlayerError__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "PlayerError.new", 
    "    PlayerError.new(std::string const aFun, std::string const aStr, int const aCode)\n"
    "    PlayerError.new(std::string const aFun, std::string const aStr)\n"
    "    PlayerError.new(std::string const aFun)\n"
    "    PlayerError.new()\n");
  
  return Qnil;
}


SWIGINTERN void
free_PlayerCc_PlayerError(void *self) {
    PlayerCc::PlayerError *arg1 = (PlayerCc::PlayerError *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap___lshift____SWIG_44(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  PlayerCc::PlayerError *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","std::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","std::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_PlayerCc__PlayerError,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "PlayerCc::PlayerError const &","std::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "PlayerCc::PlayerError const &","std::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< PlayerCc::PlayerError * >(argp2);
  {
    try {
      result = (std::ostream *) &std::operator <<(*arg1,(PlayerCc::PlayerError const &)*arg2);
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap___lshift__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_PlayerCc__PlayerClient, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_player_point_2d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_player_pose2d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_player_pose3d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_player_bbox2d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_4(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_player_bbox3d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_5(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_player_segment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_6(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_player_extent2d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_7(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_playerc_device_info_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_8(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_PlayerCc__ActArrayProxy, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_10(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_PlayerCc__AioProxy, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_11(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_PlayerCc__AudioProxy, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_12(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_PlayerCc__BlobfinderProxy, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_13(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_PlayerCc__BumperProxy, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_14(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_PlayerCc__CameraProxy, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_15(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_PlayerCc__DioProxy, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_16(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_PlayerCc__FiducialProxy, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_17(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_PlayerCc__GpsProxy, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_18(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_PlayerCc__GripperProxy, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_19(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_PlayerCc__ImuProxy, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_20(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_PlayerCc__IrProxy, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_21(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_PlayerCc__LaserProxy, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_22(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_PlayerCc__LimbProxy, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_23(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_PlayerCc__LinuxjoystickProxy, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_24(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_PlayerCc__LocalizeProxy, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_25(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_PlayerCc__LogProxy, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_26(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_PlayerCc__MapProxy, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_27(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_PlayerCc__OpaqueProxy, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_28(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_PlayerCc__PlannerProxy, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_29(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_PlayerCc__Position1dProxy, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_30(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_PlayerCc__Position2dProxy, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_31(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_PlayerCc__Position3dProxy, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_32(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_PlayerCc__PowerProxy, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_33(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_PlayerCc__PtzProxy, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_34(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_PlayerCc__RangerProxy, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_35(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_PlayerCc__SimulationProxy, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_36(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_PlayerCc__SonarProxy, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_37(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_PlayerCc__SpeechProxy, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_38(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_PlayerCc__SpeechRecognitionProxy, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_39(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_PlayerCc__VectorMapProxy, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_40(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_PlayerCc__WiFiProxy, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_41(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_PlayerCc__RFIDProxy, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_42(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_PlayerCc__WSNProxy, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_43(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_PlayerCc__ClientProxy, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_9(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_PlayerCc__PlayerError, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_44(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "__lshift__", 
    "    std::ostream __lshift__(std::ostream &os, PlayerCc::PlayerClient const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, player_point_2d_t const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, player_pose2d_t const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, player_pose3d_t const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, player_bbox2d_t const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, player_bbox3d_t const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, player_segment_t const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, player_extent2d_t const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, playerc_device_info_t const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, PlayerCc::ClientProxy const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, PlayerCc::ActArrayProxy const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, PlayerCc::AioProxy const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, PlayerCc::AudioProxy const &a)\n"
    "    std::ostream __lshift__(std::ostream &os, PlayerCc::BlobfinderProxy const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, PlayerCc::BumperProxy const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, PlayerCc::CameraProxy const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, PlayerCc::DioProxy const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, PlayerCc::FiducialProxy const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, PlayerCc::GpsProxy const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, PlayerCc::GripperProxy const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, PlayerCc::ImuProxy const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, PlayerCc::IrProxy const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, PlayerCc::LaserProxy const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, PlayerCc::LimbProxy const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, PlayerCc::LinuxjoystickProxy const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, PlayerCc::LocalizeProxy const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, PlayerCc::LogProxy const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, PlayerCc::MapProxy const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, PlayerCc::OpaqueProxy const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, PlayerCc::PlannerProxy const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, PlayerCc::Position1dProxy const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, PlayerCc::Position2dProxy const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, PlayerCc::Position3dProxy const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, PlayerCc::PowerProxy const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, PlayerCc::PtzProxy const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, PlayerCc::RangerProxy const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, PlayerCc::SimulationProxy const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, PlayerCc::SonarProxy const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, PlayerCc::SpeechProxy const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, PlayerCc::SpeechRecognitionProxy const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, PlayerCc::VectorMapProxy const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, PlayerCc::WiFiProxy const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, PlayerCc::RFIDProxy const &c)\n"
    "    std::ostream __lshift__(std::ostream &os, PlayerCc::WSNProxy const &c)\n"
    "    std::ostream & __lshift__(std::ostream &os, PlayerCc::PlayerError const &e)\n");
  
  return Qnil;
}


static swig_class SwigClassPlayer_devaddr_t;

SWIGINTERN VALUE
_wrap_player_devaddr_t_host_set(int argc, VALUE *argv, VALUE self) {
  player_devaddr *arg1 = (player_devaddr *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_devaddr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_devaddr *","host", 1, self )); 
  }
  arg1 = reinterpret_cast< player_devaddr * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","host", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->host = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_devaddr_t_host_get(int argc, VALUE *argv, VALUE self) {
  player_devaddr *arg1 = (player_devaddr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_devaddr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_devaddr *","host", 1, self )); 
  }
  arg1 = reinterpret_cast< player_devaddr * >(argp1);
  result = (uint32_t) ((arg1)->host);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_devaddr_t_robot_set(int argc, VALUE *argv, VALUE self) {
  player_devaddr *arg1 = (player_devaddr *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_devaddr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_devaddr *","robot", 1, self )); 
  }
  arg1 = reinterpret_cast< player_devaddr * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","robot", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->robot = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_devaddr_t_robot_get(int argc, VALUE *argv, VALUE self) {
  player_devaddr *arg1 = (player_devaddr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_devaddr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_devaddr *","robot", 1, self )); 
  }
  arg1 = reinterpret_cast< player_devaddr * >(argp1);
  result = (uint32_t) ((arg1)->robot);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_devaddr_t_interf_set(int argc, VALUE *argv, VALUE self) {
  player_devaddr *arg1 = (player_devaddr *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_devaddr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_devaddr *","interf", 1, self )); 
  }
  arg1 = reinterpret_cast< player_devaddr * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint16_t","interf", 2, argv[0] ));
  } 
  arg2 = static_cast< uint16_t >(val2);
  if (arg1) (arg1)->interf = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_devaddr_t_interf_get(int argc, VALUE *argv, VALUE self) {
  player_devaddr *arg1 = (player_devaddr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_devaddr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_devaddr *","interf", 1, self )); 
  }
  arg1 = reinterpret_cast< player_devaddr * >(argp1);
  result = (uint16_t) ((arg1)->interf);
  vresult = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_devaddr_t_index_set(int argc, VALUE *argv, VALUE self) {
  player_devaddr *arg1 = (player_devaddr *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_devaddr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_devaddr *","index", 1, self )); 
  }
  arg1 = reinterpret_cast< player_devaddr * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint16_t","index", 2, argv[0] ));
  } 
  arg2 = static_cast< uint16_t >(val2);
  if (arg1) (arg1)->index = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_devaddr_t_index_get(int argc, VALUE *argv, VALUE self) {
  player_devaddr *arg1 = (player_devaddr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_devaddr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_devaddr *","index", 1, self )); 
  }
  arg1 = reinterpret_cast< player_devaddr * >(argp1);
  result = (uint16_t) ((arg1)->index);
  vresult = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_player_devaddr_t_allocate(VALUE self)
#else
_wrap_player_devaddr_t_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_player_devaddr);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_player_devaddr_t(int argc, VALUE *argv, VALUE self) {
  player_devaddr *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (player_devaddr *)new player_devaddr();
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_player_devaddr(void *self) {
    player_devaddr *arg1 = (player_devaddr *)self;
    delete arg1;
}

static swig_class SwigClassPlayer_msghdr_t;

SWIGINTERN VALUE
_wrap_player_msghdr_t_addr_set(int argc, VALUE *argv, VALUE self) {
  player_msghdr *arg1 = (player_msghdr *) 0 ;
  player_devaddr_t *arg2 = (player_devaddr_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_msghdr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_msghdr *","addr", 1, self )); 
  }
  arg1 = reinterpret_cast< player_msghdr * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_player_devaddr, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "player_devaddr_t *","addr", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< player_devaddr_t * >(argp2);
  if (arg1) (arg1)->addr = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_msghdr_t_addr_get(int argc, VALUE *argv, VALUE self) {
  player_msghdr *arg1 = (player_msghdr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  player_devaddr_t *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_msghdr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_msghdr *","addr", 1, self )); 
  }
  arg1 = reinterpret_cast< player_msghdr * >(argp1);
  result = (player_devaddr_t *)& ((arg1)->addr);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_player_devaddr, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_msghdr_t_type_set(int argc, VALUE *argv, VALUE self) {
  player_msghdr *arg1 = (player_msghdr *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_msghdr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_msghdr *","type", 1, self )); 
  }
  arg1 = reinterpret_cast< player_msghdr * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint8_t","type", 2, argv[0] ));
  } 
  arg2 = static_cast< uint8_t >(val2);
  if (arg1) (arg1)->type = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_msghdr_t_type_get(int argc, VALUE *argv, VALUE self) {
  player_msghdr *arg1 = (player_msghdr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_msghdr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_msghdr *","type", 1, self )); 
  }
  arg1 = reinterpret_cast< player_msghdr * >(argp1);
  result = (uint8_t) ((arg1)->type);
  vresult = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_msghdr_t_subtype_set(int argc, VALUE *argv, VALUE self) {
  player_msghdr *arg1 = (player_msghdr *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_msghdr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_msghdr *","subtype", 1, self )); 
  }
  arg1 = reinterpret_cast< player_msghdr * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint8_t","subtype", 2, argv[0] ));
  } 
  arg2 = static_cast< uint8_t >(val2);
  if (arg1) (arg1)->subtype = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_msghdr_t_subtype_get(int argc, VALUE *argv, VALUE self) {
  player_msghdr *arg1 = (player_msghdr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_msghdr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_msghdr *","subtype", 1, self )); 
  }
  arg1 = reinterpret_cast< player_msghdr * >(argp1);
  result = (uint8_t) ((arg1)->subtype);
  vresult = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_msghdr_t_timestamp_set(int argc, VALUE *argv, VALUE self) {
  player_msghdr *arg1 = (player_msghdr *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_msghdr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_msghdr *","timestamp", 1, self )); 
  }
  arg1 = reinterpret_cast< player_msghdr * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","timestamp", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->timestamp = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_msghdr_t_timestamp_get(int argc, VALUE *argv, VALUE self) {
  player_msghdr *arg1 = (player_msghdr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_msghdr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_msghdr *","timestamp", 1, self )); 
  }
  arg1 = reinterpret_cast< player_msghdr * >(argp1);
  result = (double) ((arg1)->timestamp);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_msghdr_t_seq_set(int argc, VALUE *argv, VALUE self) {
  player_msghdr *arg1 = (player_msghdr *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_msghdr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_msghdr *","seq", 1, self )); 
  }
  arg1 = reinterpret_cast< player_msghdr * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","seq", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->seq = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_msghdr_t_seq_get(int argc, VALUE *argv, VALUE self) {
  player_msghdr *arg1 = (player_msghdr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_msghdr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_msghdr *","seq", 1, self )); 
  }
  arg1 = reinterpret_cast< player_msghdr * >(argp1);
  result = (uint32_t) ((arg1)->seq);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Playercpp::player_msghdr_t.size

  call-seq:
    size -> uint32_t

Size or Length of the player_msghdr_t.
*/

/*
  Document-method: Playercpp::player_msghdr_t.size=

  call-seq:
    size=(x) -> uint32_t

Size or Length of the player_msghdr_t.
*/
SWIGINTERN VALUE
_wrap_player_msghdr_t_size_set(int argc, VALUE *argv, VALUE self) {
  player_msghdr *arg1 = (player_msghdr *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_msghdr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_msghdr *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< player_msghdr * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","size", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->size = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_msghdr_t_size_get(int argc, VALUE *argv, VALUE self) {
  player_msghdr *arg1 = (player_msghdr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_msghdr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_msghdr *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< player_msghdr * >(argp1);
  result = (uint32_t) ((arg1)->size);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_player_msghdr_t_allocate(VALUE self)
#else
_wrap_player_msghdr_t_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_player_msghdr);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_player_msghdr_t(int argc, VALUE *argv, VALUE self) {
  player_msghdr *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (player_msghdr *)new player_msghdr();
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_player_msghdr(void *self) {
    player_msghdr *arg1 = (player_msghdr *)self;
    delete arg1;
}

static swig_class SwigClassPlayer_point_2d_t;

SWIGINTERN VALUE
_wrap_player_point_2d_t_px_set(int argc, VALUE *argv, VALUE self) {
  player_point_2d *arg1 = (player_point_2d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_point_2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_point_2d *","px", 1, self )); 
  }
  arg1 = reinterpret_cast< player_point_2d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","px", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->px = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_point_2d_t_px_get(int argc, VALUE *argv, VALUE self) {
  player_point_2d *arg1 = (player_point_2d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_point_2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_point_2d *","px", 1, self )); 
  }
  arg1 = reinterpret_cast< player_point_2d * >(argp1);
  result = (double) ((arg1)->px);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_point_2d_t_py_set(int argc, VALUE *argv, VALUE self) {
  player_point_2d *arg1 = (player_point_2d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_point_2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_point_2d *","py", 1, self )); 
  }
  arg1 = reinterpret_cast< player_point_2d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","py", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->py = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_point_2d_t_py_get(int argc, VALUE *argv, VALUE self) {
  player_point_2d *arg1 = (player_point_2d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_point_2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_point_2d *","py", 1, self )); 
  }
  arg1 = reinterpret_cast< player_point_2d * >(argp1);
  result = (double) ((arg1)->py);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_player_point_2d_t_allocate(VALUE self)
#else
_wrap_player_point_2d_t_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_player_point_2d);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_player_point_2d_t(int argc, VALUE *argv, VALUE self) {
  player_point_2d *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (player_point_2d *)new player_point_2d();
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_player_point_2d(void *self) {
    player_point_2d *arg1 = (player_point_2d *)self;
    delete arg1;
}

static swig_class SwigClassPlayer_point_3d_t;

SWIGINTERN VALUE
_wrap_player_point_3d_t_px_set(int argc, VALUE *argv, VALUE self) {
  player_point_3d *arg1 = (player_point_3d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_point_3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_point_3d *","px", 1, self )); 
  }
  arg1 = reinterpret_cast< player_point_3d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","px", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->px = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_point_3d_t_px_get(int argc, VALUE *argv, VALUE self) {
  player_point_3d *arg1 = (player_point_3d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_point_3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_point_3d *","px", 1, self )); 
  }
  arg1 = reinterpret_cast< player_point_3d * >(argp1);
  result = (double) ((arg1)->px);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_point_3d_t_py_set(int argc, VALUE *argv, VALUE self) {
  player_point_3d *arg1 = (player_point_3d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_point_3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_point_3d *","py", 1, self )); 
  }
  arg1 = reinterpret_cast< player_point_3d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","py", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->py = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_point_3d_t_py_get(int argc, VALUE *argv, VALUE self) {
  player_point_3d *arg1 = (player_point_3d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_point_3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_point_3d *","py", 1, self )); 
  }
  arg1 = reinterpret_cast< player_point_3d * >(argp1);
  result = (double) ((arg1)->py);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_point_3d_t_pz_set(int argc, VALUE *argv, VALUE self) {
  player_point_3d *arg1 = (player_point_3d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_point_3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_point_3d *","pz", 1, self )); 
  }
  arg1 = reinterpret_cast< player_point_3d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","pz", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->pz = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_point_3d_t_pz_get(int argc, VALUE *argv, VALUE self) {
  player_point_3d *arg1 = (player_point_3d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_point_3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_point_3d *","pz", 1, self )); 
  }
  arg1 = reinterpret_cast< player_point_3d * >(argp1);
  result = (double) ((arg1)->pz);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_player_point_3d_t_allocate(VALUE self)
#else
_wrap_player_point_3d_t_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_player_point_3d);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_player_point_3d_t(int argc, VALUE *argv, VALUE self) {
  player_point_3d *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (player_point_3d *)new player_point_3d();
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_player_point_3d(void *self) {
    player_point_3d *arg1 = (player_point_3d *)self;
    delete arg1;
}

static swig_class SwigClassPlayer_orientation_3d_t;

SWIGINTERN VALUE
_wrap_player_orientation_3d_t_proll_set(int argc, VALUE *argv, VALUE self) {
  player_orientation_3d *arg1 = (player_orientation_3d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_orientation_3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_orientation_3d *","proll", 1, self )); 
  }
  arg1 = reinterpret_cast< player_orientation_3d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","proll", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->proll = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_orientation_3d_t_proll_get(int argc, VALUE *argv, VALUE self) {
  player_orientation_3d *arg1 = (player_orientation_3d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_orientation_3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_orientation_3d *","proll", 1, self )); 
  }
  arg1 = reinterpret_cast< player_orientation_3d * >(argp1);
  result = (double) ((arg1)->proll);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_orientation_3d_t_ppitch_set(int argc, VALUE *argv, VALUE self) {
  player_orientation_3d *arg1 = (player_orientation_3d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_orientation_3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_orientation_3d *","ppitch", 1, self )); 
  }
  arg1 = reinterpret_cast< player_orientation_3d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","ppitch", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->ppitch = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_orientation_3d_t_ppitch_get(int argc, VALUE *argv, VALUE self) {
  player_orientation_3d *arg1 = (player_orientation_3d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_orientation_3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_orientation_3d *","ppitch", 1, self )); 
  }
  arg1 = reinterpret_cast< player_orientation_3d * >(argp1);
  result = (double) ((arg1)->ppitch);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_orientation_3d_t_pyaw_set(int argc, VALUE *argv, VALUE self) {
  player_orientation_3d *arg1 = (player_orientation_3d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_orientation_3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_orientation_3d *","pyaw", 1, self )); 
  }
  arg1 = reinterpret_cast< player_orientation_3d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","pyaw", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->pyaw = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_orientation_3d_t_pyaw_get(int argc, VALUE *argv, VALUE self) {
  player_orientation_3d *arg1 = (player_orientation_3d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_orientation_3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_orientation_3d *","pyaw", 1, self )); 
  }
  arg1 = reinterpret_cast< player_orientation_3d * >(argp1);
  result = (double) ((arg1)->pyaw);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_player_orientation_3d_t_allocate(VALUE self)
#else
_wrap_player_orientation_3d_t_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_player_orientation_3d);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_player_orientation_3d_t(int argc, VALUE *argv, VALUE self) {
  player_orientation_3d *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (player_orientation_3d *)new player_orientation_3d();
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_player_orientation_3d(void *self) {
    player_orientation_3d *arg1 = (player_orientation_3d *)self;
    delete arg1;
}

static swig_class SwigClassPlayer_pose2d_t;

SWIGINTERN VALUE
_wrap_player_pose2d_t_px_set(int argc, VALUE *argv, VALUE self) {
  player_pose2d *arg1 = (player_pose2d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_pose2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_pose2d *","px", 1, self )); 
  }
  arg1 = reinterpret_cast< player_pose2d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","px", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->px = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_pose2d_t_px_get(int argc, VALUE *argv, VALUE self) {
  player_pose2d *arg1 = (player_pose2d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_pose2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_pose2d *","px", 1, self )); 
  }
  arg1 = reinterpret_cast< player_pose2d * >(argp1);
  result = (double) ((arg1)->px);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_pose2d_t_py_set(int argc, VALUE *argv, VALUE self) {
  player_pose2d *arg1 = (player_pose2d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_pose2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_pose2d *","py", 1, self )); 
  }
  arg1 = reinterpret_cast< player_pose2d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","py", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->py = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_pose2d_t_py_get(int argc, VALUE *argv, VALUE self) {
  player_pose2d *arg1 = (player_pose2d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_pose2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_pose2d *","py", 1, self )); 
  }
  arg1 = reinterpret_cast< player_pose2d * >(argp1);
  result = (double) ((arg1)->py);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_pose2d_t_pa_set(int argc, VALUE *argv, VALUE self) {
  player_pose2d *arg1 = (player_pose2d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_pose2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_pose2d *","pa", 1, self )); 
  }
  arg1 = reinterpret_cast< player_pose2d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","pa", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->pa = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_pose2d_t_pa_get(int argc, VALUE *argv, VALUE self) {
  player_pose2d *arg1 = (player_pose2d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_pose2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_pose2d *","pa", 1, self )); 
  }
  arg1 = reinterpret_cast< player_pose2d * >(argp1);
  result = (double) ((arg1)->pa);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_player_pose2d_t_allocate(VALUE self)
#else
_wrap_player_pose2d_t_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_player_pose2d);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_player_pose2d_t(int argc, VALUE *argv, VALUE self) {
  player_pose2d *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (player_pose2d *)new player_pose2d();
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_player_pose2d(void *self) {
    player_pose2d *arg1 = (player_pose2d *)self;
    delete arg1;
}

static swig_class SwigClassPlayer_pose3d_t;

SWIGINTERN VALUE
_wrap_player_pose3d_t_px_set(int argc, VALUE *argv, VALUE self) {
  player_pose3d *arg1 = (player_pose3d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_pose3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_pose3d *","px", 1, self )); 
  }
  arg1 = reinterpret_cast< player_pose3d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","px", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->px = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_pose3d_t_px_get(int argc, VALUE *argv, VALUE self) {
  player_pose3d *arg1 = (player_pose3d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_pose3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_pose3d *","px", 1, self )); 
  }
  arg1 = reinterpret_cast< player_pose3d * >(argp1);
  result = (double) ((arg1)->px);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_pose3d_t_py_set(int argc, VALUE *argv, VALUE self) {
  player_pose3d *arg1 = (player_pose3d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_pose3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_pose3d *","py", 1, self )); 
  }
  arg1 = reinterpret_cast< player_pose3d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","py", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->py = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_pose3d_t_py_get(int argc, VALUE *argv, VALUE self) {
  player_pose3d *arg1 = (player_pose3d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_pose3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_pose3d *","py", 1, self )); 
  }
  arg1 = reinterpret_cast< player_pose3d * >(argp1);
  result = (double) ((arg1)->py);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_pose3d_t_pz_set(int argc, VALUE *argv, VALUE self) {
  player_pose3d *arg1 = (player_pose3d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_pose3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_pose3d *","pz", 1, self )); 
  }
  arg1 = reinterpret_cast< player_pose3d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","pz", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->pz = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_pose3d_t_pz_get(int argc, VALUE *argv, VALUE self) {
  player_pose3d *arg1 = (player_pose3d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_pose3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_pose3d *","pz", 1, self )); 
  }
  arg1 = reinterpret_cast< player_pose3d * >(argp1);
  result = (double) ((arg1)->pz);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_pose3d_t_proll_set(int argc, VALUE *argv, VALUE self) {
  player_pose3d *arg1 = (player_pose3d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_pose3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_pose3d *","proll", 1, self )); 
  }
  arg1 = reinterpret_cast< player_pose3d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","proll", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->proll = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_pose3d_t_proll_get(int argc, VALUE *argv, VALUE self) {
  player_pose3d *arg1 = (player_pose3d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_pose3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_pose3d *","proll", 1, self )); 
  }
  arg1 = reinterpret_cast< player_pose3d * >(argp1);
  result = (double) ((arg1)->proll);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_pose3d_t_ppitch_set(int argc, VALUE *argv, VALUE self) {
  player_pose3d *arg1 = (player_pose3d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_pose3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_pose3d *","ppitch", 1, self )); 
  }
  arg1 = reinterpret_cast< player_pose3d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","ppitch", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->ppitch = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_pose3d_t_ppitch_get(int argc, VALUE *argv, VALUE self) {
  player_pose3d *arg1 = (player_pose3d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_pose3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_pose3d *","ppitch", 1, self )); 
  }
  arg1 = reinterpret_cast< player_pose3d * >(argp1);
  result = (double) ((arg1)->ppitch);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_pose3d_t_pyaw_set(int argc, VALUE *argv, VALUE self) {
  player_pose3d *arg1 = (player_pose3d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_pose3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_pose3d *","pyaw", 1, self )); 
  }
  arg1 = reinterpret_cast< player_pose3d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","pyaw", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->pyaw = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_pose3d_t_pyaw_get(int argc, VALUE *argv, VALUE self) {
  player_pose3d *arg1 = (player_pose3d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_pose3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_pose3d *","pyaw", 1, self )); 
  }
  arg1 = reinterpret_cast< player_pose3d * >(argp1);
  result = (double) ((arg1)->pyaw);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_player_pose3d_t_allocate(VALUE self)
#else
_wrap_player_pose3d_t_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_player_pose3d);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_player_pose3d_t(int argc, VALUE *argv, VALUE self) {
  player_pose3d *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (player_pose3d *)new player_pose3d();
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_player_pose3d(void *self) {
    player_pose3d *arg1 = (player_pose3d *)self;
    delete arg1;
}

static swig_class SwigClassPlayer_bbox2d_t;

SWIGINTERN VALUE
_wrap_player_bbox2d_t_sw_set(int argc, VALUE *argv, VALUE self) {
  player_bbox2d *arg1 = (player_bbox2d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_bbox2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_bbox2d *","sw", 1, self )); 
  }
  arg1 = reinterpret_cast< player_bbox2d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","sw", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->sw = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_bbox2d_t_sw_get(int argc, VALUE *argv, VALUE self) {
  player_bbox2d *arg1 = (player_bbox2d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_bbox2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_bbox2d *","sw", 1, self )); 
  }
  arg1 = reinterpret_cast< player_bbox2d * >(argp1);
  result = (double) ((arg1)->sw);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_bbox2d_t_sl_set(int argc, VALUE *argv, VALUE self) {
  player_bbox2d *arg1 = (player_bbox2d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_bbox2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_bbox2d *","sl", 1, self )); 
  }
  arg1 = reinterpret_cast< player_bbox2d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","sl", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->sl = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_bbox2d_t_sl_get(int argc, VALUE *argv, VALUE self) {
  player_bbox2d *arg1 = (player_bbox2d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_bbox2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_bbox2d *","sl", 1, self )); 
  }
  arg1 = reinterpret_cast< player_bbox2d * >(argp1);
  result = (double) ((arg1)->sl);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_player_bbox2d_t_allocate(VALUE self)
#else
_wrap_player_bbox2d_t_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_player_bbox2d);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_player_bbox2d_t(int argc, VALUE *argv, VALUE self) {
  player_bbox2d *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (player_bbox2d *)new player_bbox2d();
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_player_bbox2d(void *self) {
    player_bbox2d *arg1 = (player_bbox2d *)self;
    delete arg1;
}

static swig_class SwigClassPlayer_bbox3d_t;

SWIGINTERN VALUE
_wrap_player_bbox3d_t_sw_set(int argc, VALUE *argv, VALUE self) {
  player_bbox3d *arg1 = (player_bbox3d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_bbox3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_bbox3d *","sw", 1, self )); 
  }
  arg1 = reinterpret_cast< player_bbox3d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","sw", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->sw = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_bbox3d_t_sw_get(int argc, VALUE *argv, VALUE self) {
  player_bbox3d *arg1 = (player_bbox3d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_bbox3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_bbox3d *","sw", 1, self )); 
  }
  arg1 = reinterpret_cast< player_bbox3d * >(argp1);
  result = (double) ((arg1)->sw);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_bbox3d_t_sl_set(int argc, VALUE *argv, VALUE self) {
  player_bbox3d *arg1 = (player_bbox3d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_bbox3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_bbox3d *","sl", 1, self )); 
  }
  arg1 = reinterpret_cast< player_bbox3d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","sl", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->sl = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_bbox3d_t_sl_get(int argc, VALUE *argv, VALUE self) {
  player_bbox3d *arg1 = (player_bbox3d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_bbox3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_bbox3d *","sl", 1, self )); 
  }
  arg1 = reinterpret_cast< player_bbox3d * >(argp1);
  result = (double) ((arg1)->sl);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_bbox3d_t_sh_set(int argc, VALUE *argv, VALUE self) {
  player_bbox3d *arg1 = (player_bbox3d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_bbox3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_bbox3d *","sh", 1, self )); 
  }
  arg1 = reinterpret_cast< player_bbox3d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","sh", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->sh = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_bbox3d_t_sh_get(int argc, VALUE *argv, VALUE self) {
  player_bbox3d *arg1 = (player_bbox3d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_bbox3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_bbox3d *","sh", 1, self )); 
  }
  arg1 = reinterpret_cast< player_bbox3d * >(argp1);
  result = (double) ((arg1)->sh);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_player_bbox3d_t_allocate(VALUE self)
#else
_wrap_player_bbox3d_t_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_player_bbox3d);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_player_bbox3d_t(int argc, VALUE *argv, VALUE self) {
  player_bbox3d *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (player_bbox3d *)new player_bbox3d();
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_player_bbox3d(void *self) {
    player_bbox3d *arg1 = (player_bbox3d *)self;
    delete arg1;
}

static swig_class SwigClassPlayer_blackboard_entry_t;

SWIGINTERN VALUE
_wrap_player_blackboard_entry_t_key_count_set(int argc, VALUE *argv, VALUE self) {
  player_blackboard_entry *arg1 = (player_blackboard_entry *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_blackboard_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_blackboard_entry *","key_count", 1, self )); 
  }
  arg1 = reinterpret_cast< player_blackboard_entry * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","key_count", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->key_count = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_blackboard_entry_t_key_count_get(int argc, VALUE *argv, VALUE self) {
  player_blackboard_entry *arg1 = (player_blackboard_entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_blackboard_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_blackboard_entry *","key_count", 1, self )); 
  }
  arg1 = reinterpret_cast< player_blackboard_entry * >(argp1);
  result = (uint32_t) ((arg1)->key_count);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_blackboard_entry_t_key_set(int argc, VALUE *argv, VALUE self) {
  player_blackboard_entry *arg1 = (player_blackboard_entry *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_blackboard_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_blackboard_entry *","key", 1, self )); 
  }
  arg1 = reinterpret_cast< player_blackboard_entry * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char *","key", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg1->key) delete[] arg1->key;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->key = (char *)reinterpret_cast< char* >(memcpy(new char[size], reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->key = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_blackboard_entry_t_key_get(int argc, VALUE *argv, VALUE self) {
  player_blackboard_entry *arg1 = (player_blackboard_entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_blackboard_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_blackboard_entry *","key", 1, self )); 
  }
  arg1 = reinterpret_cast< player_blackboard_entry * >(argp1);
  result = (char *) ((arg1)->key);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_blackboard_entry_t_group_count_set(int argc, VALUE *argv, VALUE self) {
  player_blackboard_entry *arg1 = (player_blackboard_entry *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_blackboard_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_blackboard_entry *","group_count", 1, self )); 
  }
  arg1 = reinterpret_cast< player_blackboard_entry * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","group_count", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->group_count = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_blackboard_entry_t_group_count_get(int argc, VALUE *argv, VALUE self) {
  player_blackboard_entry *arg1 = (player_blackboard_entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_blackboard_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_blackboard_entry *","group_count", 1, self )); 
  }
  arg1 = reinterpret_cast< player_blackboard_entry * >(argp1);
  result = (uint32_t) ((arg1)->group_count);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_blackboard_entry_t_group_set(int argc, VALUE *argv, VALUE self) {
  player_blackboard_entry *arg1 = (player_blackboard_entry *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_blackboard_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_blackboard_entry *","group", 1, self )); 
  }
  arg1 = reinterpret_cast< player_blackboard_entry * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char *","group", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg1->group) delete[] arg1->group;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->group = (char *)reinterpret_cast< char* >(memcpy(new char[size], reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->group = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_blackboard_entry_t_group_get(int argc, VALUE *argv, VALUE self) {
  player_blackboard_entry *arg1 = (player_blackboard_entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_blackboard_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_blackboard_entry *","group", 1, self )); 
  }
  arg1 = reinterpret_cast< player_blackboard_entry * >(argp1);
  result = (char *) ((arg1)->group);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_blackboard_entry_t_type_set(int argc, VALUE *argv, VALUE self) {
  player_blackboard_entry *arg1 = (player_blackboard_entry *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_blackboard_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_blackboard_entry *","type", 1, self )); 
  }
  arg1 = reinterpret_cast< player_blackboard_entry * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint16_t","type", 2, argv[0] ));
  } 
  arg2 = static_cast< uint16_t >(val2);
  if (arg1) (arg1)->type = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_blackboard_entry_t_type_get(int argc, VALUE *argv, VALUE self) {
  player_blackboard_entry *arg1 = (player_blackboard_entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_blackboard_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_blackboard_entry *","type", 1, self )); 
  }
  arg1 = reinterpret_cast< player_blackboard_entry * >(argp1);
  result = (uint16_t) ((arg1)->type);
  vresult = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_blackboard_entry_t_subtype_set(int argc, VALUE *argv, VALUE self) {
  player_blackboard_entry *arg1 = (player_blackboard_entry *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_blackboard_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_blackboard_entry *","subtype", 1, self )); 
  }
  arg1 = reinterpret_cast< player_blackboard_entry * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint16_t","subtype", 2, argv[0] ));
  } 
  arg2 = static_cast< uint16_t >(val2);
  if (arg1) (arg1)->subtype = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_blackboard_entry_t_subtype_get(int argc, VALUE *argv, VALUE self) {
  player_blackboard_entry *arg1 = (player_blackboard_entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_blackboard_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_blackboard_entry *","subtype", 1, self )); 
  }
  arg1 = reinterpret_cast< player_blackboard_entry * >(argp1);
  result = (uint16_t) ((arg1)->subtype);
  vresult = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_blackboard_entry_t_data_count_set(int argc, VALUE *argv, VALUE self) {
  player_blackboard_entry *arg1 = (player_blackboard_entry *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_blackboard_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_blackboard_entry *","data_count", 1, self )); 
  }
  arg1 = reinterpret_cast< player_blackboard_entry * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","data_count", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->data_count = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_blackboard_entry_t_data_count_get(int argc, VALUE *argv, VALUE self) {
  player_blackboard_entry *arg1 = (player_blackboard_entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_blackboard_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_blackboard_entry *","data_count", 1, self )); 
  }
  arg1 = reinterpret_cast< player_blackboard_entry * >(argp1);
  result = (uint32_t) ((arg1)->data_count);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_blackboard_entry_t_data_set(int argc, VALUE *argv, VALUE self) {
  player_blackboard_entry *arg1 = (player_blackboard_entry *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_blackboard_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_blackboard_entry *","data", 1, self )); 
  }
  arg1 = reinterpret_cast< player_blackboard_entry * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_unsigned_char, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint8_t *","data", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< uint8_t * >(argp2);
  if (arg1) (arg1)->data = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_blackboard_entry_t_data_get(int argc, VALUE *argv, VALUE self) {
  player_blackboard_entry *arg1 = (player_blackboard_entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_blackboard_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_blackboard_entry *","data", 1, self )); 
  }
  arg1 = reinterpret_cast< player_blackboard_entry * >(argp1);
  result = (uint8_t *) ((arg1)->data);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_blackboard_entry_t_timestamp_sec_set(int argc, VALUE *argv, VALUE self) {
  player_blackboard_entry *arg1 = (player_blackboard_entry *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_blackboard_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_blackboard_entry *","timestamp_sec", 1, self )); 
  }
  arg1 = reinterpret_cast< player_blackboard_entry * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","timestamp_sec", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->timestamp_sec = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_blackboard_entry_t_timestamp_sec_get(int argc, VALUE *argv, VALUE self) {
  player_blackboard_entry *arg1 = (player_blackboard_entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_blackboard_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_blackboard_entry *","timestamp_sec", 1, self )); 
  }
  arg1 = reinterpret_cast< player_blackboard_entry * >(argp1);
  result = (uint32_t) ((arg1)->timestamp_sec);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_blackboard_entry_t_timestamp_usec_set(int argc, VALUE *argv, VALUE self) {
  player_blackboard_entry *arg1 = (player_blackboard_entry *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_blackboard_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_blackboard_entry *","timestamp_usec", 1, self )); 
  }
  arg1 = reinterpret_cast< player_blackboard_entry * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","timestamp_usec", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->timestamp_usec = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_blackboard_entry_t_timestamp_usec_get(int argc, VALUE *argv, VALUE self) {
  player_blackboard_entry *arg1 = (player_blackboard_entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_blackboard_entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_blackboard_entry *","timestamp_usec", 1, self )); 
  }
  arg1 = reinterpret_cast< player_blackboard_entry * >(argp1);
  result = (uint32_t) ((arg1)->timestamp_usec);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_player_blackboard_entry_t_allocate(VALUE self)
#else
_wrap_player_blackboard_entry_t_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_player_blackboard_entry);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_player_blackboard_entry_t(int argc, VALUE *argv, VALUE self) {
  player_blackboard_entry *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (player_blackboard_entry *)new player_blackboard_entry();
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_player_blackboard_entry(void *self) {
    player_blackboard_entry *arg1 = (player_blackboard_entry *)self;
    delete arg1;
}

static swig_class SwigClassPlayer_segment_t;

SWIGINTERN VALUE
_wrap_player_segment_t_x0_set(int argc, VALUE *argv, VALUE self) {
  player_segment *arg1 = (player_segment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_segment *","x0", 1, self )); 
  }
  arg1 = reinterpret_cast< player_segment * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","x0", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->x0 = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_segment_t_x0_get(int argc, VALUE *argv, VALUE self) {
  player_segment *arg1 = (player_segment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_segment *","x0", 1, self )); 
  }
  arg1 = reinterpret_cast< player_segment * >(argp1);
  result = (double) ((arg1)->x0);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_segment_t_y0_set(int argc, VALUE *argv, VALUE self) {
  player_segment *arg1 = (player_segment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_segment *","y0", 1, self )); 
  }
  arg1 = reinterpret_cast< player_segment * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","y0", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->y0 = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_segment_t_y0_get(int argc, VALUE *argv, VALUE self) {
  player_segment *arg1 = (player_segment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_segment *","y0", 1, self )); 
  }
  arg1 = reinterpret_cast< player_segment * >(argp1);
  result = (double) ((arg1)->y0);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_segment_t_x1_set(int argc, VALUE *argv, VALUE self) {
  player_segment *arg1 = (player_segment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_segment *","x1", 1, self )); 
  }
  arg1 = reinterpret_cast< player_segment * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","x1", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->x1 = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_segment_t_x1_get(int argc, VALUE *argv, VALUE self) {
  player_segment *arg1 = (player_segment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_segment *","x1", 1, self )); 
  }
  arg1 = reinterpret_cast< player_segment * >(argp1);
  result = (double) ((arg1)->x1);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_segment_t_y1_set(int argc, VALUE *argv, VALUE self) {
  player_segment *arg1 = (player_segment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_segment *","y1", 1, self )); 
  }
  arg1 = reinterpret_cast< player_segment * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","y1", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->y1 = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_segment_t_y1_get(int argc, VALUE *argv, VALUE self) {
  player_segment *arg1 = (player_segment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_segment *","y1", 1, self )); 
  }
  arg1 = reinterpret_cast< player_segment * >(argp1);
  result = (double) ((arg1)->y1);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_player_segment_t_allocate(VALUE self)
#else
_wrap_player_segment_t_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_player_segment);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_player_segment_t(int argc, VALUE *argv, VALUE self) {
  player_segment *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (player_segment *)new player_segment();
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_player_segment(void *self) {
    player_segment *arg1 = (player_segment *)self;
    delete arg1;
}

static swig_class SwigClassPlayer_extent2d_t;

SWIGINTERN VALUE
_wrap_player_extent2d_t_x0_set(int argc, VALUE *argv, VALUE self) {
  player_extent2d *arg1 = (player_extent2d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_extent2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_extent2d *","x0", 1, self )); 
  }
  arg1 = reinterpret_cast< player_extent2d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","x0", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->x0 = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_extent2d_t_x0_get(int argc, VALUE *argv, VALUE self) {
  player_extent2d *arg1 = (player_extent2d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_extent2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_extent2d *","x0", 1, self )); 
  }
  arg1 = reinterpret_cast< player_extent2d * >(argp1);
  result = (double) ((arg1)->x0);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_extent2d_t_y0_set(int argc, VALUE *argv, VALUE self) {
  player_extent2d *arg1 = (player_extent2d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_extent2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_extent2d *","y0", 1, self )); 
  }
  arg1 = reinterpret_cast< player_extent2d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","y0", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->y0 = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_extent2d_t_y0_get(int argc, VALUE *argv, VALUE self) {
  player_extent2d *arg1 = (player_extent2d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_extent2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_extent2d *","y0", 1, self )); 
  }
  arg1 = reinterpret_cast< player_extent2d * >(argp1);
  result = (double) ((arg1)->y0);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_extent2d_t_x1_set(int argc, VALUE *argv, VALUE self) {
  player_extent2d *arg1 = (player_extent2d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_extent2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_extent2d *","x1", 1, self )); 
  }
  arg1 = reinterpret_cast< player_extent2d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","x1", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->x1 = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_extent2d_t_x1_get(int argc, VALUE *argv, VALUE self) {
  player_extent2d *arg1 = (player_extent2d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_extent2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_extent2d *","x1", 1, self )); 
  }
  arg1 = reinterpret_cast< player_extent2d * >(argp1);
  result = (double) ((arg1)->x1);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_extent2d_t_y1_set(int argc, VALUE *argv, VALUE self) {
  player_extent2d *arg1 = (player_extent2d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_extent2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_extent2d *","y1", 1, self )); 
  }
  arg1 = reinterpret_cast< player_extent2d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","y1", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->y1 = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_extent2d_t_y1_get(int argc, VALUE *argv, VALUE self) {
  player_extent2d *arg1 = (player_extent2d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_extent2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_extent2d *","y1", 1, self )); 
  }
  arg1 = reinterpret_cast< player_extent2d * >(argp1);
  result = (double) ((arg1)->y1);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_player_extent2d_t_allocate(VALUE self)
#else
_wrap_player_extent2d_t_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_player_extent2d);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_player_extent2d_t(int argc, VALUE *argv, VALUE self) {
  player_extent2d *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (player_extent2d *)new player_extent2d();
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_player_extent2d(void *self) {
    player_extent2d *arg1 = (player_extent2d *)self;
    delete arg1;
}

static swig_class SwigClassPlayer_color_t;

SWIGINTERN VALUE
_wrap_player_color_t_alpha_set(int argc, VALUE *argv, VALUE self) {
  player_color *arg1 = (player_color *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_color *","alpha", 1, self )); 
  }
  arg1 = reinterpret_cast< player_color * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint8_t","alpha", 2, argv[0] ));
  } 
  arg2 = static_cast< uint8_t >(val2);
  if (arg1) (arg1)->alpha = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_color_t_alpha_get(int argc, VALUE *argv, VALUE self) {
  player_color *arg1 = (player_color *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_color *","alpha", 1, self )); 
  }
  arg1 = reinterpret_cast< player_color * >(argp1);
  result = (uint8_t) ((arg1)->alpha);
  vresult = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_color_t_red_set(int argc, VALUE *argv, VALUE self) {
  player_color *arg1 = (player_color *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_color *","red", 1, self )); 
  }
  arg1 = reinterpret_cast< player_color * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint8_t","red", 2, argv[0] ));
  } 
  arg2 = static_cast< uint8_t >(val2);
  if (arg1) (arg1)->red = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_color_t_red_get(int argc, VALUE *argv, VALUE self) {
  player_color *arg1 = (player_color *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_color *","red", 1, self )); 
  }
  arg1 = reinterpret_cast< player_color * >(argp1);
  result = (uint8_t) ((arg1)->red);
  vresult = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_color_t_green_set(int argc, VALUE *argv, VALUE self) {
  player_color *arg1 = (player_color *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_color *","green", 1, self )); 
  }
  arg1 = reinterpret_cast< player_color * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint8_t","green", 2, argv[0] ));
  } 
  arg2 = static_cast< uint8_t >(val2);
  if (arg1) (arg1)->green = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_color_t_green_get(int argc, VALUE *argv, VALUE self) {
  player_color *arg1 = (player_color *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_color *","green", 1, self )); 
  }
  arg1 = reinterpret_cast< player_color * >(argp1);
  result = (uint8_t) ((arg1)->green);
  vresult = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_color_t_blue_set(int argc, VALUE *argv, VALUE self) {
  player_color *arg1 = (player_color *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_color *","blue", 1, self )); 
  }
  arg1 = reinterpret_cast< player_color * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint8_t","blue", 2, argv[0] ));
  } 
  arg2 = static_cast< uint8_t >(val2);
  if (arg1) (arg1)->blue = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_color_t_blue_get(int argc, VALUE *argv, VALUE self) {
  player_color *arg1 = (player_color *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_color *","blue", 1, self )); 
  }
  arg1 = reinterpret_cast< player_color * >(argp1);
  result = (uint8_t) ((arg1)->blue);
  vresult = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_player_color_t_allocate(VALUE self)
#else
_wrap_player_color_t_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_player_color);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_player_color_t(int argc, VALUE *argv, VALUE self) {
  player_color *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (player_color *)new player_color();
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_player_color(void *self) {
    player_color *arg1 = (player_color *)self;
    delete arg1;
}

static swig_class SwigClassPlayer_bool_t;

SWIGINTERN VALUE
_wrap_player_bool_t_state_set(int argc, VALUE *argv, VALUE self) {
  player_bool *arg1 = (player_bool *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_bool, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_bool *","state", 1, self )); 
  }
  arg1 = reinterpret_cast< player_bool * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint8_t","state", 2, argv[0] ));
  } 
  arg2 = static_cast< uint8_t >(val2);
  if (arg1) (arg1)->state = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_bool_t_state_get(int argc, VALUE *argv, VALUE self) {
  player_bool *arg1 = (player_bool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_bool, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_bool *","state", 1, self )); 
  }
  arg1 = reinterpret_cast< player_bool * >(argp1);
  result = (uint8_t) ((arg1)->state);
  vresult = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_player_bool_t_allocate(VALUE self)
#else
_wrap_player_bool_t_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_player_bool);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_player_bool_t(int argc, VALUE *argv, VALUE self) {
  player_bool *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (player_bool *)new player_bool();
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_player_bool(void *self) {
    player_bool *arg1 = (player_bool *)self;
    delete arg1;
}

static swig_class SwigClassPlayer_uint32_t;

SWIGINTERN VALUE
_wrap_player_uint32_t_value_set(int argc, VALUE *argv, VALUE self) {
  player_uint32 *arg1 = (player_uint32 *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_uint32, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_uint32 *","value", 1, self )); 
  }
  arg1 = reinterpret_cast< player_uint32 * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","value", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->value = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_uint32_t_value_get(int argc, VALUE *argv, VALUE self) {
  player_uint32 *arg1 = (player_uint32 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_uint32, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_uint32 *","value", 1, self )); 
  }
  arg1 = reinterpret_cast< player_uint32 * >(argp1);
  result = (uint32_t) ((arg1)->value);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_player_uint32_t_allocate(VALUE self)
#else
_wrap_player_uint32_t_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_player_uint32);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_player_uint32_t(int argc, VALUE *argv, VALUE self) {
  player_uint32 *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (player_uint32 *)new player_uint32();
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_player_uint32(void *self) {
    player_uint32 *arg1 = (player_uint32 *)self;
    delete arg1;
}

static swig_class SwigClassPlayer_capabilities_req_t;

SWIGINTERN VALUE
_wrap_player_capabilities_req_t_type_set(int argc, VALUE *argv, VALUE self) {
  player_capabilities_req *arg1 = (player_capabilities_req *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_capabilities_req, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_capabilities_req *","type", 1, self )); 
  }
  arg1 = reinterpret_cast< player_capabilities_req * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","type", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->type = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_capabilities_req_t_type_get(int argc, VALUE *argv, VALUE self) {
  player_capabilities_req *arg1 = (player_capabilities_req *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_capabilities_req, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_capabilities_req *","type", 1, self )); 
  }
  arg1 = reinterpret_cast< player_capabilities_req * >(argp1);
  result = (uint32_t) ((arg1)->type);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_capabilities_req_t_subtype_set(int argc, VALUE *argv, VALUE self) {
  player_capabilities_req *arg1 = (player_capabilities_req *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_capabilities_req, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_capabilities_req *","subtype", 1, self )); 
  }
  arg1 = reinterpret_cast< player_capabilities_req * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","subtype", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->subtype = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_capabilities_req_t_subtype_get(int argc, VALUE *argv, VALUE self) {
  player_capabilities_req *arg1 = (player_capabilities_req *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_capabilities_req, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_capabilities_req *","subtype", 1, self )); 
  }
  arg1 = reinterpret_cast< player_capabilities_req * >(argp1);
  result = (uint32_t) ((arg1)->subtype);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_player_capabilities_req_t_allocate(VALUE self)
#else
_wrap_player_capabilities_req_t_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_player_capabilities_req);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_player_capabilities_req_t(int argc, VALUE *argv, VALUE self) {
  player_capabilities_req *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (player_capabilities_req *)new player_capabilities_req();
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_player_capabilities_req(void *self) {
    player_capabilities_req *arg1 = (player_capabilities_req *)self;
    delete arg1;
}

static swig_class SwigClassPlayer_boolprop_req_t;

SWIGINTERN VALUE
_wrap_player_boolprop_req_t_key_count_set(int argc, VALUE *argv, VALUE self) {
  player_boolprop_req *arg1 = (player_boolprop_req *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_boolprop_req, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_boolprop_req *","key_count", 1, self )); 
  }
  arg1 = reinterpret_cast< player_boolprop_req * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","key_count", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->key_count = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_boolprop_req_t_key_count_get(int argc, VALUE *argv, VALUE self) {
  player_boolprop_req *arg1 = (player_boolprop_req *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_boolprop_req, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_boolprop_req *","key_count", 1, self )); 
  }
  arg1 = reinterpret_cast< player_boolprop_req * >(argp1);
  result = (uint32_t) ((arg1)->key_count);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_boolprop_req_t_key_set(int argc, VALUE *argv, VALUE self) {
  player_boolprop_req *arg1 = (player_boolprop_req *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_boolprop_req, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_boolprop_req *","key", 1, self )); 
  }
  arg1 = reinterpret_cast< player_boolprop_req * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char *","key", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg1->key) delete[] arg1->key;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->key = (char *)reinterpret_cast< char* >(memcpy(new char[size], reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->key = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_boolprop_req_t_key_get(int argc, VALUE *argv, VALUE self) {
  player_boolprop_req *arg1 = (player_boolprop_req *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_boolprop_req, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_boolprop_req *","key", 1, self )); 
  }
  arg1 = reinterpret_cast< player_boolprop_req * >(argp1);
  result = (char *) ((arg1)->key);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_boolprop_req_t_value_set(int argc, VALUE *argv, VALUE self) {
  player_boolprop_req *arg1 = (player_boolprop_req *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_boolprop_req, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_boolprop_req *","value", 1, self )); 
  }
  arg1 = reinterpret_cast< player_boolprop_req * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "char","value", 2, argv[0] ));
  } 
  arg2 = static_cast< char >(val2);
  if (arg1) (arg1)->value = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_boolprop_req_t_value_get(int argc, VALUE *argv, VALUE self) {
  player_boolprop_req *arg1 = (player_boolprop_req *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_boolprop_req, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_boolprop_req *","value", 1, self )); 
  }
  arg1 = reinterpret_cast< player_boolprop_req * >(argp1);
  result = (char) ((arg1)->value);
  vresult = SWIG_From_char(static_cast< char >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_player_boolprop_req_t_allocate(VALUE self)
#else
_wrap_player_boolprop_req_t_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_player_boolprop_req);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_player_boolprop_req_t(int argc, VALUE *argv, VALUE self) {
  player_boolprop_req *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (player_boolprop_req *)new player_boolprop_req();
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_player_boolprop_req(void *self) {
    player_boolprop_req *arg1 = (player_boolprop_req *)self;
    delete arg1;
}

static swig_class SwigClassPlayer_intprop_req_t;

SWIGINTERN VALUE
_wrap_player_intprop_req_t_key_count_set(int argc, VALUE *argv, VALUE self) {
  player_intprop_req *arg1 = (player_intprop_req *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_intprop_req, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_intprop_req *","key_count", 1, self )); 
  }
  arg1 = reinterpret_cast< player_intprop_req * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","key_count", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->key_count = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_intprop_req_t_key_count_get(int argc, VALUE *argv, VALUE self) {
  player_intprop_req *arg1 = (player_intprop_req *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_intprop_req, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_intprop_req *","key_count", 1, self )); 
  }
  arg1 = reinterpret_cast< player_intprop_req * >(argp1);
  result = (uint32_t) ((arg1)->key_count);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_intprop_req_t_key_set(int argc, VALUE *argv, VALUE self) {
  player_intprop_req *arg1 = (player_intprop_req *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_intprop_req, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_intprop_req *","key", 1, self )); 
  }
  arg1 = reinterpret_cast< player_intprop_req * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char *","key", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg1->key) delete[] arg1->key;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->key = (char *)reinterpret_cast< char* >(memcpy(new char[size], reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->key = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_intprop_req_t_key_get(int argc, VALUE *argv, VALUE self) {
  player_intprop_req *arg1 = (player_intprop_req *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_intprop_req, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_intprop_req *","key", 1, self )); 
  }
  arg1 = reinterpret_cast< player_intprop_req * >(argp1);
  result = (char *) ((arg1)->key);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_intprop_req_t_value_set(int argc, VALUE *argv, VALUE self) {
  player_intprop_req *arg1 = (player_intprop_req *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_intprop_req, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_intprop_req *","value", 1, self )); 
  }
  arg1 = reinterpret_cast< player_intprop_req * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int32_t","value", 2, argv[0] ));
  } 
  arg2 = static_cast< int32_t >(val2);
  if (arg1) (arg1)->value = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_intprop_req_t_value_get(int argc, VALUE *argv, VALUE self) {
  player_intprop_req *arg1 = (player_intprop_req *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_intprop_req, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_intprop_req *","value", 1, self )); 
  }
  arg1 = reinterpret_cast< player_intprop_req * >(argp1);
  result = (int32_t) ((arg1)->value);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_player_intprop_req_t_allocate(VALUE self)
#else
_wrap_player_intprop_req_t_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_player_intprop_req);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_player_intprop_req_t(int argc, VALUE *argv, VALUE self) {
  player_intprop_req *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (player_intprop_req *)new player_intprop_req();
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_player_intprop_req(void *self) {
    player_intprop_req *arg1 = (player_intprop_req *)self;
    delete arg1;
}

static swig_class SwigClassPlayer_dblprop_req_t;

SWIGINTERN VALUE
_wrap_player_dblprop_req_t_key_count_set(int argc, VALUE *argv, VALUE self) {
  player_dblprop_req *arg1 = (player_dblprop_req *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_dblprop_req, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_dblprop_req *","key_count", 1, self )); 
  }
  arg1 = reinterpret_cast< player_dblprop_req * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","key_count", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->key_count = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_dblprop_req_t_key_count_get(int argc, VALUE *argv, VALUE self) {
  player_dblprop_req *arg1 = (player_dblprop_req *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_dblprop_req, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_dblprop_req *","key_count", 1, self )); 
  }
  arg1 = reinterpret_cast< player_dblprop_req * >(argp1);
  result = (uint32_t) ((arg1)->key_count);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_dblprop_req_t_key_set(int argc, VALUE *argv, VALUE self) {
  player_dblprop_req *arg1 = (player_dblprop_req *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_dblprop_req, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_dblprop_req *","key", 1, self )); 
  }
  arg1 = reinterpret_cast< player_dblprop_req * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char *","key", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg1->key) delete[] arg1->key;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->key = (char *)reinterpret_cast< char* >(memcpy(new char[size], reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->key = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_dblprop_req_t_key_get(int argc, VALUE *argv, VALUE self) {
  player_dblprop_req *arg1 = (player_dblprop_req *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_dblprop_req, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_dblprop_req *","key", 1, self )); 
  }
  arg1 = reinterpret_cast< player_dblprop_req * >(argp1);
  result = (char *) ((arg1)->key);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_dblprop_req_t_value_set(int argc, VALUE *argv, VALUE self) {
  player_dblprop_req *arg1 = (player_dblprop_req *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_dblprop_req, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_dblprop_req *","value", 1, self )); 
  }
  arg1 = reinterpret_cast< player_dblprop_req * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","value", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->value = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_dblprop_req_t_value_get(int argc, VALUE *argv, VALUE self) {
  player_dblprop_req *arg1 = (player_dblprop_req *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_dblprop_req, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_dblprop_req *","value", 1, self )); 
  }
  arg1 = reinterpret_cast< player_dblprop_req * >(argp1);
  result = (double) ((arg1)->value);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_player_dblprop_req_t_allocate(VALUE self)
#else
_wrap_player_dblprop_req_t_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_player_dblprop_req);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_player_dblprop_req_t(int argc, VALUE *argv, VALUE self) {
  player_dblprop_req *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (player_dblprop_req *)new player_dblprop_req();
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_player_dblprop_req(void *self) {
    player_dblprop_req *arg1 = (player_dblprop_req *)self;
    delete arg1;
}

static swig_class SwigClassPlayer_strprop_req_t;

SWIGINTERN VALUE
_wrap_player_strprop_req_t_key_count_set(int argc, VALUE *argv, VALUE self) {
  player_strprop_req *arg1 = (player_strprop_req *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_strprop_req, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_strprop_req *","key_count", 1, self )); 
  }
  arg1 = reinterpret_cast< player_strprop_req * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","key_count", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->key_count = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_strprop_req_t_key_count_get(int argc, VALUE *argv, VALUE self) {
  player_strprop_req *arg1 = (player_strprop_req *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_strprop_req, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_strprop_req *","key_count", 1, self )); 
  }
  arg1 = reinterpret_cast< player_strprop_req * >(argp1);
  result = (uint32_t) ((arg1)->key_count);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_strprop_req_t_key_set(int argc, VALUE *argv, VALUE self) {
  player_strprop_req *arg1 = (player_strprop_req *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_strprop_req, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_strprop_req *","key", 1, self )); 
  }
  arg1 = reinterpret_cast< player_strprop_req * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char *","key", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg1->key) delete[] arg1->key;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->key = (char *)reinterpret_cast< char* >(memcpy(new char[size], reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->key = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_strprop_req_t_key_get(int argc, VALUE *argv, VALUE self) {
  player_strprop_req *arg1 = (player_strprop_req *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_strprop_req, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_strprop_req *","key", 1, self )); 
  }
  arg1 = reinterpret_cast< player_strprop_req * >(argp1);
  result = (char *) ((arg1)->key);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_strprop_req_t_value_count_set(int argc, VALUE *argv, VALUE self) {
  player_strprop_req *arg1 = (player_strprop_req *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_strprop_req, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_strprop_req *","value_count", 1, self )); 
  }
  arg1 = reinterpret_cast< player_strprop_req * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32_t","value_count", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->value_count = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_strprop_req_t_value_count_get(int argc, VALUE *argv, VALUE self) {
  player_strprop_req *arg1 = (player_strprop_req *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_strprop_req, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_strprop_req *","value_count", 1, self )); 
  }
  arg1 = reinterpret_cast< player_strprop_req * >(argp1);
  result = (uint32_t) ((arg1)->value_count);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_strprop_req_t_value_set(int argc, VALUE *argv, VALUE self) {
  player_strprop_req *arg1 = (player_strprop_req *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_strprop_req, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_strprop_req *","value", 1, self )); 
  }
  arg1 = reinterpret_cast< player_strprop_req * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char *","value", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg1->value) delete[] arg1->value;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->value = (char *)reinterpret_cast< char* >(memcpy(new char[size], reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->value = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_player_strprop_req_t_value_get(int argc, VALUE *argv, VALUE self) {
  player_strprop_req *arg1 = (player_strprop_req *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_player_strprop_req, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "player_strprop_req *","value", 1, self )); 
  }
  arg1 = reinterpret_cast< player_strprop_req * >(argp1);
  result = (char *) ((arg1)->value);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_player_strprop_req_t_allocate(VALUE self)
#else
_wrap_player_strprop_req_t_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_player_strprop_req);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_player_strprop_req_t(int argc, VALUE *argv, VALUE self) {
  player_strprop_req *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (player_strprop_req *)new player_strprop_req();
      DATA_PTR(self) = result;
    }
    catch (const PlayerCc::PlayerError &e) {
      static VALUE playererror = rb_define_class("PlayerError", rb_eStandardError);
      rb_raise(playererror, e.GetErrorStr().c_str());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_player_strprop_req(void *self) {
    player_strprop_req *arg1 = (player_strprop_req *)self;
    delete arg1;
}


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_PlayerCc__SonarProxyTo_p_PlayerCc__ClientProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PlayerCc::ClientProxy *)  ((PlayerCc::SonarProxy *) x));
}
static void *_p_PlayerCc__RangerProxyTo_p_PlayerCc__ClientProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PlayerCc::ClientProxy *)  ((PlayerCc::RangerProxy *) x));
}
static void *_p_PlayerCc__PowerProxyTo_p_PlayerCc__ClientProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PlayerCc::ClientProxy *)  ((PlayerCc::PowerProxy *) x));
}
static void *_p_PlayerCc__PlannerProxyTo_p_PlayerCc__ClientProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PlayerCc::ClientProxy *)  ((PlayerCc::PlannerProxy *) x));
}
static void *_p_PlayerCc__LaserProxyTo_p_PlayerCc__ClientProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PlayerCc::ClientProxy *)  ((PlayerCc::LaserProxy *) x));
}
static void *_p_PlayerCc__IrProxyTo_p_PlayerCc__ClientProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PlayerCc::ClientProxy *)  ((PlayerCc::IrProxy *) x));
}
static void *_p_PlayerCc__BlobfinderProxyTo_p_PlayerCc__ClientProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PlayerCc::ClientProxy *)  ((PlayerCc::BlobfinderProxy *) x));
}
static void *_p_PlayerCc__BumperProxyTo_p_PlayerCc__ClientProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PlayerCc::ClientProxy *)  ((PlayerCc::BumperProxy *) x));
}
static void *_p_PlayerCc__GripperProxyTo_p_PlayerCc__ClientProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PlayerCc::ClientProxy *)  ((PlayerCc::GripperProxy *) x));
}
static void *_p_PlayerCc__LogProxyTo_p_PlayerCc__ClientProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PlayerCc::ClientProxy *)  ((PlayerCc::LogProxy *) x));
}
static void *_p_PlayerCc__CameraProxyTo_p_PlayerCc__ClientProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PlayerCc::ClientProxy *)  ((PlayerCc::CameraProxy *) x));
}
static void *_p_PlayerCc__WSNProxyTo_p_PlayerCc__ClientProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PlayerCc::ClientProxy *)  ((PlayerCc::WSNProxy *) x));
}
static void *_p_PlayerCc__LinuxjoystickProxyTo_p_PlayerCc__ClientProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PlayerCc::ClientProxy *)  ((PlayerCc::LinuxjoystickProxy *) x));
}
static void *_p_PlayerCc__LocalizeProxyTo_p_PlayerCc__ClientProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PlayerCc::ClientProxy *)  ((PlayerCc::LocalizeProxy *) x));
}
static void *_p_PlayerCc__LimbProxyTo_p_PlayerCc__ClientProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PlayerCc::ClientProxy *)  ((PlayerCc::LimbProxy *) x));
}
static void *_p_PlayerCc__AioProxyTo_p_PlayerCc__ClientProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PlayerCc::ClientProxy *)  ((PlayerCc::AioProxy *) x));
}
static void *_p_PlayerCc__AudioProxyTo_p_PlayerCc__ClientProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PlayerCc::ClientProxy *)  ((PlayerCc::AudioProxy *) x));
}
static void *_p_PlayerCc__DioProxyTo_p_PlayerCc__ClientProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PlayerCc::ClientProxy *)  ((PlayerCc::DioProxy *) x));
}
static void *_p_PlayerCc__Position3dProxyTo_p_PlayerCc__ClientProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PlayerCc::ClientProxy *)  ((PlayerCc::Position3dProxy *) x));
}
static void *_p_PlayerCc__Position1dProxyTo_p_PlayerCc__ClientProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PlayerCc::ClientProxy *)  ((PlayerCc::Position1dProxy *) x));
}
static void *_p_PlayerCc__Pointcloud3dProxyTo_p_PlayerCc__ClientProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PlayerCc::ClientProxy *)  ((PlayerCc::Pointcloud3dProxy *) x));
}
static void *_p_PlayerCc__Graphics3dProxyTo_p_PlayerCc__ClientProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PlayerCc::ClientProxy *)  ((PlayerCc::Graphics3dProxy *) x));
}
static void *_p_PlayerCc__WiFiProxyTo_p_PlayerCc__ClientProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PlayerCc::ClientProxy *)  ((PlayerCc::WiFiProxy *) x));
}
static void *_p_PlayerCc__SpeechProxyTo_p_PlayerCc__ClientProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PlayerCc::ClientProxy *)  ((PlayerCc::SpeechProxy *) x));
}
static void *_p_PlayerCc__PtzProxyTo_p_PlayerCc__ClientProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PlayerCc::ClientProxy *)  ((PlayerCc::PtzProxy *) x));
}
static void *_p_PlayerCc__ImuProxyTo_p_PlayerCc__ClientProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PlayerCc::ClientProxy *)  ((PlayerCc::ImuProxy *) x));
}
static void *_p_PlayerCc__RFIDProxyTo_p_PlayerCc__ClientProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PlayerCc::ClientProxy *)  ((PlayerCc::RFIDProxy *) x));
}
static void *_p_PlayerCc__Position2dProxyTo_p_PlayerCc__ClientProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PlayerCc::ClientProxy *)  ((PlayerCc::Position2dProxy *) x));
}
static void *_p_PlayerCc__BlackBoardProxyTo_p_PlayerCc__ClientProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PlayerCc::ClientProxy *)  ((PlayerCc::BlackBoardProxy *) x));
}
static void *_p_PlayerCc__Graphics2dProxyTo_p_PlayerCc__ClientProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PlayerCc::ClientProxy *)  ((PlayerCc::Graphics2dProxy *) x));
}
static void *_p_PlayerCc__FiducialProxyTo_p_PlayerCc__ClientProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PlayerCc::ClientProxy *)  ((PlayerCc::FiducialProxy *) x));
}
static void *_p_PlayerCc__ActArrayProxyTo_p_PlayerCc__ClientProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PlayerCc::ClientProxy *)  ((PlayerCc::ActArrayProxy *) x));
}
static void *_p_PlayerCc__GpsProxyTo_p_PlayerCc__ClientProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PlayerCc::ClientProxy *)  ((PlayerCc::GpsProxy *) x));
}
static void *_p_PlayerCc__SimulationProxyTo_p_PlayerCc__ClientProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PlayerCc::ClientProxy *)  ((PlayerCc::SimulationProxy *) x));
}
static void *_p_PlayerCc__SpeechRecognitionProxyTo_p_PlayerCc__ClientProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PlayerCc::ClientProxy *)  ((PlayerCc::SpeechRecognitionProxy *) x));
}
static void *_p_PlayerCc__HealthProxyTo_p_PlayerCc__ClientProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PlayerCc::ClientProxy *)  ((PlayerCc::HealthProxy *) x));
}
static void *_p_PlayerCc__MapProxyTo_p_PlayerCc__ClientProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PlayerCc::ClientProxy *)  ((PlayerCc::MapProxy *) x));
}
static void *_p_PlayerCc__VectorMapProxyTo_p_PlayerCc__ClientProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PlayerCc::ClientProxy *)  ((PlayerCc::VectorMapProxy *) x));
}
static void *_p_PlayerCc__OpaqueProxyTo_p_PlayerCc__ClientProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PlayerCc::ClientProxy *)  ((PlayerCc::OpaqueProxy *) x));
}
static void *_p_swig__IteratorTo_p_swig__ConstIterator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((swig::ConstIterator *)  ((swig::Iterator *) x));
}
static swig_type_info _swigt__p_PlayerCc__ActArrayProxy = {"_p_PlayerCc__ActArrayProxy", "PlayerCc::ActArrayProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__AioProxy = {"_p_PlayerCc__AioProxy", "PlayerCc::AioProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__AudioProxy = {"_p_PlayerCc__AudioProxy", "PlayerCc::AudioProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__BlackBoardProxy = {"_p_PlayerCc__BlackBoardProxy", "PlayerCc::BlackBoardProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__BlobfinderProxy = {"_p_PlayerCc__BlobfinderProxy", "PlayerCc::BlobfinderProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__BumperProxy = {"_p_PlayerCc__BumperProxy", "PlayerCc::BumperProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__CameraProxy = {"_p_PlayerCc__CameraProxy", "PlayerCc::CameraProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__ClientProxy = {"_p_PlayerCc__ClientProxy", "PlayerCc::ClientProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__DioProxy = {"_p_PlayerCc__DioProxy", "PlayerCc::DioProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__FiducialProxy = {"_p_PlayerCc__FiducialProxy", "PlayerCc::FiducialProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__GpsProxy = {"_p_PlayerCc__GpsProxy", "PlayerCc::GpsProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__Graphics2dProxy = {"_p_PlayerCc__Graphics2dProxy", "PlayerCc::Graphics2dProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__Graphics3dProxy = {"_p_PlayerCc__Graphics3dProxy", "PlayerCc::Graphics3dProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__GripperProxy = {"_p_PlayerCc__GripperProxy", "PlayerCc::GripperProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__HealthProxy = {"_p_PlayerCc__HealthProxy", "PlayerCc::HealthProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__ImuProxy = {"_p_PlayerCc__ImuProxy", "PlayerCc::ImuProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__IrProxy = {"_p_PlayerCc__IrProxy", "PlayerCc::IrProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__LaserProxy = {"_p_PlayerCc__LaserProxy", "PlayerCc::LaserProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__LimbProxy = {"_p_PlayerCc__LimbProxy", "PlayerCc::LimbProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__LinuxjoystickProxy = {"_p_PlayerCc__LinuxjoystickProxy", "PlayerCc::LinuxjoystickProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__LocalizeProxy = {"_p_PlayerCc__LocalizeProxy", "PlayerCc::LocalizeProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__LogProxy = {"_p_PlayerCc__LogProxy", "PlayerCc::LogProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__MapProxy = {"_p_PlayerCc__MapProxy", "PlayerCc::MapProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__OpaqueProxy = {"_p_PlayerCc__OpaqueProxy", "PlayerCc::OpaqueProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__PlannerProxy = {"_p_PlayerCc__PlannerProxy", "PlayerCc::PlannerProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__PlayerClient = {"_p_PlayerCc__PlayerClient", "PlayerCc::PlayerClient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__PlayerError = {"_p_PlayerCc__PlayerError", "PlayerCc::PlayerError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__Pointcloud3dProxy = {"_p_PlayerCc__Pointcloud3dProxy", "PlayerCc::Pointcloud3dProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__Position1dProxy = {"_p_PlayerCc__Position1dProxy", "PlayerCc::Position1dProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__Position2dProxy = {"_p_PlayerCc__Position2dProxy", "PlayerCc::Position2dProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__Position3dProxy = {"_p_PlayerCc__Position3dProxy", "PlayerCc::Position3dProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__PowerProxy = {"_p_PlayerCc__PowerProxy", "PlayerCc::PowerProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__PtzProxy = {"_p_PlayerCc__PtzProxy", "PlayerCc::PtzProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__RFIDProxy = {"_p_PlayerCc__RFIDProxy", "PlayerCc::RFIDProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__RangerProxy = {"_p_PlayerCc__RangerProxy", "PlayerCc::RangerProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__SimulationProxy = {"_p_PlayerCc__SimulationProxy", "PlayerCc::SimulationProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__SonarProxy = {"_p_PlayerCc__SonarProxy", "PlayerCc::SonarProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__SpeechProxy = {"_p_PlayerCc__SpeechProxy", "PlayerCc::SpeechProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__SpeechRecognitionProxy = {"_p_PlayerCc__SpeechRecognitionProxy", "PlayerCc::SpeechRecognitionProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__VectorMapProxy = {"_p_PlayerCc__VectorMapProxy", "PlayerCc::VectorMapProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__WSNProxy = {"_p_PlayerCc__WSNProxy", "PlayerCc::WSNProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerCc__WiFiProxy = {"_p_PlayerCc__WiFiProxy", "PlayerCc::WiFiProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__mutex = {"_p_boost__mutex", "boost::mutex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__thread = {"_p_boost__thread", "boost::thread *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_connection_t = {"_p_connection_t", "connection_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_playerc_blackboard_t_player_blackboard_entry__void = {"_p_f_p_playerc_blackboard_t_player_blackboard_entry__void", "void (*)(playerc_blackboard_t *,player_blackboard_entry)|void (*)(playerc_blackboard_t *,player_blackboard_entry_t)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|int32_t *|int_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|int64_t *|long long *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_player_actarray_actuator_t = {"_p_player_actarray_actuator_t", "player_actarray_actuator_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_player_actarray_actuatorgeom_t = {"_p_player_actarray_actuatorgeom_t", "player_actarray_actuatorgeom_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_player_audio_mixer_channel_detail_t = {"_p_player_audio_mixer_channel_detail_t", "player_audio_mixer_channel_detail_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_player_audio_mixer_channel_list_t = {"_p_player_audio_mixer_channel_list_t", "player_audio_mixer_channel_list_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_player_audio_mixer_channel_t = {"_p_player_audio_mixer_channel_t", "player_audio_mixer_channel_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_player_audio_seq_item_t = {"_p_player_audio_seq_item_t", "player_audio_seq_item_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_player_audio_seq_t = {"_p_player_audio_seq_t", "player_audio_seq_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_player_bbox2d = {"_p_player_bbox2d", "player_bbox2d *|player_bbox2d_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_player_bbox3d = {"_p_player_bbox3d", "player_bbox3d *|player_bbox3d_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_player_blackboard_entry = {"_p_player_blackboard_entry", "player_blackboard_entry *|player_blackboard_entry_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_player_bool = {"_p_player_bool", "player_bool *|player_bool_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_player_boolprop_req = {"_p_player_boolprop_req", "player_boolprop_req *|player_boolprop_req_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_player_bumper_define_t = {"_p_player_bumper_define_t", "player_bumper_define_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_player_capabilities_req = {"_p_player_capabilities_req", "player_capabilities_req_t *|player_capabilities_req *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_player_color = {"_p_player_color", "player_color_t *|player_color *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_player_dblprop_req = {"_p_player_dblprop_req", "player_dblprop_req *|player_dblprop_req_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_player_devaddr = {"_p_player_devaddr", "player_devaddr_t *|player_devaddr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_player_extent2d = {"_p_player_extent2d", "player_extent2d *|player_extent2d_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_player_fiducial_item_t = {"_p_player_fiducial_item_t", "player_fiducial_item_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_player_graphics3d_draw_mode_t = {"_p_player_graphics3d_draw_mode_t", "player_graphics3d_draw_mode_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_player_imu_data_calib_t = {"_p_player_imu_data_calib_t", "player_imu_data_calib_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_player_intprop_req = {"_p_player_intprop_req", "player_intprop_req *|player_intprop_req_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_player_limb_data_t = {"_p_player_limb_data_t", "player_limb_data_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_player_limb_geom_req_t = {"_p_player_limb_geom_req_t", "player_limb_geom_req_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_player_localize_hypoth_t = {"_p_player_localize_hypoth_t", "player_localize_hypoth_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_player_msghdr = {"_p_player_msghdr", "player_msghdr_t *|player_msghdr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_player_opaque_data_t = {"_p_player_opaque_data_t", "player_opaque_data_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_player_orientation_3d = {"_p_player_orientation_3d", "player_orientation_3d *|player_orientation_3d_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_player_point_2d = {"_p_player_point_2d", "player_point_2d *|player_point_2d_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_player_point_3d = {"_p_player_point_3d", "player_point_3d *|player_point_3d_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_player_pointcloud3d_element_t = {"_p_player_pointcloud3d_element_t", "player_pointcloud3d_element_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_player_pose2d = {"_p_player_pose2d", "player_pose2d *|player_pose2d_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_player_pose3d = {"_p_player_pose3d", "player_pose3d *|player_pose3d_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_player_segment = {"_p_player_segment", "player_segment_t *|player_segment *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_player_strprop_req = {"_p_player_strprop_req", "player_strprop_req *|player_strprop_req_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_player_uint32 = {"_p_player_uint32", "player_uint32 *|player_uint32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_player_wsn_node_data_t = {"_p_player_wsn_node_data_t", "player_wsn_node_data_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_playerc_blobfinder_blob_t = {"_p_playerc_blobfinder_blob_t", "playerc_blobfinder_blob_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_playerc_device_info_t = {"_p_playerc_device_info_t", "playerc_device_info_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_playerc_rfidtag_t = {"_p_playerc_rfidtag_t", "playerc_rfidtag_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_playerc_wifi_link_t = {"_p_playerc_wifi_link_t", "playerc_wifi_link_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_read_signal_t = {"_p_read_signal_t", "read_signal_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_scoped_lock_t = {"_p_scoped_lock_t", "scoped_lock_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_playerc_device_info_t_t = {"_p_std__listT_playerc_device_info_t_t", "std::list< playerc_device_info_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ostream = {"_p_std__ostream", "std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_float_std__allocatorT_float_t_t = {"_p_std__vectorT_float_std__allocatorT_float_t_t", "std::vector< float,std::allocator< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t = {"_p_std__vectorT_std__string_std__allocatorT_std__string_t_t", "std::vector< std::string,std::allocator< std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__ConstIterator = {"_p_swig__ConstIterator", "swig::ConstIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__GC_VALUE = {"_p_swig__GC_VALUE", "swig::GC_VALUE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__Iterator = {"_p_swig__Iterator", "swig::Iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|unsigned int *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|unsigned long long *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "VALUE|void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_PlayerCc__ActArrayProxy,
  &_swigt__p_PlayerCc__AioProxy,
  &_swigt__p_PlayerCc__AudioProxy,
  &_swigt__p_PlayerCc__BlackBoardProxy,
  &_swigt__p_PlayerCc__BlobfinderProxy,
  &_swigt__p_PlayerCc__BumperProxy,
  &_swigt__p_PlayerCc__CameraProxy,
  &_swigt__p_PlayerCc__ClientProxy,
  &_swigt__p_PlayerCc__DioProxy,
  &_swigt__p_PlayerCc__FiducialProxy,
  &_swigt__p_PlayerCc__GpsProxy,
  &_swigt__p_PlayerCc__Graphics2dProxy,
  &_swigt__p_PlayerCc__Graphics3dProxy,
  &_swigt__p_PlayerCc__GripperProxy,
  &_swigt__p_PlayerCc__HealthProxy,
  &_swigt__p_PlayerCc__ImuProxy,
  &_swigt__p_PlayerCc__IrProxy,
  &_swigt__p_PlayerCc__LaserProxy,
  &_swigt__p_PlayerCc__LimbProxy,
  &_swigt__p_PlayerCc__LinuxjoystickProxy,
  &_swigt__p_PlayerCc__LocalizeProxy,
  &_swigt__p_PlayerCc__LogProxy,
  &_swigt__p_PlayerCc__MapProxy,
  &_swigt__p_PlayerCc__OpaqueProxy,
  &_swigt__p_PlayerCc__PlannerProxy,
  &_swigt__p_PlayerCc__PlayerClient,
  &_swigt__p_PlayerCc__PlayerError,
  &_swigt__p_PlayerCc__Pointcloud3dProxy,
  &_swigt__p_PlayerCc__Position1dProxy,
  &_swigt__p_PlayerCc__Position2dProxy,
  &_swigt__p_PlayerCc__Position3dProxy,
  &_swigt__p_PlayerCc__PowerProxy,
  &_swigt__p_PlayerCc__PtzProxy,
  &_swigt__p_PlayerCc__RFIDProxy,
  &_swigt__p_PlayerCc__RangerProxy,
  &_swigt__p_PlayerCc__SimulationProxy,
  &_swigt__p_PlayerCc__SonarProxy,
  &_swigt__p_PlayerCc__SpeechProxy,
  &_swigt__p_PlayerCc__SpeechRecognitionProxy,
  &_swigt__p_PlayerCc__VectorMapProxy,
  &_swigt__p_PlayerCc__WSNProxy,
  &_swigt__p_PlayerCc__WiFiProxy,
  &_swigt__p_bool,
  &_swigt__p_boost__mutex,
  &_swigt__p_boost__thread,
  &_swigt__p_char,
  &_swigt__p_connection_t,
  &_swigt__p_double,
  &_swigt__p_f_p_playerc_blackboard_t_player_blackboard_entry__void,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_p_char,
  &_swigt__p_player_actarray_actuator_t,
  &_swigt__p_player_actarray_actuatorgeom_t,
  &_swigt__p_player_audio_mixer_channel_detail_t,
  &_swigt__p_player_audio_mixer_channel_list_t,
  &_swigt__p_player_audio_mixer_channel_t,
  &_swigt__p_player_audio_seq_item_t,
  &_swigt__p_player_audio_seq_t,
  &_swigt__p_player_bbox2d,
  &_swigt__p_player_bbox3d,
  &_swigt__p_player_blackboard_entry,
  &_swigt__p_player_bool,
  &_swigt__p_player_boolprop_req,
  &_swigt__p_player_bumper_define_t,
  &_swigt__p_player_capabilities_req,
  &_swigt__p_player_color,
  &_swigt__p_player_dblprop_req,
  &_swigt__p_player_devaddr,
  &_swigt__p_player_extent2d,
  &_swigt__p_player_fiducial_item_t,
  &_swigt__p_player_graphics3d_draw_mode_t,
  &_swigt__p_player_imu_data_calib_t,
  &_swigt__p_player_intprop_req,
  &_swigt__p_player_limb_data_t,
  &_swigt__p_player_limb_geom_req_t,
  &_swigt__p_player_localize_hypoth_t,
  &_swigt__p_player_msghdr,
  &_swigt__p_player_opaque_data_t,
  &_swigt__p_player_orientation_3d,
  &_swigt__p_player_point_2d,
  &_swigt__p_player_point_3d,
  &_swigt__p_player_pointcloud3d_element_t,
  &_swigt__p_player_pose2d,
  &_swigt__p_player_pose3d,
  &_swigt__p_player_segment,
  &_swigt__p_player_strprop_req,
  &_swigt__p_player_uint32,
  &_swigt__p_player_wsn_node_data_t,
  &_swigt__p_playerc_blobfinder_blob_t,
  &_swigt__p_playerc_device_info_t,
  &_swigt__p_playerc_rfidtag_t,
  &_swigt__p_playerc_wifi_link_t,
  &_swigt__p_read_signal_t,
  &_swigt__p_scoped_lock_t,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_std__listT_playerc_device_info_t_t,
  &_swigt__p_std__ostream,
  &_swigt__p_std__vectorT_float_std__allocatorT_float_t_t,
  &_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  &_swigt__p_swig__ConstIterator,
  &_swigt__p_swig__GC_VALUE,
  &_swigt__p_swig__Iterator,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_PlayerCc__ActArrayProxy[] = {  {&_swigt__p_PlayerCc__ActArrayProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__AioProxy[] = {  {&_swigt__p_PlayerCc__AioProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__AudioProxy[] = {  {&_swigt__p_PlayerCc__AudioProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__BlackBoardProxy[] = {  {&_swigt__p_PlayerCc__BlackBoardProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__BlobfinderProxy[] = {  {&_swigt__p_PlayerCc__BlobfinderProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__BumperProxy[] = {  {&_swigt__p_PlayerCc__BumperProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__CameraProxy[] = {  {&_swigt__p_PlayerCc__CameraProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__ClientProxy[] = {  {&_swigt__p_PlayerCc__SonarProxy, _p_PlayerCc__SonarProxyTo_p_PlayerCc__ClientProxy, 0, 0},  {&_swigt__p_PlayerCc__RangerProxy, _p_PlayerCc__RangerProxyTo_p_PlayerCc__ClientProxy, 0, 0},  {&_swigt__p_PlayerCc__PowerProxy, _p_PlayerCc__PowerProxyTo_p_PlayerCc__ClientProxy, 0, 0},  {&_swigt__p_PlayerCc__PlannerProxy, _p_PlayerCc__PlannerProxyTo_p_PlayerCc__ClientProxy, 0, 0},  {&_swigt__p_PlayerCc__LaserProxy, _p_PlayerCc__LaserProxyTo_p_PlayerCc__ClientProxy, 0, 0},  {&_swigt__p_PlayerCc__IrProxy, _p_PlayerCc__IrProxyTo_p_PlayerCc__ClientProxy, 0, 0},  {&_swigt__p_PlayerCc__BlobfinderProxy, _p_PlayerCc__BlobfinderProxyTo_p_PlayerCc__ClientProxy, 0, 0},  {&_swigt__p_PlayerCc__BumperProxy, _p_PlayerCc__BumperProxyTo_p_PlayerCc__ClientProxy, 0, 0},  {&_swigt__p_PlayerCc__GripperProxy, _p_PlayerCc__GripperProxyTo_p_PlayerCc__ClientProxy, 0, 0},  {&_swigt__p_PlayerCc__LogProxy, _p_PlayerCc__LogProxyTo_p_PlayerCc__ClientProxy, 0, 0},  {&_swigt__p_PlayerCc__CameraProxy, _p_PlayerCc__CameraProxyTo_p_PlayerCc__ClientProxy, 0, 0},  {&_swigt__p_PlayerCc__WSNProxy, _p_PlayerCc__WSNProxyTo_p_PlayerCc__ClientProxy, 0, 0},  {&_swigt__p_PlayerCc__LinuxjoystickProxy, _p_PlayerCc__LinuxjoystickProxyTo_p_PlayerCc__ClientProxy, 0, 0},  {&_swigt__p_PlayerCc__LocalizeProxy, _p_PlayerCc__LocalizeProxyTo_p_PlayerCc__ClientProxy, 0, 0},  {&_swigt__p_PlayerCc__LimbProxy, _p_PlayerCc__LimbProxyTo_p_PlayerCc__ClientProxy, 0, 0},  {&_swigt__p_PlayerCc__ClientProxy, 0, 0, 0},  {&_swigt__p_PlayerCc__AioProxy, _p_PlayerCc__AioProxyTo_p_PlayerCc__ClientProxy, 0, 0},  {&_swigt__p_PlayerCc__AudioProxy, _p_PlayerCc__AudioProxyTo_p_PlayerCc__ClientProxy, 0, 0},  {&_swigt__p_PlayerCc__DioProxy, _p_PlayerCc__DioProxyTo_p_PlayerCc__ClientProxy, 0, 0},  {&_swigt__p_PlayerCc__WiFiProxy, _p_PlayerCc__WiFiProxyTo_p_PlayerCc__ClientProxy, 0, 0},  {&_swigt__p_PlayerCc__Position3dProxy, _p_PlayerCc__Position3dProxyTo_p_PlayerCc__ClientProxy, 0, 0},  {&_swigt__p_PlayerCc__Position1dProxy, _p_PlayerCc__Position1dProxyTo_p_PlayerCc__ClientProxy, 0, 0},  {&_swigt__p_PlayerCc__Pointcloud3dProxy, _p_PlayerCc__Pointcloud3dProxyTo_p_PlayerCc__ClientProxy, 0, 0},  {&_swigt__p_PlayerCc__Graphics3dProxy, _p_PlayerCc__Graphics3dProxyTo_p_PlayerCc__ClientProxy, 0, 0},  {&_swigt__p_PlayerCc__SpeechProxy, _p_PlayerCc__SpeechProxyTo_p_PlayerCc__ClientProxy, 0, 0},  {&_swigt__p_PlayerCc__PtzProxy, _p_PlayerCc__PtzProxyTo_p_PlayerCc__ClientProxy, 0, 0},  {&_swigt__p_PlayerCc__ImuProxy, _p_PlayerCc__ImuProxyTo_p_PlayerCc__ClientProxy, 0, 0},  {&_swigt__p_PlayerCc__RFIDProxy, _p_PlayerCc__RFIDProxyTo_p_PlayerCc__ClientProxy, 0, 0},  {&_swigt__p_PlayerCc__Position2dProxy, _p_PlayerCc__Position2dProxyTo_p_PlayerCc__ClientProxy, 0, 0},  {&_swigt__p_PlayerCc__BlackBoardProxy, _p_PlayerCc__BlackBoardProxyTo_p_PlayerCc__ClientProxy, 0, 0},  {&_swigt__p_PlayerCc__Graphics2dProxy, _p_PlayerCc__Graphics2dProxyTo_p_PlayerCc__ClientProxy, 0, 0},  {&_swigt__p_PlayerCc__FiducialProxy, _p_PlayerCc__FiducialProxyTo_p_PlayerCc__ClientProxy, 0, 0},  {&_swigt__p_PlayerCc__ActArrayProxy, _p_PlayerCc__ActArrayProxyTo_p_PlayerCc__ClientProxy, 0, 0},  {&_swigt__p_PlayerCc__GpsProxy, _p_PlayerCc__GpsProxyTo_p_PlayerCc__ClientProxy, 0, 0},  {&_swigt__p_PlayerCc__SimulationProxy, _p_PlayerCc__SimulationProxyTo_p_PlayerCc__ClientProxy, 0, 0},  {&_swigt__p_PlayerCc__SpeechRecognitionProxy, _p_PlayerCc__SpeechRecognitionProxyTo_p_PlayerCc__ClientProxy, 0, 0},  {&_swigt__p_PlayerCc__HealthProxy, _p_PlayerCc__HealthProxyTo_p_PlayerCc__ClientProxy, 0, 0},  {&_swigt__p_PlayerCc__MapProxy, _p_PlayerCc__MapProxyTo_p_PlayerCc__ClientProxy, 0, 0},  {&_swigt__p_PlayerCc__VectorMapProxy, _p_PlayerCc__VectorMapProxyTo_p_PlayerCc__ClientProxy, 0, 0},  {&_swigt__p_PlayerCc__OpaqueProxy, _p_PlayerCc__OpaqueProxyTo_p_PlayerCc__ClientProxy, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__DioProxy[] = {  {&_swigt__p_PlayerCc__DioProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__FiducialProxy[] = {  {&_swigt__p_PlayerCc__FiducialProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__GpsProxy[] = {  {&_swigt__p_PlayerCc__GpsProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__Graphics2dProxy[] = {  {&_swigt__p_PlayerCc__Graphics2dProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__Graphics3dProxy[] = {  {&_swigt__p_PlayerCc__Graphics3dProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__GripperProxy[] = {  {&_swigt__p_PlayerCc__GripperProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__HealthProxy[] = {  {&_swigt__p_PlayerCc__HealthProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__ImuProxy[] = {  {&_swigt__p_PlayerCc__ImuProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__IrProxy[] = {  {&_swigt__p_PlayerCc__IrProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__LaserProxy[] = {  {&_swigt__p_PlayerCc__LaserProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__LimbProxy[] = {  {&_swigt__p_PlayerCc__LimbProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__LinuxjoystickProxy[] = {  {&_swigt__p_PlayerCc__LinuxjoystickProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__LocalizeProxy[] = {  {&_swigt__p_PlayerCc__LocalizeProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__LogProxy[] = {  {&_swigt__p_PlayerCc__LogProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__MapProxy[] = {  {&_swigt__p_PlayerCc__MapProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__OpaqueProxy[] = {  {&_swigt__p_PlayerCc__OpaqueProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__PlannerProxy[] = {  {&_swigt__p_PlayerCc__PlannerProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__PlayerClient[] = {  {&_swigt__p_PlayerCc__PlayerClient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__PlayerError[] = {  {&_swigt__p_PlayerCc__PlayerError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__Pointcloud3dProxy[] = {  {&_swigt__p_PlayerCc__Pointcloud3dProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__Position1dProxy[] = {  {&_swigt__p_PlayerCc__Position1dProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__Position2dProxy[] = {  {&_swigt__p_PlayerCc__Position2dProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__Position3dProxy[] = {  {&_swigt__p_PlayerCc__Position3dProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__PowerProxy[] = {  {&_swigt__p_PlayerCc__PowerProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__PtzProxy[] = {  {&_swigt__p_PlayerCc__PtzProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__RFIDProxy[] = {  {&_swigt__p_PlayerCc__RFIDProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__RangerProxy[] = {  {&_swigt__p_PlayerCc__RangerProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__SimulationProxy[] = {  {&_swigt__p_PlayerCc__SimulationProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__SonarProxy[] = {  {&_swigt__p_PlayerCc__SonarProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__SpeechProxy[] = {  {&_swigt__p_PlayerCc__SpeechProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__SpeechRecognitionProxy[] = {  {&_swigt__p_PlayerCc__SpeechRecognitionProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__VectorMapProxy[] = {  {&_swigt__p_PlayerCc__VectorMapProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__WSNProxy[] = {  {&_swigt__p_PlayerCc__WSNProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerCc__WiFiProxy[] = {  {&_swigt__p_PlayerCc__WiFiProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__mutex[] = {  {&_swigt__p_boost__mutex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__thread[] = {  {&_swigt__p_boost__thread, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_connection_t[] = {  {&_swigt__p_connection_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_playerc_blackboard_t_player_blackboard_entry__void[] = {  {&_swigt__p_f_p_playerc_blackboard_t_player_blackboard_entry__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_player_actarray_actuator_t[] = {  {&_swigt__p_player_actarray_actuator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_player_actarray_actuatorgeom_t[] = {  {&_swigt__p_player_actarray_actuatorgeom_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_player_audio_mixer_channel_detail_t[] = {  {&_swigt__p_player_audio_mixer_channel_detail_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_player_audio_mixer_channel_list_t[] = {  {&_swigt__p_player_audio_mixer_channel_list_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_player_audio_mixer_channel_t[] = {  {&_swigt__p_player_audio_mixer_channel_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_player_audio_seq_item_t[] = {  {&_swigt__p_player_audio_seq_item_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_player_audio_seq_t[] = {  {&_swigt__p_player_audio_seq_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_player_bbox2d[] = {  {&_swigt__p_player_bbox2d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_player_bbox3d[] = {  {&_swigt__p_player_bbox3d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_player_blackboard_entry[] = {  {&_swigt__p_player_blackboard_entry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_player_bool[] = {  {&_swigt__p_player_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_player_boolprop_req[] = {  {&_swigt__p_player_boolprop_req, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_player_bumper_define_t[] = {  {&_swigt__p_player_bumper_define_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_player_capabilities_req[] = {  {&_swigt__p_player_capabilities_req, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_player_color[] = {  {&_swigt__p_player_color, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_player_dblprop_req[] = {  {&_swigt__p_player_dblprop_req, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_player_devaddr[] = {  {&_swigt__p_player_devaddr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_player_extent2d[] = {  {&_swigt__p_player_extent2d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_player_fiducial_item_t[] = {  {&_swigt__p_player_fiducial_item_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_player_graphics3d_draw_mode_t[] = {  {&_swigt__p_player_graphics3d_draw_mode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_player_imu_data_calib_t[] = {  {&_swigt__p_player_imu_data_calib_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_player_intprop_req[] = {  {&_swigt__p_player_intprop_req, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_player_limb_data_t[] = {  {&_swigt__p_player_limb_data_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_player_limb_geom_req_t[] = {  {&_swigt__p_player_limb_geom_req_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_player_localize_hypoth_t[] = {  {&_swigt__p_player_localize_hypoth_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_player_msghdr[] = {  {&_swigt__p_player_msghdr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_player_opaque_data_t[] = {  {&_swigt__p_player_opaque_data_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_player_orientation_3d[] = {  {&_swigt__p_player_orientation_3d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_player_point_2d[] = {  {&_swigt__p_player_point_2d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_player_point_3d[] = {  {&_swigt__p_player_point_3d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_player_pointcloud3d_element_t[] = {  {&_swigt__p_player_pointcloud3d_element_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_player_pose2d[] = {  {&_swigt__p_player_pose2d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_player_pose3d[] = {  {&_swigt__p_player_pose3d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_player_segment[] = {  {&_swigt__p_player_segment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_player_strprop_req[] = {  {&_swigt__p_player_strprop_req, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_player_uint32[] = {  {&_swigt__p_player_uint32, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_player_wsn_node_data_t[] = {  {&_swigt__p_player_wsn_node_data_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_playerc_blobfinder_blob_t[] = {  {&_swigt__p_playerc_blobfinder_blob_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_playerc_device_info_t[] = {  {&_swigt__p_playerc_device_info_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_playerc_rfidtag_t[] = {  {&_swigt__p_playerc_rfidtag_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_playerc_wifi_link_t[] = {  {&_swigt__p_playerc_wifi_link_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_read_signal_t[] = {  {&_swigt__p_read_signal_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_scoped_lock_t[] = {  {&_swigt__p_scoped_lock_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_playerc_device_info_t_t[] = {  {&_swigt__p_std__listT_playerc_device_info_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ostream[] = {  {&_swigt__p_std__ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_std__allocatorT_float_t_t[] = {  {&_swigt__p_std__vectorT_float_std__allocatorT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__ConstIterator[] = {  {&_swigt__p_swig__ConstIterator, 0, 0, 0},  {&_swigt__p_swig__Iterator, _p_swig__IteratorTo_p_swig__ConstIterator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__GC_VALUE[] = {  {&_swigt__p_swig__GC_VALUE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__Iterator[] = {  {&_swigt__p_swig__Iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_PlayerCc__ActArrayProxy,
  _swigc__p_PlayerCc__AioProxy,
  _swigc__p_PlayerCc__AudioProxy,
  _swigc__p_PlayerCc__BlackBoardProxy,
  _swigc__p_PlayerCc__BlobfinderProxy,
  _swigc__p_PlayerCc__BumperProxy,
  _swigc__p_PlayerCc__CameraProxy,
  _swigc__p_PlayerCc__ClientProxy,
  _swigc__p_PlayerCc__DioProxy,
  _swigc__p_PlayerCc__FiducialProxy,
  _swigc__p_PlayerCc__GpsProxy,
  _swigc__p_PlayerCc__Graphics2dProxy,
  _swigc__p_PlayerCc__Graphics3dProxy,
  _swigc__p_PlayerCc__GripperProxy,
  _swigc__p_PlayerCc__HealthProxy,
  _swigc__p_PlayerCc__ImuProxy,
  _swigc__p_PlayerCc__IrProxy,
  _swigc__p_PlayerCc__LaserProxy,
  _swigc__p_PlayerCc__LimbProxy,
  _swigc__p_PlayerCc__LinuxjoystickProxy,
  _swigc__p_PlayerCc__LocalizeProxy,
  _swigc__p_PlayerCc__LogProxy,
  _swigc__p_PlayerCc__MapProxy,
  _swigc__p_PlayerCc__OpaqueProxy,
  _swigc__p_PlayerCc__PlannerProxy,
  _swigc__p_PlayerCc__PlayerClient,
  _swigc__p_PlayerCc__PlayerError,
  _swigc__p_PlayerCc__Pointcloud3dProxy,
  _swigc__p_PlayerCc__Position1dProxy,
  _swigc__p_PlayerCc__Position2dProxy,
  _swigc__p_PlayerCc__Position3dProxy,
  _swigc__p_PlayerCc__PowerProxy,
  _swigc__p_PlayerCc__PtzProxy,
  _swigc__p_PlayerCc__RFIDProxy,
  _swigc__p_PlayerCc__RangerProxy,
  _swigc__p_PlayerCc__SimulationProxy,
  _swigc__p_PlayerCc__SonarProxy,
  _swigc__p_PlayerCc__SpeechProxy,
  _swigc__p_PlayerCc__SpeechRecognitionProxy,
  _swigc__p_PlayerCc__VectorMapProxy,
  _swigc__p_PlayerCc__WSNProxy,
  _swigc__p_PlayerCc__WiFiProxy,
  _swigc__p_bool,
  _swigc__p_boost__mutex,
  _swigc__p_boost__thread,
  _swigc__p_char,
  _swigc__p_connection_t,
  _swigc__p_double,
  _swigc__p_f_p_playerc_blackboard_t_player_blackboard_entry__void,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_p_char,
  _swigc__p_player_actarray_actuator_t,
  _swigc__p_player_actarray_actuatorgeom_t,
  _swigc__p_player_audio_mixer_channel_detail_t,
  _swigc__p_player_audio_mixer_channel_list_t,
  _swigc__p_player_audio_mixer_channel_t,
  _swigc__p_player_audio_seq_item_t,
  _swigc__p_player_audio_seq_t,
  _swigc__p_player_bbox2d,
  _swigc__p_player_bbox3d,
  _swigc__p_player_blackboard_entry,
  _swigc__p_player_bool,
  _swigc__p_player_boolprop_req,
  _swigc__p_player_bumper_define_t,
  _swigc__p_player_capabilities_req,
  _swigc__p_player_color,
  _swigc__p_player_dblprop_req,
  _swigc__p_player_devaddr,
  _swigc__p_player_extent2d,
  _swigc__p_player_fiducial_item_t,
  _swigc__p_player_graphics3d_draw_mode_t,
  _swigc__p_player_imu_data_calib_t,
  _swigc__p_player_intprop_req,
  _swigc__p_player_limb_data_t,
  _swigc__p_player_limb_geom_req_t,
  _swigc__p_player_localize_hypoth_t,
  _swigc__p_player_msghdr,
  _swigc__p_player_opaque_data_t,
  _swigc__p_player_orientation_3d,
  _swigc__p_player_point_2d,
  _swigc__p_player_point_3d,
  _swigc__p_player_pointcloud3d_element_t,
  _swigc__p_player_pose2d,
  _swigc__p_player_pose3d,
  _swigc__p_player_segment,
  _swigc__p_player_strprop_req,
  _swigc__p_player_uint32,
  _swigc__p_player_wsn_node_data_t,
  _swigc__p_playerc_blobfinder_blob_t,
  _swigc__p_playerc_device_info_t,
  _swigc__p_playerc_rfidtag_t,
  _swigc__p_playerc_wifi_link_t,
  _swigc__p_read_signal_t,
  _swigc__p_scoped_lock_t,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_std__listT_playerc_device_info_t_t,
  _swigc__p_std__ostream,
  _swigc__p_std__vectorT_float_std__allocatorT_float_t_t,
  _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  _swigc__p_swig__ConstIterator,
  _swigc__p_swig__GC_VALUE,
  _swigc__p_swig__Iterator,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif

/*

*/
#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void Init_playercpp(void) {
  size_t i;
  
  SWIG_InitRuntime();
  mPlayercpp = rb_define_module("Playercpp");
  
  SWIG_InitializeModule(0);
  for (i = 0; i < swig_module.size; i++) {
    SWIG_define_class(swig_module.types[i]);
  }
  
  SWIG_RubyInitializeTrackings();
  
  SwigClassGC_VALUE.klass = rb_define_class_under(mPlayercpp, "GC_VALUE", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_swig__GC_VALUE, (void *) &SwigClassGC_VALUE);
  rb_undef_alloc_func(SwigClassGC_VALUE.klass);
  rb_define_method(SwigClassGC_VALUE.klass, "inspect", VALUEFUNC(_wrap_GC_VALUE_inspect), -1);
  rb_define_method(SwigClassGC_VALUE.klass, "to_s", VALUEFUNC(_wrap_GC_VALUE_to_s), -1);
  SwigClassGC_VALUE.mark = 0;
  SwigClassGC_VALUE.trackObjects = 0;
  
  swig::SwigGCReferences::initialize();
  
  
  SwigClassConstIterator.klass = rb_define_class_under(mPlayercpp, "ConstIterator", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_swig__ConstIterator, (void *) &SwigClassConstIterator);
  rb_undef_alloc_func(SwigClassConstIterator.klass);
  rb_define_method(SwigClassConstIterator.klass, "value", VALUEFUNC(_wrap_ConstIterator_value), -1);
  rb_define_method(SwigClassConstIterator.klass, "dup", VALUEFUNC(_wrap_ConstIterator_dup), -1);
  rb_define_method(SwigClassConstIterator.klass, "inspect", VALUEFUNC(_wrap_ConstIterator_inspect), -1);
  rb_define_method(SwigClassConstIterator.klass, "to_s", VALUEFUNC(_wrap_ConstIterator_to_s), -1);
  rb_define_method(SwigClassConstIterator.klass, "next", VALUEFUNC(_wrap_ConstIterator_next), -1);
  rb_define_method(SwigClassConstIterator.klass, "previous", VALUEFUNC(_wrap_ConstIterator_previous), -1);
  rb_define_method(SwigClassConstIterator.klass, "==", VALUEFUNC(_wrap_ConstIterator___eq__), -1);
  rb_define_method(SwigClassConstIterator.klass, "+", VALUEFUNC(_wrap_ConstIterator___add__), -1);
  rb_define_method(SwigClassConstIterator.klass, "-", VALUEFUNC(_wrap_ConstIterator___sub__), -1);
  SwigClassConstIterator.mark = 0;
  SwigClassConstIterator.destroy = (void (*)(void *)) free_swig_ConstIterator;
  SwigClassConstIterator.trackObjects = 0;
  
  SwigClassIterator.klass = rb_define_class_under(mPlayercpp, "Iterator", ((swig_class *) SWIGTYPE_p_swig__ConstIterator->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_swig__Iterator, (void *) &SwigClassIterator);
  rb_undef_alloc_func(SwigClassIterator.klass);
  rb_define_method(SwigClassIterator.klass, "value=", VALUEFUNC(_wrap_Iterator_valuee___), -1);
  rb_define_method(SwigClassIterator.klass, "dup", VALUEFUNC(_wrap_Iterator_dup), -1);
  rb_define_method(SwigClassIterator.klass, "next", VALUEFUNC(_wrap_Iterator_next), -1);
  rb_define_method(SwigClassIterator.klass, "previous", VALUEFUNC(_wrap_Iterator_previous), -1);
  rb_define_method(SwigClassIterator.klass, "inspect", VALUEFUNC(_wrap_Iterator_inspect), -1);
  rb_define_method(SwigClassIterator.klass, "to_s", VALUEFUNC(_wrap_Iterator_to_s), -1);
  rb_define_method(SwigClassIterator.klass, "==", VALUEFUNC(_wrap_Iterator___eq__), -1);
  rb_define_method(SwigClassIterator.klass, "+", VALUEFUNC(_wrap_Iterator___add__), -1);
  rb_define_method(SwigClassIterator.klass, "-", VALUEFUNC(_wrap_Iterator___sub__), -1);
  SwigClassIterator.mark = 0;
  SwigClassIterator.destroy = (void (*)(void *)) free_swig_Iterator;
  SwigClassIterator.trackObjects = 0;
  
  SwigClassThread.klass = rb_define_class_under(mPlayercpp, "Thread", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_boost__thread, (void *) &SwigClassThread);
  rb_define_alloc_func(SwigClassThread.klass, _wrap_thread_allocate);
  rb_define_method(SwigClassThread.klass, "initialize", VALUEFUNC(_wrap_new_thread), -1);
  SwigClassThread.mark = 0;
  SwigClassThread.destroy = (void (*)(void *)) free_boost_thread;
  SwigClassThread.trackObjects = 0;
  
  SwigClassMutex.klass = rb_define_class_under(mPlayercpp, "Mutex", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_boost__mutex, (void *) &SwigClassMutex);
  rb_define_alloc_func(SwigClassMutex.klass, _wrap_mutex_allocate);
  rb_define_method(SwigClassMutex.klass, "initialize", VALUEFUNC(_wrap_new_mutex), -1);
  SwigClassMutex.mark = 0;
  SwigClassMutex.destroy = (void (*)(void *)) free_boost_mutex;
  SwigClassMutex.trackObjects = 0;
  
  SwigClassPlayerClient.klass = rb_define_class_under(mPlayercpp, "PlayerClient", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__PlayerClient, (void *) &SwigClassPlayerClient);
  rb_define_alloc_func(SwigClassPlayerClient.klass, _wrap_PlayerClient_allocate);
  rb_define_method(SwigClassPlayerClient.klass, "initialize", VALUEFUNC(_wrap_new_PlayerClient), -1);
  rb_define_method(SwigClassPlayerClient.klass, "Connected", VALUEFUNC(_wrap_PlayerClient_Connected), -1);
  rb_define_method(SwigClassPlayerClient.klass, "StartThread", VALUEFUNC(_wrap_PlayerClient_StartThread), -1);
  rb_define_method(SwigClassPlayerClient.klass, "StopThread", VALUEFUNC(_wrap_PlayerClient_StopThread), -1);
  rb_define_method(SwigClassPlayerClient.klass, "Run", VALUEFUNC(_wrap_PlayerClient_Run), -1);
  rb_define_method(SwigClassPlayerClient.klass, "Stop", VALUEFUNC(_wrap_PlayerClient_Stop), -1);
  rb_define_method(SwigClassPlayerClient.klass, "Peek", VALUEFUNC(_wrap_PlayerClient_Peek), -1);
  rb_define_method(SwigClassPlayerClient.klass, "SetRequestTimeout", VALUEFUNC(_wrap_PlayerClient_SetRequestTimeout), -1);
  rb_define_method(SwigClassPlayerClient.klass, "SetRetryLimit", VALUEFUNC(_wrap_PlayerClient_SetRetryLimit), -1);
  rb_define_method(SwigClassPlayerClient.klass, "GetRetryLimit", VALUEFUNC(_wrap_PlayerClient_GetRetryLimit), -1);
  rb_define_method(SwigClassPlayerClient.klass, "SetRetryTime", VALUEFUNC(_wrap_PlayerClient_SetRetryTime), -1);
  rb_define_method(SwigClassPlayerClient.klass, "GetRetryTime", VALUEFUNC(_wrap_PlayerClient_GetRetryTime), -1);
  rb_define_method(SwigClassPlayerClient.klass, "Read", VALUEFUNC(_wrap_PlayerClient_Read), -1);
  rb_define_method(SwigClassPlayerClient.klass, "ReadIfWaiting", VALUEFUNC(_wrap_PlayerClient_ReadIfWaiting), -1);
  rb_define_method(SwigClassPlayerClient.klass, "SetDataMode", VALUEFUNC(_wrap_PlayerClient_SetDataMode), -1);
  rb_define_method(SwigClassPlayerClient.klass, "SetReplaceRule", VALUEFUNC(_wrap_PlayerClient_SetReplaceRule), -1);
  rb_define_method(SwigClassPlayerClient.klass, "RequestDeviceList", VALUEFUNC(_wrap_PlayerClient_RequestDeviceList), -1);
  rb_define_method(SwigClassPlayerClient.klass, "GetDeviceList", VALUEFUNC(_wrap_PlayerClient_GetDeviceList), -1);
  rb_define_method(SwigClassPlayerClient.klass, "GetHostname", VALUEFUNC(_wrap_PlayerClient_GetHostname), -1);
  rb_define_method(SwigClassPlayerClient.klass, "GetPort", VALUEFUNC(_wrap_PlayerClient_GetPort), -1);
  rb_define_method(SwigClassPlayerClient.klass, "LookupCode", VALUEFUNC(_wrap_PlayerClient_LookupCode), -1);
  rb_define_method(SwigClassPlayerClient.klass, "LookupName", VALUEFUNC(_wrap_PlayerClient_LookupName), -1);
  rb_define_method(SwigClassPlayerClient.klass, "GetOverflowCount", VALUEFUNC(_wrap_PlayerClient_GetOverflowCount), -1);
  SwigClassPlayerClient.mark = 0;
  SwigClassPlayerClient.destroy = (void (*)(void *)) free_PlayerCc_PlayerClient;
  SwigClassPlayerClient.trackObjects = 0;
  
  SwigClassClientProxy.klass = rb_define_class_under(mPlayercpp, "ClientProxy", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__ClientProxy, (void *) &SwigClassClientProxy);
  rb_undef_alloc_func(SwigClassClientProxy.klass);
  rb_define_method(SwigClassClientProxy.klass, "IsValid", VALUEFUNC(_wrap_ClientProxy_IsValid), -1);
  rb_define_method(SwigClassClientProxy.klass, "IsFresh", VALUEFUNC(_wrap_ClientProxy_IsFresh), -1);
  rb_define_method(SwigClassClientProxy.klass, "NotFresh", VALUEFUNC(_wrap_ClientProxy_NotFresh), -1);
  rb_define_method(SwigClassClientProxy.klass, "GetDriverName", VALUEFUNC(_wrap_ClientProxy_GetDriverName), -1);
  rb_define_method(SwigClassClientProxy.klass, "GetDataTime", VALUEFUNC(_wrap_ClientProxy_GetDataTime), -1);
  rb_define_method(SwigClassClientProxy.klass, "GetElapsedTime", VALUEFUNC(_wrap_ClientProxy_GetElapsedTime), -1);
  rb_define_method(SwigClassClientProxy.klass, "GetPlayerClient", VALUEFUNC(_wrap_ClientProxy_GetPlayerClient), -1);
  rb_define_method(SwigClassClientProxy.klass, "GetIndex", VALUEFUNC(_wrap_ClientProxy_GetIndex), -1);
  rb_define_method(SwigClassClientProxy.klass, "GetInterface", VALUEFUNC(_wrap_ClientProxy_GetInterface), -1);
  rb_define_method(SwigClassClientProxy.klass, "GetInterfaceStr", VALUEFUNC(_wrap_ClientProxy_GetInterfaceStr), -1);
  rb_define_method(SwigClassClientProxy.klass, "SetReplaceRule", VALUEFUNC(_wrap_ClientProxy_SetReplaceRule), -1);
  rb_define_method(SwigClassClientProxy.klass, "HasCapability", VALUEFUNC(_wrap_ClientProxy_HasCapability), -1);
  rb_define_method(SwigClassClientProxy.klass, "GetBoolProp", VALUEFUNC(_wrap_ClientProxy_GetBoolProp), -1);
  rb_define_method(SwigClassClientProxy.klass, "SetBoolProp", VALUEFUNC(_wrap_ClientProxy_SetBoolProp), -1);
  rb_define_method(SwigClassClientProxy.klass, "GetIntProp", VALUEFUNC(_wrap_ClientProxy_GetIntProp), -1);
  rb_define_method(SwigClassClientProxy.klass, "SetIntProp", VALUEFUNC(_wrap_ClientProxy_SetIntProp), -1);
  rb_define_method(SwigClassClientProxy.klass, "GetDblProp", VALUEFUNC(_wrap_ClientProxy_GetDblProp), -1);
  rb_define_method(SwigClassClientProxy.klass, "SetDblProp", VALUEFUNC(_wrap_ClientProxy_SetDblProp), -1);
  rb_define_method(SwigClassClientProxy.klass, "GetStrProp", VALUEFUNC(_wrap_ClientProxy_GetStrProp), -1);
  rb_define_method(SwigClassClientProxy.klass, "SetStrProp", VALUEFUNC(_wrap_ClientProxy_SetStrProp), -1);
  SwigClassClientProxy.mark = 0;
  SwigClassClientProxy.trackObjects = 0;
  
  SwigClassActArrayProxy.klass = rb_define_class_under(mPlayercpp, "ActArrayProxy", ((swig_class *) SWIGTYPE_p_PlayerCc__ClientProxy->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__ActArrayProxy, (void *) &SwigClassActArrayProxy);
  rb_define_alloc_func(SwigClassActArrayProxy.klass, _wrap_ActArrayProxy_allocate);
  rb_define_method(SwigClassActArrayProxy.klass, "initialize", VALUEFUNC(_wrap_new_ActArrayProxy), -1);
  rb_define_method(SwigClassActArrayProxy.klass, "RequestGeometry", VALUEFUNC(_wrap_ActArrayProxy_RequestGeometry), -1);
  rb_define_method(SwigClassActArrayProxy.klass, "SetPowerConfig", VALUEFUNC(_wrap_ActArrayProxy_SetPowerConfig), -1);
  rb_define_method(SwigClassActArrayProxy.klass, "SetBrakesConfig", VALUEFUNC(_wrap_ActArrayProxy_SetBrakesConfig), -1);
  rb_define_method(SwigClassActArrayProxy.klass, "SetSpeedConfig", VALUEFUNC(_wrap_ActArrayProxy_SetSpeedConfig), -1);
  rb_define_method(SwigClassActArrayProxy.klass, "MoveTo", VALUEFUNC(_wrap_ActArrayProxy_MoveTo), -1);
  rb_define_method(SwigClassActArrayProxy.klass, "MoveToMulti", VALUEFUNC(_wrap_ActArrayProxy_MoveToMulti), -1);
  rb_define_method(SwigClassActArrayProxy.klass, "MoveAtSpeed", VALUEFUNC(_wrap_ActArrayProxy_MoveAtSpeed), -1);
  rb_define_method(SwigClassActArrayProxy.klass, "MoveAtSpeedMulti", VALUEFUNC(_wrap_ActArrayProxy_MoveAtSpeedMulti), -1);
  rb_define_method(SwigClassActArrayProxy.klass, "MoveHome", VALUEFUNC(_wrap_ActArrayProxy_MoveHome), -1);
  rb_define_method(SwigClassActArrayProxy.klass, "SetActuatorCurrent", VALUEFUNC(_wrap_ActArrayProxy_SetActuatorCurrent), -1);
  rb_define_method(SwigClassActArrayProxy.klass, "SetActuatorCurrentMulti", VALUEFUNC(_wrap_ActArrayProxy_SetActuatorCurrentMulti), -1);
  rb_define_method(SwigClassActArrayProxy.klass, "GetCount", VALUEFUNC(_wrap_ActArrayProxy_GetCount), -1);
  rb_define_method(SwigClassActArrayProxy.klass, "GetActuatorData", VALUEFUNC(_wrap_ActArrayProxy_GetActuatorData), -1);
  rb_define_method(SwigClassActArrayProxy.klass, "GetActuatorGeom", VALUEFUNC(_wrap_ActArrayProxy_GetActuatorGeom), -1);
  rb_define_method(SwigClassActArrayProxy.klass, "GetBasePos", VALUEFUNC(_wrap_ActArrayProxy_GetBasePos), -1);
  rb_define_method(SwigClassActArrayProxy.klass, "GetBaseOrientation", VALUEFUNC(_wrap_ActArrayProxy_GetBaseOrientation), -1);
  SwigClassActArrayProxy.mark = 0;
  SwigClassActArrayProxy.destroy = (void (*)(void *)) free_PlayerCc_ActArrayProxy;
  SwigClassActArrayProxy.trackObjects = 0;
  
  SwigClassAioProxy.klass = rb_define_class_under(mPlayercpp, "AioProxy", ((swig_class *) SWIGTYPE_p_PlayerCc__ClientProxy->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__AioProxy, (void *) &SwigClassAioProxy);
  rb_define_alloc_func(SwigClassAioProxy.klass, _wrap_AioProxy_allocate);
  rb_define_method(SwigClassAioProxy.klass, "initialize", VALUEFUNC(_wrap_new_AioProxy), -1);
  rb_define_method(SwigClassAioProxy.klass, "GetCount", VALUEFUNC(_wrap_AioProxy_GetCount), -1);
  rb_define_method(SwigClassAioProxy.klass, "GetVoltage", VALUEFUNC(_wrap_AioProxy_GetVoltage), -1);
  rb_define_method(SwigClassAioProxy.klass, "SetVoltage", VALUEFUNC(_wrap_AioProxy_SetVoltage), -1);
  SwigClassAioProxy.mark = 0;
  SwigClassAioProxy.destroy = (void (*)(void *)) free_PlayerCc_AioProxy;
  SwigClassAioProxy.trackObjects = 0;
  
  SwigClassAudioProxy.klass = rb_define_class_under(mPlayercpp, "AudioProxy", ((swig_class *) SWIGTYPE_p_PlayerCc__ClientProxy->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__AudioProxy, (void *) &SwigClassAudioProxy);
  rb_define_alloc_func(SwigClassAudioProxy.klass, _wrap_AudioProxy_allocate);
  rb_define_method(SwigClassAudioProxy.klass, "initialize", VALUEFUNC(_wrap_new_AudioProxy), -1);
  rb_define_method(SwigClassAudioProxy.klass, "GetMixerDetailsCount", VALUEFUNC(_wrap_AudioProxy_GetMixerDetailsCount), -1);
  rb_define_method(SwigClassAudioProxy.klass, "GetDefaultOutputChannel", VALUEFUNC(_wrap_AudioProxy_GetDefaultOutputChannel), -1);
  rb_define_method(SwigClassAudioProxy.klass, "GetDefaultInputChannel", VALUEFUNC(_wrap_AudioProxy_GetDefaultInputChannel), -1);
  rb_define_method(SwigClassAudioProxy.klass, "GetWavDataLength", VALUEFUNC(_wrap_AudioProxy_GetWavDataLength), -1);
  rb_define_method(SwigClassAudioProxy.klass, "GetWavData", VALUEFUNC(_wrap_AudioProxy_GetWavData), -1);
  rb_define_method(SwigClassAudioProxy.klass, "GetSeqCount", VALUEFUNC(_wrap_AudioProxy_GetSeqCount), -1);
  rb_define_method(SwigClassAudioProxy.klass, "GetSeqItem", VALUEFUNC(_wrap_AudioProxy_GetSeqItem), -1);
  rb_define_method(SwigClassAudioProxy.klass, "GetChannelCount", VALUEFUNC(_wrap_AudioProxy_GetChannelCount), -1);
  rb_define_method(SwigClassAudioProxy.klass, "GetChannel", VALUEFUNC(_wrap_AudioProxy_GetChannel), -1);
  rb_define_method(SwigClassAudioProxy.klass, "GetState", VALUEFUNC(_wrap_AudioProxy_GetState), -1);
  rb_define_method(SwigClassAudioProxy.klass, "PlayWav", VALUEFUNC(_wrap_AudioProxy_PlayWav), -1);
  rb_define_method(SwigClassAudioProxy.klass, "SetWavStremRec", VALUEFUNC(_wrap_AudioProxy_SetWavStremRec), -1);
  rb_define_method(SwigClassAudioProxy.klass, "PlaySample", VALUEFUNC(_wrap_AudioProxy_PlaySample), -1);
  rb_define_method(SwigClassAudioProxy.klass, "PlaySeq", VALUEFUNC(_wrap_AudioProxy_PlaySeq), -1);
  rb_define_method(SwigClassAudioProxy.klass, "SetMultMixerLevels", VALUEFUNC(_wrap_AudioProxy_SetMultMixerLevels), -1);
  rb_define_method(SwigClassAudioProxy.klass, "SetMixerLevel", VALUEFUNC(_wrap_AudioProxy_SetMixerLevel), -1);
  rb_define_method(SwigClassAudioProxy.klass, "RecordWav", VALUEFUNC(_wrap_AudioProxy_RecordWav), -1);
  rb_define_method(SwigClassAudioProxy.klass, "LoadSample", VALUEFUNC(_wrap_AudioProxy_LoadSample), -1);
  rb_define_method(SwigClassAudioProxy.klass, "GetSample", VALUEFUNC(_wrap_AudioProxy_GetSample), -1);
  rb_define_method(SwigClassAudioProxy.klass, "RecordSample", VALUEFUNC(_wrap_AudioProxy_RecordSample), -1);
  rb_define_method(SwigClassAudioProxy.klass, "GetMixerLevels", VALUEFUNC(_wrap_AudioProxy_GetMixerLevels), -1);
  rb_define_method(SwigClassAudioProxy.klass, "GetMixerDetails", VALUEFUNC(_wrap_AudioProxy_GetMixerDetails), -1);
  SwigClassAudioProxy.mark = 0;
  SwigClassAudioProxy.destroy = (void (*)(void *)) free_PlayerCc_AudioProxy;
  SwigClassAudioProxy.trackObjects = 0;
  
  SwigClassBlackBoardProxy.klass = rb_define_class_under(mPlayercpp, "BlackBoardProxy", ((swig_class *) SWIGTYPE_p_PlayerCc__ClientProxy->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__BlackBoardProxy, (void *) &SwigClassBlackBoardProxy);
  rb_define_alloc_func(SwigClassBlackBoardProxy.klass, _wrap_BlackBoardProxy_allocate);
  rb_define_method(SwigClassBlackBoardProxy.klass, "initialize", VALUEFUNC(_wrap_new_BlackBoardProxy), -1);
  rb_define_method(SwigClassBlackBoardProxy.klass, "SubscribeToKey", VALUEFUNC(_wrap_BlackBoardProxy_SubscribeToKey), -1);
  rb_define_method(SwigClassBlackBoardProxy.klass, "UnsubscribeFromKey", VALUEFUNC(_wrap_BlackBoardProxy_UnsubscribeFromKey), -1);
  rb_define_method(SwigClassBlackBoardProxy.klass, "SubscribeToGroup", VALUEFUNC(_wrap_BlackBoardProxy_SubscribeToGroup), -1);
  rb_define_method(SwigClassBlackBoardProxy.klass, "UnsubscribeFromGroup", VALUEFUNC(_wrap_BlackBoardProxy_UnsubscribeFromGroup), -1);
  rb_define_method(SwigClassBlackBoardProxy.klass, "SetEntry", VALUEFUNC(_wrap_BlackBoardProxy_SetEntry), -1);
  rb_define_method(SwigClassBlackBoardProxy.klass, "GetEntry", VALUEFUNC(_wrap_BlackBoardProxy_GetEntry), -1);
  rb_define_method(SwigClassBlackBoardProxy.klass, "SetEventHandler", VALUEFUNC(_wrap_BlackBoardProxy_SetEventHandler), -1);
  SwigClassBlackBoardProxy.mark = 0;
  SwigClassBlackBoardProxy.destroy = (void (*)(void *)) free_PlayerCc_BlackBoardProxy;
  SwigClassBlackBoardProxy.trackObjects = 0;
  
  SwigClassBlobfinderProxy.klass = rb_define_class_under(mPlayercpp, "BlobfinderProxy", ((swig_class *) SWIGTYPE_p_PlayerCc__ClientProxy->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__BlobfinderProxy, (void *) &SwigClassBlobfinderProxy);
  rb_define_alloc_func(SwigClassBlobfinderProxy.klass, _wrap_BlobfinderProxy_allocate);
  rb_define_method(SwigClassBlobfinderProxy.klass, "initialize", VALUEFUNC(_wrap_new_BlobfinderProxy), -1);
  rb_define_method(SwigClassBlobfinderProxy.klass, "GetCount", VALUEFUNC(_wrap_BlobfinderProxy_GetCount), -1);
  rb_define_method(SwigClassBlobfinderProxy.klass, "GetBlob", VALUEFUNC(_wrap_BlobfinderProxy_GetBlob), -1);
  rb_define_method(SwigClassBlobfinderProxy.klass, "GetWidth", VALUEFUNC(_wrap_BlobfinderProxy_GetWidth), -1);
  rb_define_method(SwigClassBlobfinderProxy.klass, "GetHeight", VALUEFUNC(_wrap_BlobfinderProxy_GetHeight), -1);
  SwigClassBlobfinderProxy.mark = 0;
  SwigClassBlobfinderProxy.destroy = (void (*)(void *)) free_PlayerCc_BlobfinderProxy;
  SwigClassBlobfinderProxy.trackObjects = 0;
  
  SwigClassBumperProxy.klass = rb_define_class_under(mPlayercpp, "BumperProxy", ((swig_class *) SWIGTYPE_p_PlayerCc__ClientProxy->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__BumperProxy, (void *) &SwigClassBumperProxy);
  rb_define_alloc_func(SwigClassBumperProxy.klass, _wrap_BumperProxy_allocate);
  rb_define_method(SwigClassBumperProxy.klass, "initialize", VALUEFUNC(_wrap_new_BumperProxy), -1);
  rb_define_method(SwigClassBumperProxy.klass, "GetCount", VALUEFUNC(_wrap_BumperProxy_GetCount), -1);
  rb_define_method(SwigClassBumperProxy.klass, "IsBumped", VALUEFUNC(_wrap_BumperProxy_IsBumped), -1);
  rb_define_method(SwigClassBumperProxy.klass, "IsAnyBumped", VALUEFUNC(_wrap_BumperProxy_IsAnyBumped), -1);
  rb_define_method(SwigClassBumperProxy.klass, "RequestBumperConfig", VALUEFUNC(_wrap_BumperProxy_RequestBumperConfig), -1);
  rb_define_method(SwigClassBumperProxy.klass, "GetPoseCount", VALUEFUNC(_wrap_BumperProxy_GetPoseCount), -1);
  rb_define_method(SwigClassBumperProxy.klass, "GetPose", VALUEFUNC(_wrap_BumperProxy_GetPose), -1);
  SwigClassBumperProxy.mark = 0;
  SwigClassBumperProxy.destroy = (void (*)(void *)) free_PlayerCc_BumperProxy;
  SwigClassBumperProxy.trackObjects = 0;
  
  SwigClassCameraProxy.klass = rb_define_class_under(mPlayercpp, "CameraProxy", ((swig_class *) SWIGTYPE_p_PlayerCc__ClientProxy->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__CameraProxy, (void *) &SwigClassCameraProxy);
  rb_define_alloc_func(SwigClassCameraProxy.klass, _wrap_CameraProxy_allocate);
  rb_define_method(SwigClassCameraProxy.klass, "initialize", VALUEFUNC(_wrap_new_CameraProxy), -1);
  rb_define_method(SwigClassCameraProxy.klass, "SaveFrame", VALUEFUNC(_wrap_CameraProxy_SaveFrame), -1);
  rb_define_method(SwigClassCameraProxy.klass, "Decompress", VALUEFUNC(_wrap_CameraProxy_Decompress), -1);
  rb_define_method(SwigClassCameraProxy.klass, "GetDepth", VALUEFUNC(_wrap_CameraProxy_GetDepth), -1);
  rb_define_method(SwigClassCameraProxy.klass, "GetWidth", VALUEFUNC(_wrap_CameraProxy_GetWidth), -1);
  rb_define_method(SwigClassCameraProxy.klass, "GetHeight", VALUEFUNC(_wrap_CameraProxy_GetHeight), -1);
  rb_define_method(SwigClassCameraProxy.klass, "GetFormat", VALUEFUNC(_wrap_CameraProxy_GetFormat), -1);
  rb_define_method(SwigClassCameraProxy.klass, "GetImageSize", VALUEFUNC(_wrap_CameraProxy_GetImageSize), -1);
  rb_define_method(SwigClassCameraProxy.klass, "GetImage", VALUEFUNC(_wrap_CameraProxy_GetImage), -1);
  rb_define_method(SwigClassCameraProxy.klass, "GetCompression", VALUEFUNC(_wrap_CameraProxy_GetCompression), -1);
  SwigClassCameraProxy.mark = 0;
  SwigClassCameraProxy.destroy = (void (*)(void *)) free_PlayerCc_CameraProxy;
  SwigClassCameraProxy.trackObjects = 0;
  
  SwigClassDioProxy.klass = rb_define_class_under(mPlayercpp, "DioProxy", ((swig_class *) SWIGTYPE_p_PlayerCc__ClientProxy->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__DioProxy, (void *) &SwigClassDioProxy);
  rb_define_alloc_func(SwigClassDioProxy.klass, _wrap_DioProxy_allocate);
  rb_define_method(SwigClassDioProxy.klass, "initialize", VALUEFUNC(_wrap_new_DioProxy), -1);
  rb_define_method(SwigClassDioProxy.klass, "GetCount", VALUEFUNC(_wrap_DioProxy_GetCount), -1);
  rb_define_method(SwigClassDioProxy.klass, "GetDigin", VALUEFUNC(_wrap_DioProxy_GetDigin), -1);
  rb_define_method(SwigClassDioProxy.klass, "GetInput", VALUEFUNC(_wrap_DioProxy_GetInput), -1);
  rb_define_method(SwigClassDioProxy.klass, "SetOutput", VALUEFUNC(_wrap_DioProxy_SetOutput), -1);
  SwigClassDioProxy.mark = 0;
  SwigClassDioProxy.destroy = (void (*)(void *)) free_PlayerCc_DioProxy;
  SwigClassDioProxy.trackObjects = 0;
  
  SwigClassFiducialProxy.klass = rb_define_class_under(mPlayercpp, "FiducialProxy", ((swig_class *) SWIGTYPE_p_PlayerCc__ClientProxy->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__FiducialProxy, (void *) &SwigClassFiducialProxy);
  rb_define_alloc_func(SwigClassFiducialProxy.klass, _wrap_FiducialProxy_allocate);
  rb_define_method(SwigClassFiducialProxy.klass, "initialize", VALUEFUNC(_wrap_new_FiducialProxy), -1);
  rb_define_method(SwigClassFiducialProxy.klass, "GetCount", VALUEFUNC(_wrap_FiducialProxy_GetCount), -1);
  rb_define_method(SwigClassFiducialProxy.klass, "GetFiducialItem", VALUEFUNC(_wrap_FiducialProxy_GetFiducialItem), -1);
  rb_define_method(SwigClassFiducialProxy.klass, "GetSensorPose", VALUEFUNC(_wrap_FiducialProxy_GetSensorPose), -1);
  rb_define_method(SwigClassFiducialProxy.klass, "GetSensorSize", VALUEFUNC(_wrap_FiducialProxy_GetSensorSize), -1);
  rb_define_method(SwigClassFiducialProxy.klass, "GetFiducialSize", VALUEFUNC(_wrap_FiducialProxy_GetFiducialSize), -1);
  rb_define_method(SwigClassFiducialProxy.klass, "RequestGeometry", VALUEFUNC(_wrap_FiducialProxy_RequestGeometry), -1);
  SwigClassFiducialProxy.mark = 0;
  SwigClassFiducialProxy.destroy = (void (*)(void *)) free_PlayerCc_FiducialProxy;
  SwigClassFiducialProxy.trackObjects = 0;
  
  SwigClassGpsProxy.klass = rb_define_class_under(mPlayercpp, "GpsProxy", ((swig_class *) SWIGTYPE_p_PlayerCc__ClientProxy->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__GpsProxy, (void *) &SwigClassGpsProxy);
  rb_define_alloc_func(SwigClassGpsProxy.klass, _wrap_GpsProxy_allocate);
  rb_define_method(SwigClassGpsProxy.klass, "initialize", VALUEFUNC(_wrap_new_GpsProxy), -1);
  rb_define_method(SwigClassGpsProxy.klass, "GetLatitude", VALUEFUNC(_wrap_GpsProxy_GetLatitude), -1);
  rb_define_method(SwigClassGpsProxy.klass, "GetLongitude", VALUEFUNC(_wrap_GpsProxy_GetLongitude), -1);
  rb_define_method(SwigClassGpsProxy.klass, "GetAltitude", VALUEFUNC(_wrap_GpsProxy_GetAltitude), -1);
  rb_define_method(SwigClassGpsProxy.klass, "GetSatellites", VALUEFUNC(_wrap_GpsProxy_GetSatellites), -1);
  rb_define_method(SwigClassGpsProxy.klass, "GetQuality", VALUEFUNC(_wrap_GpsProxy_GetQuality), -1);
  rb_define_method(SwigClassGpsProxy.klass, "GetHdop", VALUEFUNC(_wrap_GpsProxy_GetHdop), -1);
  rb_define_method(SwigClassGpsProxy.klass, "GetVdop", VALUEFUNC(_wrap_GpsProxy_GetVdop), -1);
  rb_define_method(SwigClassGpsProxy.klass, "GetUtmEasting", VALUEFUNC(_wrap_GpsProxy_GetUtmEasting), -1);
  rb_define_method(SwigClassGpsProxy.klass, "GetUtmNorthing", VALUEFUNC(_wrap_GpsProxy_GetUtmNorthing), -1);
  rb_define_method(SwigClassGpsProxy.klass, "GetTime", VALUEFUNC(_wrap_GpsProxy_GetTime), -1);
  rb_define_method(SwigClassGpsProxy.klass, "GetErrHorizontal", VALUEFUNC(_wrap_GpsProxy_GetErrHorizontal), -1);
  rb_define_method(SwigClassGpsProxy.klass, "GetErrVertical", VALUEFUNC(_wrap_GpsProxy_GetErrVertical), -1);
  SwigClassGpsProxy.mark = 0;
  SwigClassGpsProxy.destroy = (void (*)(void *)) free_PlayerCc_GpsProxy;
  SwigClassGpsProxy.trackObjects = 0;
  
  SwigClassGraphics2dProxy.klass = rb_define_class_under(mPlayercpp, "Graphics2dProxy", ((swig_class *) SWIGTYPE_p_PlayerCc__ClientProxy->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__Graphics2dProxy, (void *) &SwigClassGraphics2dProxy);
  rb_define_alloc_func(SwigClassGraphics2dProxy.klass, _wrap_Graphics2dProxy_allocate);
  rb_define_method(SwigClassGraphics2dProxy.klass, "initialize", VALUEFUNC(_wrap_new_Graphics2dProxy), -1);
  rb_define_method(SwigClassGraphics2dProxy.klass, "Color", VALUEFUNC(_wrap_Graphics2dProxy_Color), -1);
  rb_define_method(SwigClassGraphics2dProxy.klass, "Clear", VALUEFUNC(_wrap_Graphics2dProxy_Clear), -1);
  rb_define_method(SwigClassGraphics2dProxy.klass, "DrawPoints", VALUEFUNC(_wrap_Graphics2dProxy_DrawPoints), -1);
  rb_define_method(SwigClassGraphics2dProxy.klass, "DrawPolygon", VALUEFUNC(_wrap_Graphics2dProxy_DrawPolygon), -1);
  rb_define_method(SwigClassGraphics2dProxy.klass, "DrawPolyline", VALUEFUNC(_wrap_Graphics2dProxy_DrawPolyline), -1);
  SwigClassGraphics2dProxy.mark = 0;
  SwigClassGraphics2dProxy.destroy = (void (*)(void *)) free_PlayerCc_Graphics2dProxy;
  SwigClassGraphics2dProxy.trackObjects = 0;
  
  SwigClassGraphics3dProxy.klass = rb_define_class_under(mPlayercpp, "Graphics3dProxy", ((swig_class *) SWIGTYPE_p_PlayerCc__ClientProxy->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__Graphics3dProxy, (void *) &SwigClassGraphics3dProxy);
  rb_define_alloc_func(SwigClassGraphics3dProxy.klass, _wrap_Graphics3dProxy_allocate);
  rb_define_method(SwigClassGraphics3dProxy.klass, "initialize", VALUEFUNC(_wrap_new_Graphics3dProxy), -1);
  rb_define_method(SwigClassGraphics3dProxy.klass, "Color", VALUEFUNC(_wrap_Graphics3dProxy_Color), -1);
  rb_define_method(SwigClassGraphics3dProxy.klass, "Clear", VALUEFUNC(_wrap_Graphics3dProxy_Clear), -1);
  rb_define_method(SwigClassGraphics3dProxy.klass, "Draw", VALUEFUNC(_wrap_Graphics3dProxy_Draw), -1);
  SwigClassGraphics3dProxy.mark = 0;
  SwigClassGraphics3dProxy.destroy = (void (*)(void *)) free_PlayerCc_Graphics3dProxy;
  SwigClassGraphics3dProxy.trackObjects = 0;
  
  SwigClassGripperProxy.klass = rb_define_class_under(mPlayercpp, "GripperProxy", ((swig_class *) SWIGTYPE_p_PlayerCc__ClientProxy->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__GripperProxy, (void *) &SwigClassGripperProxy);
  rb_define_alloc_func(SwigClassGripperProxy.klass, _wrap_GripperProxy_allocate);
  rb_define_method(SwigClassGripperProxy.klass, "initialize", VALUEFUNC(_wrap_new_GripperProxy), -1);
  rb_define_method(SwigClassGripperProxy.klass, "RequestGeometry", VALUEFUNC(_wrap_GripperProxy_RequestGeometry), -1);
  rb_define_method(SwigClassGripperProxy.klass, "GetState", VALUEFUNC(_wrap_GripperProxy_GetState), -1);
  rb_define_method(SwigClassGripperProxy.klass, "GetBeams", VALUEFUNC(_wrap_GripperProxy_GetBeams), -1);
  rb_define_method(SwigClassGripperProxy.klass, "GetPose", VALUEFUNC(_wrap_GripperProxy_GetPose), -1);
  rb_define_method(SwigClassGripperProxy.klass, "GetOuterSize", VALUEFUNC(_wrap_GripperProxy_GetOuterSize), -1);
  rb_define_method(SwigClassGripperProxy.klass, "GetInnerSize", VALUEFUNC(_wrap_GripperProxy_GetInnerSize), -1);
  rb_define_method(SwigClassGripperProxy.klass, "GetNumBeams", VALUEFUNC(_wrap_GripperProxy_GetNumBeams), -1);
  rb_define_method(SwigClassGripperProxy.klass, "GetCapacity", VALUEFUNC(_wrap_GripperProxy_GetCapacity), -1);
  rb_define_method(SwigClassGripperProxy.klass, "GetStored", VALUEFUNC(_wrap_GripperProxy_GetStored), -1);
  rb_define_method(SwigClassGripperProxy.klass, "Open", VALUEFUNC(_wrap_GripperProxy_Open), -1);
  rb_define_method(SwigClassGripperProxy.klass, "Close", VALUEFUNC(_wrap_GripperProxy_Close), -1);
  rb_define_method(SwigClassGripperProxy.klass, "Stop", VALUEFUNC(_wrap_GripperProxy_Stop), -1);
  rb_define_method(SwigClassGripperProxy.klass, "Store", VALUEFUNC(_wrap_GripperProxy_Store), -1);
  rb_define_method(SwigClassGripperProxy.klass, "Retrieve", VALUEFUNC(_wrap_GripperProxy_Retrieve), -1);
  SwigClassGripperProxy.mark = 0;
  SwigClassGripperProxy.destroy = (void (*)(void *)) free_PlayerCc_GripperProxy;
  SwigClassGripperProxy.trackObjects = 0;
  
  SwigClassHealthProxy.klass = rb_define_class_under(mPlayercpp, "HealthProxy", ((swig_class *) SWIGTYPE_p_PlayerCc__ClientProxy->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__HealthProxy, (void *) &SwigClassHealthProxy);
  rb_define_alloc_func(SwigClassHealthProxy.klass, _wrap_HealthProxy_allocate);
  rb_define_method(SwigClassHealthProxy.klass, "initialize", VALUEFUNC(_wrap_new_HealthProxy), -1);
  rb_define_method(SwigClassHealthProxy.klass, "GetIdleCPU", VALUEFUNC(_wrap_HealthProxy_GetIdleCPU), -1);
  rb_define_method(SwigClassHealthProxy.klass, "GetSystemCPU", VALUEFUNC(_wrap_HealthProxy_GetSystemCPU), -1);
  rb_define_method(SwigClassHealthProxy.klass, "GetUserCPU", VALUEFUNC(_wrap_HealthProxy_GetUserCPU), -1);
  rb_define_method(SwigClassHealthProxy.klass, "GetMemTotal", VALUEFUNC(_wrap_HealthProxy_GetMemTotal), -1);
  rb_define_method(SwigClassHealthProxy.klass, "GetMemUsed", VALUEFUNC(_wrap_HealthProxy_GetMemUsed), -1);
  rb_define_method(SwigClassHealthProxy.klass, "GetMemFree", VALUEFUNC(_wrap_HealthProxy_GetMemFree), -1);
  rb_define_method(SwigClassHealthProxy.klass, "GetSwapTotal", VALUEFUNC(_wrap_HealthProxy_GetSwapTotal), -1);
  rb_define_method(SwigClassHealthProxy.klass, "GetSwapUsed", VALUEFUNC(_wrap_HealthProxy_GetSwapUsed), -1);
  rb_define_method(SwigClassHealthProxy.klass, "GetSwapFree", VALUEFUNC(_wrap_HealthProxy_GetSwapFree), -1);
  rb_define_method(SwigClassHealthProxy.klass, "GetPercMemUsed", VALUEFUNC(_wrap_HealthProxy_GetPercMemUsed), -1);
  rb_define_method(SwigClassHealthProxy.klass, "GetPercSwapUsed", VALUEFUNC(_wrap_HealthProxy_GetPercSwapUsed), -1);
  rb_define_method(SwigClassHealthProxy.klass, "GetPercTotalUsed", VALUEFUNC(_wrap_HealthProxy_GetPercTotalUsed), -1);
  SwigClassHealthProxy.mark = 0;
  SwigClassHealthProxy.destroy = (void (*)(void *)) free_PlayerCc_HealthProxy;
  SwigClassHealthProxy.trackObjects = 0;
  
  SwigClassImuProxy.klass = rb_define_class_under(mPlayercpp, "ImuProxy", ((swig_class *) SWIGTYPE_p_PlayerCc__ClientProxy->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__ImuProxy, (void *) &SwigClassImuProxy);
  rb_define_alloc_func(SwigClassImuProxy.klass, _wrap_ImuProxy_allocate);
  rb_define_method(SwigClassImuProxy.klass, "initialize", VALUEFUNC(_wrap_new_ImuProxy), -1);
  rb_define_method(SwigClassImuProxy.klass, "GetPose", VALUEFUNC(_wrap_ImuProxy_GetPose), -1);
  rb_define_method(SwigClassImuProxy.klass, "GetXAccel", VALUEFUNC(_wrap_ImuProxy_GetXAccel), -1);
  rb_define_method(SwigClassImuProxy.klass, "GetYAccel", VALUEFUNC(_wrap_ImuProxy_GetYAccel), -1);
  rb_define_method(SwigClassImuProxy.klass, "GetZAccel", VALUEFUNC(_wrap_ImuProxy_GetZAccel), -1);
  rb_define_method(SwigClassImuProxy.klass, "GetXGyro", VALUEFUNC(_wrap_ImuProxy_GetXGyro), -1);
  rb_define_method(SwigClassImuProxy.klass, "GetYGyro", VALUEFUNC(_wrap_ImuProxy_GetYGyro), -1);
  rb_define_method(SwigClassImuProxy.klass, "GetZGyro", VALUEFUNC(_wrap_ImuProxy_GetZGyro), -1);
  rb_define_method(SwigClassImuProxy.klass, "GetXMagn", VALUEFUNC(_wrap_ImuProxy_GetXMagn), -1);
  rb_define_method(SwigClassImuProxy.klass, "GetYMagn", VALUEFUNC(_wrap_ImuProxy_GetYMagn), -1);
  rb_define_method(SwigClassImuProxy.klass, "GetZMagn", VALUEFUNC(_wrap_ImuProxy_GetZMagn), -1);
  rb_define_method(SwigClassImuProxy.klass, "GetRawValues", VALUEFUNC(_wrap_ImuProxy_GetRawValues), -1);
  rb_define_method(SwigClassImuProxy.klass, "SetDatatype", VALUEFUNC(_wrap_ImuProxy_SetDatatype), -1);
  rb_define_method(SwigClassImuProxy.klass, "ResetOrientation", VALUEFUNC(_wrap_ImuProxy_ResetOrientation), -1);
  SwigClassImuProxy.mark = 0;
  SwigClassImuProxy.destroy = (void (*)(void *)) free_PlayerCc_ImuProxy;
  SwigClassImuProxy.trackObjects = 0;
  
  SwigClassIrProxy.klass = rb_define_class_under(mPlayercpp, "IrProxy", ((swig_class *) SWIGTYPE_p_PlayerCc__ClientProxy->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__IrProxy, (void *) &SwigClassIrProxy);
  rb_define_alloc_func(SwigClassIrProxy.klass, _wrap_IrProxy_allocate);
  rb_define_method(SwigClassIrProxy.klass, "initialize", VALUEFUNC(_wrap_new_IrProxy), -1);
  rb_define_method(SwigClassIrProxy.klass, "GetCount", VALUEFUNC(_wrap_IrProxy_GetCount), -1);
  rb_define_method(SwigClassIrProxy.klass, "GetRange", VALUEFUNC(_wrap_IrProxy_GetRange), -1);
  rb_define_method(SwigClassIrProxy.klass, "GetVoltage", VALUEFUNC(_wrap_IrProxy_GetVoltage), -1);
  rb_define_method(SwigClassIrProxy.klass, "GetPoseCount", VALUEFUNC(_wrap_IrProxy_GetPoseCount), -1);
  rb_define_method(SwigClassIrProxy.klass, "GetPose", VALUEFUNC(_wrap_IrProxy_GetPose), -1);
  rb_define_method(SwigClassIrProxy.klass, "RequestGeom", VALUEFUNC(_wrap_IrProxy_RequestGeom), -1);
  SwigClassIrProxy.mark = 0;
  SwigClassIrProxy.destroy = (void (*)(void *)) free_PlayerCc_IrProxy;
  SwigClassIrProxy.trackObjects = 0;
  
  SwigClassLaserProxy.klass = rb_define_class_under(mPlayercpp, "LaserProxy", ((swig_class *) SWIGTYPE_p_PlayerCc__ClientProxy->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__LaserProxy, (void *) &SwigClassLaserProxy);
  rb_define_alloc_func(SwigClassLaserProxy.klass, _wrap_LaserProxy_allocate);
  rb_define_method(SwigClassLaserProxy.klass, "initialize", VALUEFUNC(_wrap_new_LaserProxy), -1);
  rb_define_method(SwigClassLaserProxy.klass, "GetCount", VALUEFUNC(_wrap_LaserProxy_GetCount), -1);
  rb_define_method(SwigClassLaserProxy.klass, "GetMaxRange", VALUEFUNC(_wrap_LaserProxy_GetMaxRange), -1);
  rb_define_method(SwigClassLaserProxy.klass, "GetScanRes", VALUEFUNC(_wrap_LaserProxy_GetScanRes), -1);
  rb_define_method(SwigClassLaserProxy.klass, "GetRangeRes", VALUEFUNC(_wrap_LaserProxy_GetRangeRes), -1);
  rb_define_method(SwigClassLaserProxy.klass, "GetScanningFrequency", VALUEFUNC(_wrap_LaserProxy_GetScanningFrequency), -1);
  rb_define_method(SwigClassLaserProxy.klass, "GetMinAngle", VALUEFUNC(_wrap_LaserProxy_GetMinAngle), -1);
  rb_define_method(SwigClassLaserProxy.klass, "GetMaxAngle", VALUEFUNC(_wrap_LaserProxy_GetMaxAngle), -1);
  rb_define_method(SwigClassLaserProxy.klass, "GetConfMinAngle", VALUEFUNC(_wrap_LaserProxy_GetConfMinAngle), -1);
  rb_define_method(SwigClassLaserProxy.klass, "GetConfMaxAngle", VALUEFUNC(_wrap_LaserProxy_GetConfMaxAngle), -1);
  rb_define_method(SwigClassLaserProxy.klass, "IntensityOn", VALUEFUNC(_wrap_LaserProxy_IntensityOn), -1);
  rb_define_method(SwigClassLaserProxy.klass, "GetPoint", VALUEFUNC(_wrap_LaserProxy_GetPoint), -1);
  rb_define_method(SwigClassLaserProxy.klass, "GetRange", VALUEFUNC(_wrap_LaserProxy_GetRange), -1);
  rb_define_method(SwigClassLaserProxy.klass, "GetBearing", VALUEFUNC(_wrap_LaserProxy_GetBearing), -1);
  rb_define_method(SwigClassLaserProxy.klass, "GetIntensity", VALUEFUNC(_wrap_LaserProxy_GetIntensity), -1);
  rb_define_method(SwigClassLaserProxy.klass, "GetID", VALUEFUNC(_wrap_LaserProxy_GetID), -1);
  rb_define_method(SwigClassLaserProxy.klass, "Configure", VALUEFUNC(_wrap_LaserProxy_Configure), -1);
  rb_define_method(SwigClassLaserProxy.klass, "RequestConfigure", VALUEFUNC(_wrap_LaserProxy_RequestConfigure), -1);
  rb_define_method(SwigClassLaserProxy.klass, "RequestID", VALUEFUNC(_wrap_LaserProxy_RequestID), -1);
  rb_define_method(SwigClassLaserProxy.klass, "RequestGeom", VALUEFUNC(_wrap_LaserProxy_RequestGeom), -1);
  rb_define_method(SwigClassLaserProxy.klass, "GetPose", VALUEFUNC(_wrap_LaserProxy_GetPose), -1);
  rb_define_method(SwigClassLaserProxy.klass, "GetRobotPose", VALUEFUNC(_wrap_LaserProxy_GetRobotPose), -1);
  rb_define_method(SwigClassLaserProxy.klass, "GetSize", VALUEFUNC(_wrap_LaserProxy_GetSize), -1);
  rb_define_method(SwigClassLaserProxy.klass, "GetMinLeft", VALUEFUNC(_wrap_LaserProxy_GetMinLeft), -1);
  rb_define_method(SwigClassLaserProxy.klass, "GetMinRight", VALUEFUNC(_wrap_LaserProxy_GetMinRight), -1);
  rb_define_method(SwigClassLaserProxy.klass, "MinLeft", VALUEFUNC(_wrap_LaserProxy_MinLeft), -1);
  rb_define_method(SwigClassLaserProxy.klass, "MinRight", VALUEFUNC(_wrap_LaserProxy_MinRight), -1);
  SwigClassLaserProxy.mark = 0;
  SwigClassLaserProxy.destroy = (void (*)(void *)) free_PlayerCc_LaserProxy;
  SwigClassLaserProxy.trackObjects = 0;
  
  SwigClassLimbProxy.klass = rb_define_class_under(mPlayercpp, "LimbProxy", ((swig_class *) SWIGTYPE_p_PlayerCc__ClientProxy->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__LimbProxy, (void *) &SwigClassLimbProxy);
  rb_define_alloc_func(SwigClassLimbProxy.klass, _wrap_LimbProxy_allocate);
  rb_define_method(SwigClassLimbProxy.klass, "initialize", VALUEFUNC(_wrap_new_LimbProxy), -1);
  rb_define_method(SwigClassLimbProxy.klass, "RequestGeometry", VALUEFUNC(_wrap_LimbProxy_RequestGeometry), -1);
  rb_define_method(SwigClassLimbProxy.klass, "SetPowerConfig", VALUEFUNC(_wrap_LimbProxy_SetPowerConfig), -1);
  rb_define_method(SwigClassLimbProxy.klass, "SetBrakesConfig", VALUEFUNC(_wrap_LimbProxy_SetBrakesConfig), -1);
  rb_define_method(SwigClassLimbProxy.klass, "SetSpeedConfig", VALUEFUNC(_wrap_LimbProxy_SetSpeedConfig), -1);
  rb_define_method(SwigClassLimbProxy.klass, "MoveHome", VALUEFUNC(_wrap_LimbProxy_MoveHome), -1);
  rb_define_method(SwigClassLimbProxy.klass, "Stop", VALUEFUNC(_wrap_LimbProxy_Stop), -1);
  rb_define_method(SwigClassLimbProxy.klass, "SetPose", VALUEFUNC(_wrap_LimbProxy_SetPose), -1);
  rb_define_method(SwigClassLimbProxy.klass, "SetPosition", VALUEFUNC(_wrap_LimbProxy_SetPosition), -1);
  rb_define_method(SwigClassLimbProxy.klass, "VectorMove", VALUEFUNC(_wrap_LimbProxy_VectorMove), -1);
  rb_define_method(SwigClassLimbProxy.klass, "GetData", VALUEFUNC(_wrap_LimbProxy_GetData), -1);
  rb_define_method(SwigClassLimbProxy.klass, "GetGeom", VALUEFUNC(_wrap_LimbProxy_GetGeom), -1);
  SwigClassLimbProxy.mark = 0;
  SwigClassLimbProxy.destroy = (void (*)(void *)) free_PlayerCc_LimbProxy;
  SwigClassLimbProxy.trackObjects = 0;
  
  SwigClassLinuxjoystickProxy.klass = rb_define_class_under(mPlayercpp, "LinuxjoystickProxy", ((swig_class *) SWIGTYPE_p_PlayerCc__ClientProxy->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__LinuxjoystickProxy, (void *) &SwigClassLinuxjoystickProxy);
  rb_define_alloc_func(SwigClassLinuxjoystickProxy.klass, _wrap_LinuxjoystickProxy_allocate);
  rb_define_method(SwigClassLinuxjoystickProxy.klass, "initialize", VALUEFUNC(_wrap_new_LinuxjoystickProxy), -1);
  rb_define_method(SwigClassLinuxjoystickProxy.klass, "GetButtons", VALUEFUNC(_wrap_LinuxjoystickProxy_GetButtons), -1);
  rb_define_method(SwigClassLinuxjoystickProxy.klass, "GetAxes", VALUEFUNC(_wrap_LinuxjoystickProxy_GetAxes), -1);
  rb_define_method(SwigClassLinuxjoystickProxy.klass, "GetAxesCount", VALUEFUNC(_wrap_LinuxjoystickProxy_GetAxesCount), -1);
  SwigClassLinuxjoystickProxy.mark = 0;
  SwigClassLinuxjoystickProxy.destroy = (void (*)(void *)) free_PlayerCc_LinuxjoystickProxy;
  SwigClassLinuxjoystickProxy.trackObjects = 0;
  
  SwigClassLocalizeProxy.klass = rb_define_class_under(mPlayercpp, "LocalizeProxy", ((swig_class *) SWIGTYPE_p_PlayerCc__ClientProxy->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__LocalizeProxy, (void *) &SwigClassLocalizeProxy);
  rb_define_alloc_func(SwigClassLocalizeProxy.klass, _wrap_LocalizeProxy_allocate);
  rb_define_method(SwigClassLocalizeProxy.klass, "initialize", VALUEFUNC(_wrap_new_LocalizeProxy), -1);
  rb_define_method(SwigClassLocalizeProxy.klass, "GetMapSizeX", VALUEFUNC(_wrap_LocalizeProxy_GetMapSizeX), -1);
  rb_define_method(SwigClassLocalizeProxy.klass, "GetMapSizeY", VALUEFUNC(_wrap_LocalizeProxy_GetMapSizeY), -1);
  rb_define_method(SwigClassLocalizeProxy.klass, "GetMapTileX", VALUEFUNC(_wrap_LocalizeProxy_GetMapTileX), -1);
  rb_define_method(SwigClassLocalizeProxy.klass, "GetMapTileY", VALUEFUNC(_wrap_LocalizeProxy_GetMapTileY), -1);
  rb_define_method(SwigClassLocalizeProxy.klass, "GetMapScale", VALUEFUNC(_wrap_LocalizeProxy_GetMapScale), -1);
  rb_define_method(SwigClassLocalizeProxy.klass, "GetPendingCount", VALUEFUNC(_wrap_LocalizeProxy_GetPendingCount), -1);
  rb_define_method(SwigClassLocalizeProxy.klass, "GetHypothCount", VALUEFUNC(_wrap_LocalizeProxy_GetHypothCount), -1);
  rb_define_method(SwigClassLocalizeProxy.klass, "GetHypoth", VALUEFUNC(_wrap_LocalizeProxy_GetHypoth), -1);
  rb_define_method(SwigClassLocalizeProxy.klass, "GetParticles", VALUEFUNC(_wrap_LocalizeProxy_GetParticles), -1);
  rb_define_method(SwigClassLocalizeProxy.klass, "GetParticlePose", VALUEFUNC(_wrap_LocalizeProxy_GetParticlePose), -1);
  rb_define_method(SwigClassLocalizeProxy.klass, "SetPose", VALUEFUNC(_wrap_LocalizeProxy_SetPose), -1);
  rb_define_method(SwigClassLocalizeProxy.klass, "GetNumHypoths", VALUEFUNC(_wrap_LocalizeProxy_GetNumHypoths), -1);
  rb_define_method(SwigClassLocalizeProxy.klass, "GetNumParticles", VALUEFUNC(_wrap_LocalizeProxy_GetNumParticles), -1);
  SwigClassLocalizeProxy.mark = 0;
  SwigClassLocalizeProxy.destroy = (void (*)(void *)) free_PlayerCc_LocalizeProxy;
  SwigClassLocalizeProxy.trackObjects = 0;
  
  SwigClassLogProxy.klass = rb_define_class_under(mPlayercpp, "LogProxy", ((swig_class *) SWIGTYPE_p_PlayerCc__ClientProxy->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__LogProxy, (void *) &SwigClassLogProxy);
  rb_define_alloc_func(SwigClassLogProxy.klass, _wrap_LogProxy_allocate);
  rb_define_method(SwigClassLogProxy.klass, "initialize", VALUEFUNC(_wrap_new_LogProxy), -1);
  rb_define_method(SwigClassLogProxy.klass, "GetType", VALUEFUNC(_wrap_LogProxy_GetType), -1);
  rb_define_method(SwigClassLogProxy.klass, "GetState", VALUEFUNC(_wrap_LogProxy_GetState), -1);
  rb_define_method(SwigClassLogProxy.klass, "QueryState", VALUEFUNC(_wrap_LogProxy_QueryState), -1);
  rb_define_method(SwigClassLogProxy.klass, "SetState", VALUEFUNC(_wrap_LogProxy_SetState), -1);
  rb_define_method(SwigClassLogProxy.klass, "SetWriteState", VALUEFUNC(_wrap_LogProxy_SetWriteState), -1);
  rb_define_method(SwigClassLogProxy.klass, "SetReadState", VALUEFUNC(_wrap_LogProxy_SetReadState), -1);
  rb_define_method(SwigClassLogProxy.klass, "Rewind", VALUEFUNC(_wrap_LogProxy_Rewind), -1);
  rb_define_method(SwigClassLogProxy.klass, "SetFilename", VALUEFUNC(_wrap_LogProxy_SetFilename), -1);
  SwigClassLogProxy.mark = 0;
  SwigClassLogProxy.destroy = (void (*)(void *)) free_PlayerCc_LogProxy;
  SwigClassLogProxy.trackObjects = 0;
  
  SwigClassMapProxy.klass = rb_define_class_under(mPlayercpp, "MapProxy", ((swig_class *) SWIGTYPE_p_PlayerCc__ClientProxy->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__MapProxy, (void *) &SwigClassMapProxy);
  rb_define_alloc_func(SwigClassMapProxy.klass, _wrap_MapProxy_allocate);
  rb_define_method(SwigClassMapProxy.klass, "initialize", VALUEFUNC(_wrap_new_MapProxy), -1);
  rb_define_method(SwigClassMapProxy.klass, "RequestMap", VALUEFUNC(_wrap_MapProxy_RequestMap), -1);
  rb_define_method(SwigClassMapProxy.klass, "GetCellIndex", VALUEFUNC(_wrap_MapProxy_GetCellIndex), -1);
  rb_define_method(SwigClassMapProxy.klass, "GetCell", VALUEFUNC(_wrap_MapProxy_GetCell), -1);
  rb_define_method(SwigClassMapProxy.klass, "GetResolution", VALUEFUNC(_wrap_MapProxy_GetResolution), -1);
  rb_define_method(SwigClassMapProxy.klass, "GetWidth", VALUEFUNC(_wrap_MapProxy_GetWidth), -1);
  rb_define_method(SwigClassMapProxy.klass, "GetHeight", VALUEFUNC(_wrap_MapProxy_GetHeight), -1);
  rb_define_method(SwigClassMapProxy.klass, "GetOriginX", VALUEFUNC(_wrap_MapProxy_GetOriginX), -1);
  rb_define_method(SwigClassMapProxy.klass, "GetOriginY", VALUEFUNC(_wrap_MapProxy_GetOriginY), -1);
  rb_define_method(SwigClassMapProxy.klass, "GetMap", VALUEFUNC(_wrap_MapProxy_GetMap), -1);
  SwigClassMapProxy.mark = 0;
  SwigClassMapProxy.destroy = (void (*)(void *)) free_PlayerCc_MapProxy;
  SwigClassMapProxy.trackObjects = 0;
  
  SwigClassOpaqueProxy.klass = rb_define_class_under(mPlayercpp, "OpaqueProxy", ((swig_class *) SWIGTYPE_p_PlayerCc__ClientProxy->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__OpaqueProxy, (void *) &SwigClassOpaqueProxy);
  rb_define_alloc_func(SwigClassOpaqueProxy.klass, _wrap_OpaqueProxy_allocate);
  rb_define_method(SwigClassOpaqueProxy.klass, "initialize", VALUEFUNC(_wrap_new_OpaqueProxy), -1);
  rb_define_method(SwigClassOpaqueProxy.klass, "GetCount", VALUEFUNC(_wrap_OpaqueProxy_GetCount), -1);
  rb_define_method(SwigClassOpaqueProxy.klass, "GetData", VALUEFUNC(_wrap_OpaqueProxy_GetData), -1);
  rb_define_method(SwigClassOpaqueProxy.klass, "SendCmd", VALUEFUNC(_wrap_OpaqueProxy_SendCmd), -1);
  rb_define_method(SwigClassOpaqueProxy.klass, "SendReq", VALUEFUNC(_wrap_OpaqueProxy_SendReq), -1);
  SwigClassOpaqueProxy.mark = 0;
  SwigClassOpaqueProxy.destroy = (void (*)(void *)) free_PlayerCc_OpaqueProxy;
  SwigClassOpaqueProxy.trackObjects = 0;
  
  SwigClassPlannerProxy.klass = rb_define_class_under(mPlayercpp, "PlannerProxy", ((swig_class *) SWIGTYPE_p_PlayerCc__ClientProxy->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__PlannerProxy, (void *) &SwigClassPlannerProxy);
  rb_define_alloc_func(SwigClassPlannerProxy.klass, _wrap_PlannerProxy_allocate);
  rb_define_method(SwigClassPlannerProxy.klass, "initialize", VALUEFUNC(_wrap_new_PlannerProxy), -1);
  rb_define_method(SwigClassPlannerProxy.klass, "SetGoalPose", VALUEFUNC(_wrap_PlannerProxy_SetGoalPose), -1);
  rb_define_method(SwigClassPlannerProxy.klass, "RequestWaypoints", VALUEFUNC(_wrap_PlannerProxy_RequestWaypoints), -1);
  rb_define_method(SwigClassPlannerProxy.klass, "SetEnable", VALUEFUNC(_wrap_PlannerProxy_SetEnable), -1);
  rb_define_method(SwigClassPlannerProxy.klass, "GetPathValid", VALUEFUNC(_wrap_PlannerProxy_GetPathValid), -1);
  rb_define_method(SwigClassPlannerProxy.klass, "GetPathDone", VALUEFUNC(_wrap_PlannerProxy_GetPathDone), -1);
  rb_define_method(SwigClassPlannerProxy.klass, "GetPx", VALUEFUNC(_wrap_PlannerProxy_GetPx), -1);
  rb_define_method(SwigClassPlannerProxy.klass, "GetPy", VALUEFUNC(_wrap_PlannerProxy_GetPy), -1);
  rb_define_method(SwigClassPlannerProxy.klass, "GetPa", VALUEFUNC(_wrap_PlannerProxy_GetPa), -1);
  rb_define_method(SwigClassPlannerProxy.klass, "GetPose", VALUEFUNC(_wrap_PlannerProxy_GetPose), -1);
  rb_define_method(SwigClassPlannerProxy.klass, "GetGx", VALUEFUNC(_wrap_PlannerProxy_GetGx), -1);
  rb_define_method(SwigClassPlannerProxy.klass, "GetGy", VALUEFUNC(_wrap_PlannerProxy_GetGy), -1);
  rb_define_method(SwigClassPlannerProxy.klass, "GetGa", VALUEFUNC(_wrap_PlannerProxy_GetGa), -1);
  rb_define_method(SwigClassPlannerProxy.klass, "GetGoal", VALUEFUNC(_wrap_PlannerProxy_GetGoal), -1);
  rb_define_method(SwigClassPlannerProxy.klass, "GetWx", VALUEFUNC(_wrap_PlannerProxy_GetWx), -1);
  rb_define_method(SwigClassPlannerProxy.klass, "GetWy", VALUEFUNC(_wrap_PlannerProxy_GetWy), -1);
  rb_define_method(SwigClassPlannerProxy.klass, "GetWa", VALUEFUNC(_wrap_PlannerProxy_GetWa), -1);
  rb_define_method(SwigClassPlannerProxy.klass, "GetCurrentWaypoint", VALUEFUNC(_wrap_PlannerProxy_GetCurrentWaypoint), -1);
  rb_define_method(SwigClassPlannerProxy.klass, "GetIx", VALUEFUNC(_wrap_PlannerProxy_GetIx), -1);
  rb_define_method(SwigClassPlannerProxy.klass, "GetIy", VALUEFUNC(_wrap_PlannerProxy_GetIy), -1);
  rb_define_method(SwigClassPlannerProxy.klass, "GetIa", VALUEFUNC(_wrap_PlannerProxy_GetIa), -1);
  rb_define_method(SwigClassPlannerProxy.klass, "GetWaypoint", VALUEFUNC(_wrap_PlannerProxy_GetWaypoint), -1);
  rb_define_method(SwigClassPlannerProxy.klass, "GetCurrentWaypointId", VALUEFUNC(_wrap_PlannerProxy_GetCurrentWaypointId), -1);
  rb_define_method(SwigClassPlannerProxy.klass, "GetWaypointCount", VALUEFUNC(_wrap_PlannerProxy_GetWaypointCount), -1);
  SwigClassPlannerProxy.mark = 0;
  SwigClassPlannerProxy.destroy = (void (*)(void *)) free_PlayerCc_PlannerProxy;
  SwigClassPlannerProxy.trackObjects = 0;
  
  SwigClassPointcloud3dProxy.klass = rb_define_class_under(mPlayercpp, "Pointcloud3dProxy", ((swig_class *) SWIGTYPE_p_PlayerCc__ClientProxy->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__Pointcloud3dProxy, (void *) &SwigClassPointcloud3dProxy);
  rb_define_alloc_func(SwigClassPointcloud3dProxy.klass, _wrap_Pointcloud3dProxy_allocate);
  rb_define_method(SwigClassPointcloud3dProxy.klass, "initialize", VALUEFUNC(_wrap_new_Pointcloud3dProxy), -1);
  rb_define_method(SwigClassPointcloud3dProxy.klass, "GetCount", VALUEFUNC(_wrap_Pointcloud3dProxy_GetCount), -1);
  rb_define_method(SwigClassPointcloud3dProxy.klass, "GetPoint", VALUEFUNC(_wrap_Pointcloud3dProxy_GetPoint), -1);
  SwigClassPointcloud3dProxy.mark = 0;
  SwigClassPointcloud3dProxy.destroy = (void (*)(void *)) free_PlayerCc_Pointcloud3dProxy;
  SwigClassPointcloud3dProxy.trackObjects = 0;
  
  SwigClassPosition1dProxy.klass = rb_define_class_under(mPlayercpp, "Position1dProxy", ((swig_class *) SWIGTYPE_p_PlayerCc__ClientProxy->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__Position1dProxy, (void *) &SwigClassPosition1dProxy);
  rb_define_alloc_func(SwigClassPosition1dProxy.klass, _wrap_Position1dProxy_allocate);
  rb_define_method(SwigClassPosition1dProxy.klass, "initialize", VALUEFUNC(_wrap_new_Position1dProxy), -1);
  rb_define_method(SwigClassPosition1dProxy.klass, "SetSpeed", VALUEFUNC(_wrap_Position1dProxy_SetSpeed), -1);
  rb_define_method(SwigClassPosition1dProxy.klass, "GoTo", VALUEFUNC(_wrap_Position1dProxy_GoTo), -1);
  rb_define_method(SwigClassPosition1dProxy.klass, "RequestGeom", VALUEFUNC(_wrap_Position1dProxy_RequestGeom), -1);
  rb_define_method(SwigClassPosition1dProxy.klass, "GetPose", VALUEFUNC(_wrap_Position1dProxy_GetPose), -1);
  rb_define_method(SwigClassPosition1dProxy.klass, "GetSize", VALUEFUNC(_wrap_Position1dProxy_GetSize), -1);
  rb_define_method(SwigClassPosition1dProxy.klass, "SetMotorEnable", VALUEFUNC(_wrap_Position1dProxy_SetMotorEnable), -1);
  rb_define_method(SwigClassPosition1dProxy.klass, "SetOdometry", VALUEFUNC(_wrap_Position1dProxy_SetOdometry), -1);
  rb_define_method(SwigClassPosition1dProxy.klass, "ResetOdometry", VALUEFUNC(_wrap_Position1dProxy_ResetOdometry), -1);
  rb_define_method(SwigClassPosition1dProxy.klass, "GetPos", VALUEFUNC(_wrap_Position1dProxy_GetPos), -1);
  rb_define_method(SwigClassPosition1dProxy.klass, "GetVel", VALUEFUNC(_wrap_Position1dProxy_GetVel), -1);
  rb_define_method(SwigClassPosition1dProxy.klass, "GetStall", VALUEFUNC(_wrap_Position1dProxy_GetStall), -1);
  rb_define_method(SwigClassPosition1dProxy.klass, "GetStatus", VALUEFUNC(_wrap_Position1dProxy_GetStatus), -1);
  rb_define_method(SwigClassPosition1dProxy.klass, "IsLimitMin", VALUEFUNC(_wrap_Position1dProxy_IsLimitMin), -1);
  rb_define_method(SwigClassPosition1dProxy.klass, "IsLimitCen", VALUEFUNC(_wrap_Position1dProxy_IsLimitCen), -1);
  rb_define_method(SwigClassPosition1dProxy.klass, "IsLimitMax", VALUEFUNC(_wrap_Position1dProxy_IsLimitMax), -1);
  rb_define_method(SwigClassPosition1dProxy.klass, "IsOverCurrent", VALUEFUNC(_wrap_Position1dProxy_IsOverCurrent), -1);
  rb_define_method(SwigClassPosition1dProxy.klass, "IsTrajComplete", VALUEFUNC(_wrap_Position1dProxy_IsTrajComplete), -1);
  rb_define_method(SwigClassPosition1dProxy.klass, "IsEnabled", VALUEFUNC(_wrap_Position1dProxy_IsEnabled), -1);
  SwigClassPosition1dProxy.mark = 0;
  SwigClassPosition1dProxy.destroy = (void (*)(void *)) free_PlayerCc_Position1dProxy;
  SwigClassPosition1dProxy.trackObjects = 0;
  
  SwigClassPosition2dProxy.klass = rb_define_class_under(mPlayercpp, "Position2dProxy", ((swig_class *) SWIGTYPE_p_PlayerCc__ClientProxy->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__Position2dProxy, (void *) &SwigClassPosition2dProxy);
  rb_define_alloc_func(SwigClassPosition2dProxy.klass, _wrap_Position2dProxy_allocate);
  rb_define_method(SwigClassPosition2dProxy.klass, "initialize", VALUEFUNC(_wrap_new_Position2dProxy), -1);
  rb_define_method(SwigClassPosition2dProxy.klass, "SetSpeed", VALUEFUNC(_wrap_Position2dProxy_SetSpeed), -1);
  rb_define_method(SwigClassPosition2dProxy.klass, "SetVelHead", VALUEFUNC(_wrap_Position2dProxy_SetVelHead), -1);
  rb_define_method(SwigClassPosition2dProxy.klass, "GoTo", VALUEFUNC(_wrap_Position2dProxy_GoTo), -1);
  rb_define_method(SwigClassPosition2dProxy.klass, "SetCarlike", VALUEFUNC(_wrap_Position2dProxy_SetCarlike), -1);
  rb_define_method(SwigClassPosition2dProxy.klass, "RequestGeom", VALUEFUNC(_wrap_Position2dProxy_RequestGeom), -1);
  rb_define_method(SwigClassPosition2dProxy.klass, "GetOffset", VALUEFUNC(_wrap_Position2dProxy_GetOffset), -1);
  rb_define_method(SwigClassPosition2dProxy.klass, "GetSize", VALUEFUNC(_wrap_Position2dProxy_GetSize), -1);
  rb_define_method(SwigClassPosition2dProxy.klass, "SetMotorEnable", VALUEFUNC(_wrap_Position2dProxy_SetMotorEnable), -1);
  rb_define_method(SwigClassPosition2dProxy.klass, "ResetOdometry", VALUEFUNC(_wrap_Position2dProxy_ResetOdometry), -1);
  rb_define_method(SwigClassPosition2dProxy.klass, "SetOdometry", VALUEFUNC(_wrap_Position2dProxy_SetOdometry), -1);
  rb_define_method(SwigClassPosition2dProxy.klass, "GetXPos", VALUEFUNC(_wrap_Position2dProxy_GetXPos), -1);
  rb_define_method(SwigClassPosition2dProxy.klass, "GetYPos", VALUEFUNC(_wrap_Position2dProxy_GetYPos), -1);
  rb_define_method(SwigClassPosition2dProxy.klass, "GetYaw", VALUEFUNC(_wrap_Position2dProxy_GetYaw), -1);
  rb_define_method(SwigClassPosition2dProxy.klass, "GetXSpeed", VALUEFUNC(_wrap_Position2dProxy_GetXSpeed), -1);
  rb_define_method(SwigClassPosition2dProxy.klass, "GetYSpeed", VALUEFUNC(_wrap_Position2dProxy_GetYSpeed), -1);
  rb_define_method(SwigClassPosition2dProxy.klass, "GetYawSpeed", VALUEFUNC(_wrap_Position2dProxy_GetYawSpeed), -1);
  rb_define_method(SwigClassPosition2dProxy.klass, "GetStall", VALUEFUNC(_wrap_Position2dProxy_GetStall), -1);
  SwigClassPosition2dProxy.mark = 0;
  SwigClassPosition2dProxy.destroy = (void (*)(void *)) free_PlayerCc_Position2dProxy;
  SwigClassPosition2dProxy.trackObjects = 0;
  
  SwigClassPosition3dProxy.klass = rb_define_class_under(mPlayercpp, "Position3dProxy", ((swig_class *) SWIGTYPE_p_PlayerCc__ClientProxy->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__Position3dProxy, (void *) &SwigClassPosition3dProxy);
  rb_define_alloc_func(SwigClassPosition3dProxy.klass, _wrap_Position3dProxy_allocate);
  rb_define_method(SwigClassPosition3dProxy.klass, "initialize", VALUEFUNC(_wrap_new_Position3dProxy), -1);
  rb_define_method(SwigClassPosition3dProxy.klass, "SetSpeed", VALUEFUNC(_wrap_Position3dProxy_SetSpeed), -1);
  rb_define_method(SwigClassPosition3dProxy.klass, "GoTo", VALUEFUNC(_wrap_Position3dProxy_GoTo), -1);
  rb_define_method(SwigClassPosition3dProxy.klass, "SetMotorEnable", VALUEFUNC(_wrap_Position3dProxy_SetMotorEnable), -1);
  rb_define_method(SwigClassPosition3dProxy.klass, "SelectVelocityControl", VALUEFUNC(_wrap_Position3dProxy_SelectVelocityControl), -1);
  rb_define_method(SwigClassPosition3dProxy.klass, "ResetOdometry", VALUEFUNC(_wrap_Position3dProxy_ResetOdometry), -1);
  rb_define_method(SwigClassPosition3dProxy.klass, "SetOdometry", VALUEFUNC(_wrap_Position3dProxy_SetOdometry), -1);
  rb_define_method(SwigClassPosition3dProxy.klass, "RequestGeom", VALUEFUNC(_wrap_Position3dProxy_RequestGeom), -1);
  rb_define_method(SwigClassPosition3dProxy.klass, "GetXPos", VALUEFUNC(_wrap_Position3dProxy_GetXPos), -1);
  rb_define_method(SwigClassPosition3dProxy.klass, "GetYPos", VALUEFUNC(_wrap_Position3dProxy_GetYPos), -1);
  rb_define_method(SwigClassPosition3dProxy.klass, "GetZPos", VALUEFUNC(_wrap_Position3dProxy_GetZPos), -1);
  rb_define_method(SwigClassPosition3dProxy.klass, "GetRoll", VALUEFUNC(_wrap_Position3dProxy_GetRoll), -1);
  rb_define_method(SwigClassPosition3dProxy.klass, "GetPitch", VALUEFUNC(_wrap_Position3dProxy_GetPitch), -1);
  rb_define_method(SwigClassPosition3dProxy.klass, "GetYaw", VALUEFUNC(_wrap_Position3dProxy_GetYaw), -1);
  rb_define_method(SwigClassPosition3dProxy.klass, "GetXSpeed", VALUEFUNC(_wrap_Position3dProxy_GetXSpeed), -1);
  rb_define_method(SwigClassPosition3dProxy.klass, "GetYSpeed", VALUEFUNC(_wrap_Position3dProxy_GetYSpeed), -1);
  rb_define_method(SwigClassPosition3dProxy.klass, "GetZSpeed", VALUEFUNC(_wrap_Position3dProxy_GetZSpeed), -1);
  rb_define_method(SwigClassPosition3dProxy.klass, "GetRollSpeed", VALUEFUNC(_wrap_Position3dProxy_GetRollSpeed), -1);
  rb_define_method(SwigClassPosition3dProxy.klass, "GetPitchSpeed", VALUEFUNC(_wrap_Position3dProxy_GetPitchSpeed), -1);
  rb_define_method(SwigClassPosition3dProxy.klass, "GetYawSpeed", VALUEFUNC(_wrap_Position3dProxy_GetYawSpeed), -1);
  rb_define_method(SwigClassPosition3dProxy.klass, "GetStall", VALUEFUNC(_wrap_Position3dProxy_GetStall), -1);
  SwigClassPosition3dProxy.mark = 0;
  SwigClassPosition3dProxy.destroy = (void (*)(void *)) free_PlayerCc_Position3dProxy;
  SwigClassPosition3dProxy.trackObjects = 0;
  
  SwigClassPowerProxy.klass = rb_define_class_under(mPlayercpp, "PowerProxy", ((swig_class *) SWIGTYPE_p_PlayerCc__ClientProxy->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__PowerProxy, (void *) &SwigClassPowerProxy);
  rb_define_alloc_func(SwigClassPowerProxy.klass, _wrap_PowerProxy_allocate);
  rb_define_method(SwigClassPowerProxy.klass, "initialize", VALUEFUNC(_wrap_new_PowerProxy), -1);
  rb_define_method(SwigClassPowerProxy.klass, "GetCharge", VALUEFUNC(_wrap_PowerProxy_GetCharge), -1);
  rb_define_method(SwigClassPowerProxy.klass, "GetPercent", VALUEFUNC(_wrap_PowerProxy_GetPercent), -1);
  rb_define_method(SwigClassPowerProxy.klass, "GetJoules", VALUEFUNC(_wrap_PowerProxy_GetJoules), -1);
  rb_define_method(SwigClassPowerProxy.klass, "GetWatts", VALUEFUNC(_wrap_PowerProxy_GetWatts), -1);
  rb_define_method(SwigClassPowerProxy.klass, "GetCharging", VALUEFUNC(_wrap_PowerProxy_GetCharging), -1);
  rb_define_method(SwigClassPowerProxy.klass, "IsValid", VALUEFUNC(_wrap_PowerProxy_IsValid), -1);
  SwigClassPowerProxy.mark = 0;
  SwigClassPowerProxy.destroy = (void (*)(void *)) free_PlayerCc_PowerProxy;
  SwigClassPowerProxy.trackObjects = 0;
  
  SwigClassPtzProxy.klass = rb_define_class_under(mPlayercpp, "PtzProxy", ((swig_class *) SWIGTYPE_p_PlayerCc__ClientProxy->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__PtzProxy, (void *) &SwigClassPtzProxy);
  rb_define_alloc_func(SwigClassPtzProxy.klass, _wrap_PtzProxy_allocate);
  rb_define_method(SwigClassPtzProxy.klass, "initialize", VALUEFUNC(_wrap_new_PtzProxy), -1);
  rb_define_method(SwigClassPtzProxy.klass, "SetCam", VALUEFUNC(_wrap_PtzProxy_SetCam), -1);
  rb_define_method(SwigClassPtzProxy.klass, "SetSpeed", VALUEFUNC(_wrap_PtzProxy_SetSpeed), -1);
  rb_define_method(SwigClassPtzProxy.klass, "SelectControlMode", VALUEFUNC(_wrap_PtzProxy_SelectControlMode), -1);
  rb_define_method(SwigClassPtzProxy.klass, "GetPan", VALUEFUNC(_wrap_PtzProxy_GetPan), -1);
  rb_define_method(SwigClassPtzProxy.klass, "GetTilt", VALUEFUNC(_wrap_PtzProxy_GetTilt), -1);
  rb_define_method(SwigClassPtzProxy.klass, "GetZoom", VALUEFUNC(_wrap_PtzProxy_GetZoom), -1);
  rb_define_method(SwigClassPtzProxy.klass, "GetStatus", VALUEFUNC(_wrap_PtzProxy_GetStatus), -1);
  SwigClassPtzProxy.mark = 0;
  SwigClassPtzProxy.destroy = (void (*)(void *)) free_PlayerCc_PtzProxy;
  SwigClassPtzProxy.trackObjects = 0;
  
  SwigClassRangerProxy.klass = rb_define_class_under(mPlayercpp, "RangerProxy", ((swig_class *) SWIGTYPE_p_PlayerCc__ClientProxy->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__RangerProxy, (void *) &SwigClassRangerProxy);
  rb_define_alloc_func(SwigClassRangerProxy.klass, _wrap_RangerProxy_allocate);
  rb_define_method(SwigClassRangerProxy.klass, "initialize", VALUEFUNC(_wrap_new_RangerProxy), -1);
  rb_define_method(SwigClassRangerProxy.klass, "GetElementCount", VALUEFUNC(_wrap_RangerProxy_GetElementCount), -1);
  rb_define_method(SwigClassRangerProxy.klass, "GetDevicePose", VALUEFUNC(_wrap_RangerProxy_GetDevicePose), -1);
  rb_define_method(SwigClassRangerProxy.klass, "GetDeviceSize", VALUEFUNC(_wrap_RangerProxy_GetDeviceSize), -1);
  rb_define_method(SwigClassRangerProxy.klass, "GetElementPose", VALUEFUNC(_wrap_RangerProxy_GetElementPose), -1);
  rb_define_method(SwigClassRangerProxy.klass, "GetElementSize", VALUEFUNC(_wrap_RangerProxy_GetElementSize), -1);
  rb_define_method(SwigClassRangerProxy.klass, "GetRangeCount", VALUEFUNC(_wrap_RangerProxy_GetRangeCount), -1);
  rb_define_method(SwigClassRangerProxy.klass, "GetRange", VALUEFUNC(_wrap_RangerProxy_GetRange), -1);
  rb_define_method(SwigClassRangerProxy.klass, "GetIntensityCount", VALUEFUNC(_wrap_RangerProxy_GetIntensityCount), -1);
  rb_define_method(SwigClassRangerProxy.klass, "GetIntensity", VALUEFUNC(_wrap_RangerProxy_GetIntensity), -1);
  rb_define_method(SwigClassRangerProxy.klass, "SetPower", VALUEFUNC(_wrap_RangerProxy_SetPower), -1);
  rb_define_method(SwigClassRangerProxy.klass, "SetIntensityData", VALUEFUNC(_wrap_RangerProxy_SetIntensityData), -1);
  rb_define_method(SwigClassRangerProxy.klass, "RequestGeom", VALUEFUNC(_wrap_RangerProxy_RequestGeom), -1);
  rb_define_method(SwigClassRangerProxy.klass, "Configure", VALUEFUNC(_wrap_RangerProxy_Configure), -1);
  rb_define_method(SwigClassRangerProxy.klass, "RequestConfigure", VALUEFUNC(_wrap_RangerProxy_RequestConfigure), -1);
  rb_define_method(SwigClassRangerProxy.klass, "GetMinAngle", VALUEFUNC(_wrap_RangerProxy_GetMinAngle), -1);
  rb_define_method(SwigClassRangerProxy.klass, "GetMaxAngle", VALUEFUNC(_wrap_RangerProxy_GetMaxAngle), -1);
  rb_define_method(SwigClassRangerProxy.klass, "GetAngularRes", VALUEFUNC(_wrap_RangerProxy_GetAngularRes), -1);
  rb_define_method(SwigClassRangerProxy.klass, "GetMinRange", VALUEFUNC(_wrap_RangerProxy_GetMinRange), -1);
  rb_define_method(SwigClassRangerProxy.klass, "GetMaxRange", VALUEFUNC(_wrap_RangerProxy_GetMaxRange), -1);
  rb_define_method(SwigClassRangerProxy.klass, "GetRangeRes", VALUEFUNC(_wrap_RangerProxy_GetRangeRes), -1);
  rb_define_method(SwigClassRangerProxy.klass, "GetFrequency", VALUEFUNC(_wrap_RangerProxy_GetFrequency), -1);
  SwigClassRangerProxy.mark = 0;
  SwigClassRangerProxy.destroy = (void (*)(void *)) free_PlayerCc_RangerProxy;
  SwigClassRangerProxy.trackObjects = 0;
  
  SwigClassRFIDProxy.klass = rb_define_class_under(mPlayercpp, "RFIDProxy", ((swig_class *) SWIGTYPE_p_PlayerCc__ClientProxy->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__RFIDProxy, (void *) &SwigClassRFIDProxy);
  rb_define_alloc_func(SwigClassRFIDProxy.klass, _wrap_RFIDProxy_allocate);
  rb_define_method(SwigClassRFIDProxy.klass, "initialize", VALUEFUNC(_wrap_new_RFIDProxy), -1);
  rb_define_method(SwigClassRFIDProxy.klass, "GetTagsCount", VALUEFUNC(_wrap_RFIDProxy_GetTagsCount), -1);
  rb_define_method(SwigClassRFIDProxy.klass, "GetRFIDTag", VALUEFUNC(_wrap_RFIDProxy_GetRFIDTag), -1);
  SwigClassRFIDProxy.mark = 0;
  SwigClassRFIDProxy.destroy = (void (*)(void *)) free_PlayerCc_RFIDProxy;
  SwigClassRFIDProxy.trackObjects = 0;
  
  SwigClassSimulationProxy.klass = rb_define_class_under(mPlayercpp, "SimulationProxy", ((swig_class *) SWIGTYPE_p_PlayerCc__ClientProxy->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__SimulationProxy, (void *) &SwigClassSimulationProxy);
  rb_define_alloc_func(SwigClassSimulationProxy.klass, _wrap_SimulationProxy_allocate);
  rb_define_method(SwigClassSimulationProxy.klass, "initialize", VALUEFUNC(_wrap_new_SimulationProxy), -1);
  rb_define_method(SwigClassSimulationProxy.klass, "SetPose2d", VALUEFUNC(_wrap_SimulationProxy_SetPose2d), -1);
  rb_define_method(SwigClassSimulationProxy.klass, "GetPose2d", VALUEFUNC(_wrap_SimulationProxy_GetPose2d), -1);
  rb_define_method(SwigClassSimulationProxy.klass, "SetPose3d", VALUEFUNC(_wrap_SimulationProxy_SetPose3d), -1);
  rb_define_method(SwigClassSimulationProxy.klass, "GetPose3d", VALUEFUNC(_wrap_SimulationProxy_GetPose3d), -1);
  rb_define_method(SwigClassSimulationProxy.klass, "GetProperty", VALUEFUNC(_wrap_SimulationProxy_GetProperty), -1);
  rb_define_method(SwigClassSimulationProxy.klass, "SetProperty", VALUEFUNC(_wrap_SimulationProxy_SetProperty), -1);
  SwigClassSimulationProxy.mark = 0;
  SwigClassSimulationProxy.destroy = (void (*)(void *)) free_PlayerCc_SimulationProxy;
  SwigClassSimulationProxy.trackObjects = 0;
  
  SwigClassSonarProxy.klass = rb_define_class_under(mPlayercpp, "SonarProxy", ((swig_class *) SWIGTYPE_p_PlayerCc__ClientProxy->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__SonarProxy, (void *) &SwigClassSonarProxy);
  rb_define_alloc_func(SwigClassSonarProxy.klass, _wrap_SonarProxy_allocate);
  rb_define_method(SwigClassSonarProxy.klass, "initialize", VALUEFUNC(_wrap_new_SonarProxy), -1);
  rb_define_method(SwigClassSonarProxy.klass, "GetCount", VALUEFUNC(_wrap_SonarProxy_GetCount), -1);
  rb_define_method(SwigClassSonarProxy.klass, "GetScan", VALUEFUNC(_wrap_SonarProxy_GetScan), -1);
  rb_define_method(SwigClassSonarProxy.klass, "GetPoseCount", VALUEFUNC(_wrap_SonarProxy_GetPoseCount), -1);
  rb_define_method(SwigClassSonarProxy.klass, "GetPose", VALUEFUNC(_wrap_SonarProxy_GetPose), -1);
  rb_define_method(SwigClassSonarProxy.klass, "RequestGeom", VALUEFUNC(_wrap_SonarProxy_RequestGeom), -1);
  SwigClassSonarProxy.mark = 0;
  SwigClassSonarProxy.destroy = (void (*)(void *)) free_PlayerCc_SonarProxy;
  SwigClassSonarProxy.trackObjects = 0;
  
  SwigClassSpeechProxy.klass = rb_define_class_under(mPlayercpp, "SpeechProxy", ((swig_class *) SWIGTYPE_p_PlayerCc__ClientProxy->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__SpeechProxy, (void *) &SwigClassSpeechProxy);
  rb_define_alloc_func(SwigClassSpeechProxy.klass, _wrap_SpeechProxy_allocate);
  rb_define_method(SwigClassSpeechProxy.klass, "initialize", VALUEFUNC(_wrap_new_SpeechProxy), -1);
  rb_define_method(SwigClassSpeechProxy.klass, "Say", VALUEFUNC(_wrap_SpeechProxy_Say), -1);
  SwigClassSpeechProxy.mark = 0;
  SwigClassSpeechProxy.destroy = (void (*)(void *)) free_PlayerCc_SpeechProxy;
  SwigClassSpeechProxy.trackObjects = 0;
  
  SwigClassSpeechRecognitionProxy.klass = rb_define_class_under(mPlayercpp, "SpeechRecognitionProxy", ((swig_class *) SWIGTYPE_p_PlayerCc__ClientProxy->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__SpeechRecognitionProxy, (void *) &SwigClassSpeechRecognitionProxy);
  rb_define_alloc_func(SwigClassSpeechRecognitionProxy.klass, _wrap_SpeechRecognitionProxy_allocate);
  rb_define_method(SwigClassSpeechRecognitionProxy.klass, "initialize", VALUEFUNC(_wrap_new_SpeechRecognitionProxy), -1);
  rb_define_method(SwigClassSpeechRecognitionProxy.klass, "GetWord", VALUEFUNC(_wrap_SpeechRecognitionProxy_GetWord), -1);
  rb_define_method(SwigClassSpeechRecognitionProxy.klass, "GetCount", VALUEFUNC(_wrap_SpeechRecognitionProxy_GetCount), -1);
  SwigClassSpeechRecognitionProxy.mark = 0;
  SwigClassSpeechRecognitionProxy.destroy = (void (*)(void *)) free_PlayerCc_SpeechRecognitionProxy;
  SwigClassSpeechRecognitionProxy.trackObjects = 0;
  
  SwigClassVectorMapProxy.klass = rb_define_class_under(mPlayercpp, "VectorMapProxy", ((swig_class *) SWIGTYPE_p_PlayerCc__ClientProxy->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__VectorMapProxy, (void *) &SwigClassVectorMapProxy);
  rb_define_alloc_func(SwigClassVectorMapProxy.klass, _wrap_VectorMapProxy_allocate);
  rb_define_method(SwigClassVectorMapProxy.klass, "initialize", VALUEFUNC(_wrap_new_VectorMapProxy), -1);
  rb_define_method(SwigClassVectorMapProxy.klass, "GetMapInfo", VALUEFUNC(_wrap_VectorMapProxy_GetMapInfo), -1);
  rb_define_method(SwigClassVectorMapProxy.klass, "GetLayerData", VALUEFUNC(_wrap_VectorMapProxy_GetLayerData), -1);
  rb_define_method(SwigClassVectorMapProxy.klass, "GetLayerCount", VALUEFUNC(_wrap_VectorMapProxy_GetLayerCount), -1);
  rb_define_method(SwigClassVectorMapProxy.klass, "GetLayerNames", VALUEFUNC(_wrap_VectorMapProxy_GetLayerNames), -1);
  rb_define_method(SwigClassVectorMapProxy.klass, "GetFeatureCount", VALUEFUNC(_wrap_VectorMapProxy_GetFeatureCount), -1);
  rb_define_method(SwigClassVectorMapProxy.klass, "GetFeatureData", VALUEFUNC(_wrap_VectorMapProxy_GetFeatureData), -1);
  rb_define_method(SwigClassVectorMapProxy.klass, "GetFeatureDataCount", VALUEFUNC(_wrap_VectorMapProxy_GetFeatureDataCount), -1);
  SwigClassVectorMapProxy.mark = 0;
  SwigClassVectorMapProxy.destroy = (void (*)(void *)) free_PlayerCc_VectorMapProxy;
  SwigClassVectorMapProxy.trackObjects = 0;
  
  SwigClassWiFiProxy.klass = rb_define_class_under(mPlayercpp, "WiFiProxy", ((swig_class *) SWIGTYPE_p_PlayerCc__ClientProxy->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__WiFiProxy, (void *) &SwigClassWiFiProxy);
  rb_define_alloc_func(SwigClassWiFiProxy.klass, _wrap_WiFiProxy_allocate);
  rb_define_method(SwigClassWiFiProxy.klass, "initialize", VALUEFUNC(_wrap_new_WiFiProxy), -1);
  rb_define_method(SwigClassWiFiProxy.klass, "GetLink", VALUEFUNC(_wrap_WiFiProxy_GetLink), -1);
  rb_define_method(SwigClassWiFiProxy.klass, "GetLinkCount", VALUEFUNC(_wrap_WiFiProxy_GetLinkCount), -1);
  rb_define_method(SwigClassWiFiProxy.klass, "GetOwnIP", VALUEFUNC(_wrap_WiFiProxy_GetOwnIP), -1);
  rb_define_method(SwigClassWiFiProxy.klass, "GetLinkIP", VALUEFUNC(_wrap_WiFiProxy_GetLinkIP), -1);
  rb_define_method(SwigClassWiFiProxy.klass, "GetLinkMAC", VALUEFUNC(_wrap_WiFiProxy_GetLinkMAC), -1);
  rb_define_method(SwigClassWiFiProxy.klass, "GetLinkESSID", VALUEFUNC(_wrap_WiFiProxy_GetLinkESSID), -1);
  rb_define_method(SwigClassWiFiProxy.klass, "GetLinkFreq", VALUEFUNC(_wrap_WiFiProxy_GetLinkFreq), -1);
  rb_define_method(SwigClassWiFiProxy.klass, "GetLinkMode", VALUEFUNC(_wrap_WiFiProxy_GetLinkMode), -1);
  rb_define_method(SwigClassWiFiProxy.klass, "GetLinkEncrypt", VALUEFUNC(_wrap_WiFiProxy_GetLinkEncrypt), -1);
  rb_define_method(SwigClassWiFiProxy.klass, "GetLinkQuality", VALUEFUNC(_wrap_WiFiProxy_GetLinkQuality), -1);
  rb_define_method(SwigClassWiFiProxy.klass, "GetLinkLevel", VALUEFUNC(_wrap_WiFiProxy_GetLinkLevel), -1);
  rb_define_method(SwigClassWiFiProxy.klass, "GetLinkNoise", VALUEFUNC(_wrap_WiFiProxy_GetLinkNoise), -1);
  SwigClassWiFiProxy.mark = 0;
  SwigClassWiFiProxy.destroy = (void (*)(void *)) free_PlayerCc_WiFiProxy;
  SwigClassWiFiProxy.trackObjects = 0;
  
  SwigClassWSNProxy.klass = rb_define_class_under(mPlayercpp, "WSNProxy", ((swig_class *) SWIGTYPE_p_PlayerCc__ClientProxy->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__WSNProxy, (void *) &SwigClassWSNProxy);
  rb_define_alloc_func(SwigClassWSNProxy.klass, _wrap_WSNProxy_allocate);
  rb_define_method(SwigClassWSNProxy.klass, "initialize", VALUEFUNC(_wrap_new_WSNProxy), -1);
  rb_define_method(SwigClassWSNProxy.klass, "GetNodeType", VALUEFUNC(_wrap_WSNProxy_GetNodeType), -1);
  rb_define_method(SwigClassWSNProxy.klass, "GetNodeID", VALUEFUNC(_wrap_WSNProxy_GetNodeID), -1);
  rb_define_method(SwigClassWSNProxy.klass, "GetNodeParentID", VALUEFUNC(_wrap_WSNProxy_GetNodeParentID), -1);
  rb_define_method(SwigClassWSNProxy.klass, "GetNodeDataPacket", VALUEFUNC(_wrap_WSNProxy_GetNodeDataPacket), -1);
  rb_define_method(SwigClassWSNProxy.klass, "SetDevState", VALUEFUNC(_wrap_WSNProxy_SetDevState), -1);
  rb_define_method(SwigClassWSNProxy.klass, "Power", VALUEFUNC(_wrap_WSNProxy_Power), -1);
  rb_define_method(SwigClassWSNProxy.klass, "DataType", VALUEFUNC(_wrap_WSNProxy_DataType), -1);
  rb_define_method(SwigClassWSNProxy.klass, "DataFreq", VALUEFUNC(_wrap_WSNProxy_DataFreq), -1);
  SwigClassWSNProxy.mark = 0;
  SwigClassWSNProxy.destroy = (void (*)(void *)) free_PlayerCc_WSNProxy;
  SwigClassWSNProxy.trackObjects = 0;
  
  SwigClassPlayerError.klass = rb_define_class_under(mPlayercpp, "PlayerError", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_PlayerCc__PlayerError, (void *) &SwigClassPlayerError);
  rb_define_alloc_func(SwigClassPlayerError.klass, _wrap_PlayerError_allocate);
  rb_define_method(SwigClassPlayerError.klass, "initialize", VALUEFUNC(_wrap_new_PlayerError), -1);
  rb_define_method(SwigClassPlayerError.klass, "GetErrorStr", VALUEFUNC(_wrap_PlayerError_GetErrorStr), -1);
  rb_define_method(SwigClassPlayerError.klass, "GetErrorFun", VALUEFUNC(_wrap_PlayerError_GetErrorFun), -1);
  rb_define_method(SwigClassPlayerError.klass, "GetErrorCode", VALUEFUNC(_wrap_PlayerError_GetErrorCode), -1);
  SwigClassPlayerError.mark = 0;
  SwigClassPlayerError.destroy = (void (*)(void *)) free_PlayerCc_PlayerError;
  SwigClassPlayerError.trackObjects = 0;
  rb_define_module_function(mPlayercpp, "<<", VALUEFUNC(_wrap___lshift__), -1);
  rb_define_const(mPlayercpp, "PLAYER_MAX_MESSAGE_SIZE", SWIG_From_int(static_cast< int >(8388608)));
  rb_define_const(mPlayercpp, "PLAYER_MAX_DRIVER_STRING_LEN", SWIG_From_int(static_cast< int >(64)));
  rb_define_const(mPlayercpp, "PLAYER_MAX_DEVICES", SWIG_From_int(static_cast< int >(4096)));
  rb_define_const(mPlayercpp, "PLAYER_MSGQUEUE_DEFAULT_MAXLEN", SWIG_From_int(static_cast< int >(1024)));
  rb_define_const(mPlayercpp, "PLAYER_IDENT_STRING", SWIG_FromCharPtr("Player v."));
  rb_define_const(mPlayercpp, "PLAYER_IDENT_STRLEN", SWIG_From_int(static_cast< int >(32)));
  rb_define_const(mPlayercpp, "PLAYER_KEYLEN", SWIG_From_int(static_cast< int >(32)));
  rb_define_const(mPlayercpp, "PLAYER_MSGTYPE_DATA", SWIG_From_int(static_cast< int >(1)));
  rb_define_const(mPlayercpp, "PLAYER_MSGTYPE_CMD", SWIG_From_int(static_cast< int >(2)));
  rb_define_const(mPlayercpp, "PLAYER_MSGTYPE_REQ", SWIG_From_int(static_cast< int >(3)));
  rb_define_const(mPlayercpp, "PLAYER_MSGTYPE_RESP_ACK", SWIG_From_int(static_cast< int >(4)));
  rb_define_const(mPlayercpp, "PLAYER_MSGTYPE_SYNCH", SWIG_From_int(static_cast< int >(5)));
  rb_define_const(mPlayercpp, "PLAYER_MSGTYPE_RESP_NACK", SWIG_From_int(static_cast< int >(6)));
  
  SwigClassPlayer_devaddr_t.klass = rb_define_class_under(mPlayercpp, "Player_devaddr_t", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_player_devaddr, (void *) &SwigClassPlayer_devaddr_t);
  rb_define_alloc_func(SwigClassPlayer_devaddr_t.klass, _wrap_player_devaddr_t_allocate);
  rb_define_method(SwigClassPlayer_devaddr_t.klass, "initialize", VALUEFUNC(_wrap_new_player_devaddr_t), -1);
  rb_define_method(SwigClassPlayer_devaddr_t.klass, "host=", VALUEFUNC(_wrap_player_devaddr_t_host_set), -1);
  rb_define_method(SwigClassPlayer_devaddr_t.klass, "host", VALUEFUNC(_wrap_player_devaddr_t_host_get), -1);
  rb_define_method(SwigClassPlayer_devaddr_t.klass, "robot=", VALUEFUNC(_wrap_player_devaddr_t_robot_set), -1);
  rb_define_method(SwigClassPlayer_devaddr_t.klass, "robot", VALUEFUNC(_wrap_player_devaddr_t_robot_get), -1);
  rb_define_method(SwigClassPlayer_devaddr_t.klass, "interf=", VALUEFUNC(_wrap_player_devaddr_t_interf_set), -1);
  rb_define_method(SwigClassPlayer_devaddr_t.klass, "interf", VALUEFUNC(_wrap_player_devaddr_t_interf_get), -1);
  rb_define_method(SwigClassPlayer_devaddr_t.klass, "index=", VALUEFUNC(_wrap_player_devaddr_t_index_set), -1);
  rb_define_method(SwigClassPlayer_devaddr_t.klass, "index", VALUEFUNC(_wrap_player_devaddr_t_index_get), -1);
  SwigClassPlayer_devaddr_t.mark = 0;
  SwigClassPlayer_devaddr_t.destroy = (void (*)(void *)) free_player_devaddr;
  SwigClassPlayer_devaddr_t.trackObjects = 0;
  
  SwigClassPlayer_msghdr_t.klass = rb_define_class_under(mPlayercpp, "Player_msghdr_t", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_player_msghdr, (void *) &SwigClassPlayer_msghdr_t);
  rb_define_alloc_func(SwigClassPlayer_msghdr_t.klass, _wrap_player_msghdr_t_allocate);
  rb_define_method(SwigClassPlayer_msghdr_t.klass, "initialize", VALUEFUNC(_wrap_new_player_msghdr_t), -1);
  rb_define_method(SwigClassPlayer_msghdr_t.klass, "addr=", VALUEFUNC(_wrap_player_msghdr_t_addr_set), -1);
  rb_define_method(SwigClassPlayer_msghdr_t.klass, "addr", VALUEFUNC(_wrap_player_msghdr_t_addr_get), -1);
  rb_define_method(SwigClassPlayer_msghdr_t.klass, "type=", VALUEFUNC(_wrap_player_msghdr_t_type_set), -1);
  rb_define_method(SwigClassPlayer_msghdr_t.klass, "type", VALUEFUNC(_wrap_player_msghdr_t_type_get), -1);
  rb_define_method(SwigClassPlayer_msghdr_t.klass, "subtype=", VALUEFUNC(_wrap_player_msghdr_t_subtype_set), -1);
  rb_define_method(SwigClassPlayer_msghdr_t.klass, "subtype", VALUEFUNC(_wrap_player_msghdr_t_subtype_get), -1);
  rb_define_method(SwigClassPlayer_msghdr_t.klass, "timestamp=", VALUEFUNC(_wrap_player_msghdr_t_timestamp_set), -1);
  rb_define_method(SwigClassPlayer_msghdr_t.klass, "timestamp", VALUEFUNC(_wrap_player_msghdr_t_timestamp_get), -1);
  rb_define_method(SwigClassPlayer_msghdr_t.klass, "seq=", VALUEFUNC(_wrap_player_msghdr_t_seq_set), -1);
  rb_define_method(SwigClassPlayer_msghdr_t.klass, "seq", VALUEFUNC(_wrap_player_msghdr_t_seq_get), -1);
  rb_define_method(SwigClassPlayer_msghdr_t.klass, "size=", VALUEFUNC(_wrap_player_msghdr_t_size_set), -1);
  rb_define_method(SwigClassPlayer_msghdr_t.klass, "size", VALUEFUNC(_wrap_player_msghdr_t_size_get), -1);
  SwigClassPlayer_msghdr_t.mark = 0;
  SwigClassPlayer_msghdr_t.destroy = (void (*)(void *)) free_player_msghdr;
  SwigClassPlayer_msghdr_t.trackObjects = 0;
  
  SwigClassPlayer_point_2d_t.klass = rb_define_class_under(mPlayercpp, "Player_point_2d_t", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_player_point_2d, (void *) &SwigClassPlayer_point_2d_t);
  rb_define_alloc_func(SwigClassPlayer_point_2d_t.klass, _wrap_player_point_2d_t_allocate);
  rb_define_method(SwigClassPlayer_point_2d_t.klass, "initialize", VALUEFUNC(_wrap_new_player_point_2d_t), -1);
  rb_define_method(SwigClassPlayer_point_2d_t.klass, "px=", VALUEFUNC(_wrap_player_point_2d_t_px_set), -1);
  rb_define_method(SwigClassPlayer_point_2d_t.klass, "px", VALUEFUNC(_wrap_player_point_2d_t_px_get), -1);
  rb_define_method(SwigClassPlayer_point_2d_t.klass, "py=", VALUEFUNC(_wrap_player_point_2d_t_py_set), -1);
  rb_define_method(SwigClassPlayer_point_2d_t.klass, "py", VALUEFUNC(_wrap_player_point_2d_t_py_get), -1);
  SwigClassPlayer_point_2d_t.mark = 0;
  SwigClassPlayer_point_2d_t.destroy = (void (*)(void *)) free_player_point_2d;
  SwigClassPlayer_point_2d_t.trackObjects = 0;
  
  SwigClassPlayer_point_3d_t.klass = rb_define_class_under(mPlayercpp, "Player_point_3d_t", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_player_point_3d, (void *) &SwigClassPlayer_point_3d_t);
  rb_define_alloc_func(SwigClassPlayer_point_3d_t.klass, _wrap_player_point_3d_t_allocate);
  rb_define_method(SwigClassPlayer_point_3d_t.klass, "initialize", VALUEFUNC(_wrap_new_player_point_3d_t), -1);
  rb_define_method(SwigClassPlayer_point_3d_t.klass, "px=", VALUEFUNC(_wrap_player_point_3d_t_px_set), -1);
  rb_define_method(SwigClassPlayer_point_3d_t.klass, "px", VALUEFUNC(_wrap_player_point_3d_t_px_get), -1);
  rb_define_method(SwigClassPlayer_point_3d_t.klass, "py=", VALUEFUNC(_wrap_player_point_3d_t_py_set), -1);
  rb_define_method(SwigClassPlayer_point_3d_t.klass, "py", VALUEFUNC(_wrap_player_point_3d_t_py_get), -1);
  rb_define_method(SwigClassPlayer_point_3d_t.klass, "pz=", VALUEFUNC(_wrap_player_point_3d_t_pz_set), -1);
  rb_define_method(SwigClassPlayer_point_3d_t.klass, "pz", VALUEFUNC(_wrap_player_point_3d_t_pz_get), -1);
  SwigClassPlayer_point_3d_t.mark = 0;
  SwigClassPlayer_point_3d_t.destroy = (void (*)(void *)) free_player_point_3d;
  SwigClassPlayer_point_3d_t.trackObjects = 0;
  
  SwigClassPlayer_orientation_3d_t.klass = rb_define_class_under(mPlayercpp, "Player_orientation_3d_t", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_player_orientation_3d, (void *) &SwigClassPlayer_orientation_3d_t);
  rb_define_alloc_func(SwigClassPlayer_orientation_3d_t.klass, _wrap_player_orientation_3d_t_allocate);
  rb_define_method(SwigClassPlayer_orientation_3d_t.klass, "initialize", VALUEFUNC(_wrap_new_player_orientation_3d_t), -1);
  rb_define_method(SwigClassPlayer_orientation_3d_t.klass, "proll=", VALUEFUNC(_wrap_player_orientation_3d_t_proll_set), -1);
  rb_define_method(SwigClassPlayer_orientation_3d_t.klass, "proll", VALUEFUNC(_wrap_player_orientation_3d_t_proll_get), -1);
  rb_define_method(SwigClassPlayer_orientation_3d_t.klass, "ppitch=", VALUEFUNC(_wrap_player_orientation_3d_t_ppitch_set), -1);
  rb_define_method(SwigClassPlayer_orientation_3d_t.klass, "ppitch", VALUEFUNC(_wrap_player_orientation_3d_t_ppitch_get), -1);
  rb_define_method(SwigClassPlayer_orientation_3d_t.klass, "pyaw=", VALUEFUNC(_wrap_player_orientation_3d_t_pyaw_set), -1);
  rb_define_method(SwigClassPlayer_orientation_3d_t.klass, "pyaw", VALUEFUNC(_wrap_player_orientation_3d_t_pyaw_get), -1);
  SwigClassPlayer_orientation_3d_t.mark = 0;
  SwigClassPlayer_orientation_3d_t.destroy = (void (*)(void *)) free_player_orientation_3d;
  SwigClassPlayer_orientation_3d_t.trackObjects = 0;
  
  SwigClassPlayer_pose2d_t.klass = rb_define_class_under(mPlayercpp, "Player_pose2d_t", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_player_pose2d, (void *) &SwigClassPlayer_pose2d_t);
  rb_define_alloc_func(SwigClassPlayer_pose2d_t.klass, _wrap_player_pose2d_t_allocate);
  rb_define_method(SwigClassPlayer_pose2d_t.klass, "initialize", VALUEFUNC(_wrap_new_player_pose2d_t), -1);
  rb_define_method(SwigClassPlayer_pose2d_t.klass, "px=", VALUEFUNC(_wrap_player_pose2d_t_px_set), -1);
  rb_define_method(SwigClassPlayer_pose2d_t.klass, "px", VALUEFUNC(_wrap_player_pose2d_t_px_get), -1);
  rb_define_method(SwigClassPlayer_pose2d_t.klass, "py=", VALUEFUNC(_wrap_player_pose2d_t_py_set), -1);
  rb_define_method(SwigClassPlayer_pose2d_t.klass, "py", VALUEFUNC(_wrap_player_pose2d_t_py_get), -1);
  rb_define_method(SwigClassPlayer_pose2d_t.klass, "pa=", VALUEFUNC(_wrap_player_pose2d_t_pa_set), -1);
  rb_define_method(SwigClassPlayer_pose2d_t.klass, "pa", VALUEFUNC(_wrap_player_pose2d_t_pa_get), -1);
  SwigClassPlayer_pose2d_t.mark = 0;
  SwigClassPlayer_pose2d_t.destroy = (void (*)(void *)) free_player_pose2d;
  SwigClassPlayer_pose2d_t.trackObjects = 0;
  
  SwigClassPlayer_pose3d_t.klass = rb_define_class_under(mPlayercpp, "Player_pose3d_t", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_player_pose3d, (void *) &SwigClassPlayer_pose3d_t);
  rb_define_alloc_func(SwigClassPlayer_pose3d_t.klass, _wrap_player_pose3d_t_allocate);
  rb_define_method(SwigClassPlayer_pose3d_t.klass, "initialize", VALUEFUNC(_wrap_new_player_pose3d_t), -1);
  rb_define_method(SwigClassPlayer_pose3d_t.klass, "px=", VALUEFUNC(_wrap_player_pose3d_t_px_set), -1);
  rb_define_method(SwigClassPlayer_pose3d_t.klass, "px", VALUEFUNC(_wrap_player_pose3d_t_px_get), -1);
  rb_define_method(SwigClassPlayer_pose3d_t.klass, "py=", VALUEFUNC(_wrap_player_pose3d_t_py_set), -1);
  rb_define_method(SwigClassPlayer_pose3d_t.klass, "py", VALUEFUNC(_wrap_player_pose3d_t_py_get), -1);
  rb_define_method(SwigClassPlayer_pose3d_t.klass, "pz=", VALUEFUNC(_wrap_player_pose3d_t_pz_set), -1);
  rb_define_method(SwigClassPlayer_pose3d_t.klass, "pz", VALUEFUNC(_wrap_player_pose3d_t_pz_get), -1);
  rb_define_method(SwigClassPlayer_pose3d_t.klass, "proll=", VALUEFUNC(_wrap_player_pose3d_t_proll_set), -1);
  rb_define_method(SwigClassPlayer_pose3d_t.klass, "proll", VALUEFUNC(_wrap_player_pose3d_t_proll_get), -1);
  rb_define_method(SwigClassPlayer_pose3d_t.klass, "ppitch=", VALUEFUNC(_wrap_player_pose3d_t_ppitch_set), -1);
  rb_define_method(SwigClassPlayer_pose3d_t.klass, "ppitch", VALUEFUNC(_wrap_player_pose3d_t_ppitch_get), -1);
  rb_define_method(SwigClassPlayer_pose3d_t.klass, "pyaw=", VALUEFUNC(_wrap_player_pose3d_t_pyaw_set), -1);
  rb_define_method(SwigClassPlayer_pose3d_t.klass, "pyaw", VALUEFUNC(_wrap_player_pose3d_t_pyaw_get), -1);
  SwigClassPlayer_pose3d_t.mark = 0;
  SwigClassPlayer_pose3d_t.destroy = (void (*)(void *)) free_player_pose3d;
  SwigClassPlayer_pose3d_t.trackObjects = 0;
  
  SwigClassPlayer_bbox2d_t.klass = rb_define_class_under(mPlayercpp, "Player_bbox2d_t", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_player_bbox2d, (void *) &SwigClassPlayer_bbox2d_t);
  rb_define_alloc_func(SwigClassPlayer_bbox2d_t.klass, _wrap_player_bbox2d_t_allocate);
  rb_define_method(SwigClassPlayer_bbox2d_t.klass, "initialize", VALUEFUNC(_wrap_new_player_bbox2d_t), -1);
  rb_define_method(SwigClassPlayer_bbox2d_t.klass, "sw=", VALUEFUNC(_wrap_player_bbox2d_t_sw_set), -1);
  rb_define_method(SwigClassPlayer_bbox2d_t.klass, "sw", VALUEFUNC(_wrap_player_bbox2d_t_sw_get), -1);
  rb_define_method(SwigClassPlayer_bbox2d_t.klass, "sl=", VALUEFUNC(_wrap_player_bbox2d_t_sl_set), -1);
  rb_define_method(SwigClassPlayer_bbox2d_t.klass, "sl", VALUEFUNC(_wrap_player_bbox2d_t_sl_get), -1);
  SwigClassPlayer_bbox2d_t.mark = 0;
  SwigClassPlayer_bbox2d_t.destroy = (void (*)(void *)) free_player_bbox2d;
  SwigClassPlayer_bbox2d_t.trackObjects = 0;
  
  SwigClassPlayer_bbox3d_t.klass = rb_define_class_under(mPlayercpp, "Player_bbox3d_t", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_player_bbox3d, (void *) &SwigClassPlayer_bbox3d_t);
  rb_define_alloc_func(SwigClassPlayer_bbox3d_t.klass, _wrap_player_bbox3d_t_allocate);
  rb_define_method(SwigClassPlayer_bbox3d_t.klass, "initialize", VALUEFUNC(_wrap_new_player_bbox3d_t), -1);
  rb_define_method(SwigClassPlayer_bbox3d_t.klass, "sw=", VALUEFUNC(_wrap_player_bbox3d_t_sw_set), -1);
  rb_define_method(SwigClassPlayer_bbox3d_t.klass, "sw", VALUEFUNC(_wrap_player_bbox3d_t_sw_get), -1);
  rb_define_method(SwigClassPlayer_bbox3d_t.klass, "sl=", VALUEFUNC(_wrap_player_bbox3d_t_sl_set), -1);
  rb_define_method(SwigClassPlayer_bbox3d_t.klass, "sl", VALUEFUNC(_wrap_player_bbox3d_t_sl_get), -1);
  rb_define_method(SwigClassPlayer_bbox3d_t.klass, "sh=", VALUEFUNC(_wrap_player_bbox3d_t_sh_set), -1);
  rb_define_method(SwigClassPlayer_bbox3d_t.klass, "sh", VALUEFUNC(_wrap_player_bbox3d_t_sh_get), -1);
  SwigClassPlayer_bbox3d_t.mark = 0;
  SwigClassPlayer_bbox3d_t.destroy = (void (*)(void *)) free_player_bbox3d;
  SwigClassPlayer_bbox3d_t.trackObjects = 0;
  
  SwigClassPlayer_blackboard_entry_t.klass = rb_define_class_under(mPlayercpp, "Player_blackboard_entry_t", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_player_blackboard_entry, (void *) &SwigClassPlayer_blackboard_entry_t);
  rb_define_alloc_func(SwigClassPlayer_blackboard_entry_t.klass, _wrap_player_blackboard_entry_t_allocate);
  rb_define_method(SwigClassPlayer_blackboard_entry_t.klass, "initialize", VALUEFUNC(_wrap_new_player_blackboard_entry_t), -1);
  rb_define_method(SwigClassPlayer_blackboard_entry_t.klass, "key_count=", VALUEFUNC(_wrap_player_blackboard_entry_t_key_count_set), -1);
  rb_define_method(SwigClassPlayer_blackboard_entry_t.klass, "key_count", VALUEFUNC(_wrap_player_blackboard_entry_t_key_count_get), -1);
  rb_define_method(SwigClassPlayer_blackboard_entry_t.klass, "key=", VALUEFUNC(_wrap_player_blackboard_entry_t_key_set), -1);
  rb_define_method(SwigClassPlayer_blackboard_entry_t.klass, "key", VALUEFUNC(_wrap_player_blackboard_entry_t_key_get), -1);
  rb_define_method(SwigClassPlayer_blackboard_entry_t.klass, "group_count=", VALUEFUNC(_wrap_player_blackboard_entry_t_group_count_set), -1);
  rb_define_method(SwigClassPlayer_blackboard_entry_t.klass, "group_count", VALUEFUNC(_wrap_player_blackboard_entry_t_group_count_get), -1);
  rb_define_method(SwigClassPlayer_blackboard_entry_t.klass, "group=", VALUEFUNC(_wrap_player_blackboard_entry_t_group_set), -1);
  rb_define_method(SwigClassPlayer_blackboard_entry_t.klass, "group", VALUEFUNC(_wrap_player_blackboard_entry_t_group_get), -1);
  rb_define_method(SwigClassPlayer_blackboard_entry_t.klass, "type=", VALUEFUNC(_wrap_player_blackboard_entry_t_type_set), -1);
  rb_define_method(SwigClassPlayer_blackboard_entry_t.klass, "type", VALUEFUNC(_wrap_player_blackboard_entry_t_type_get), -1);
  rb_define_method(SwigClassPlayer_blackboard_entry_t.klass, "subtype=", VALUEFUNC(_wrap_player_blackboard_entry_t_subtype_set), -1);
  rb_define_method(SwigClassPlayer_blackboard_entry_t.klass, "subtype", VALUEFUNC(_wrap_player_blackboard_entry_t_subtype_get), -1);
  rb_define_method(SwigClassPlayer_blackboard_entry_t.klass, "data_count=", VALUEFUNC(_wrap_player_blackboard_entry_t_data_count_set), -1);
  rb_define_method(SwigClassPlayer_blackboard_entry_t.klass, "data_count", VALUEFUNC(_wrap_player_blackboard_entry_t_data_count_get), -1);
  rb_define_method(SwigClassPlayer_blackboard_entry_t.klass, "data=", VALUEFUNC(_wrap_player_blackboard_entry_t_data_set), -1);
  rb_define_method(SwigClassPlayer_blackboard_entry_t.klass, "data", VALUEFUNC(_wrap_player_blackboard_entry_t_data_get), -1);
  rb_define_method(SwigClassPlayer_blackboard_entry_t.klass, "timestamp_sec=", VALUEFUNC(_wrap_player_blackboard_entry_t_timestamp_sec_set), -1);
  rb_define_method(SwigClassPlayer_blackboard_entry_t.klass, "timestamp_sec", VALUEFUNC(_wrap_player_blackboard_entry_t_timestamp_sec_get), -1);
  rb_define_method(SwigClassPlayer_blackboard_entry_t.klass, "timestamp_usec=", VALUEFUNC(_wrap_player_blackboard_entry_t_timestamp_usec_set), -1);
  rb_define_method(SwigClassPlayer_blackboard_entry_t.klass, "timestamp_usec", VALUEFUNC(_wrap_player_blackboard_entry_t_timestamp_usec_get), -1);
  SwigClassPlayer_blackboard_entry_t.mark = 0;
  SwigClassPlayer_blackboard_entry_t.destroy = (void (*)(void *)) free_player_blackboard_entry;
  SwigClassPlayer_blackboard_entry_t.trackObjects = 0;
  
  SwigClassPlayer_segment_t.klass = rb_define_class_under(mPlayercpp, "Player_segment_t", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_player_segment, (void *) &SwigClassPlayer_segment_t);
  rb_define_alloc_func(SwigClassPlayer_segment_t.klass, _wrap_player_segment_t_allocate);
  rb_define_method(SwigClassPlayer_segment_t.klass, "initialize", VALUEFUNC(_wrap_new_player_segment_t), -1);
  rb_define_method(SwigClassPlayer_segment_t.klass, "x0=", VALUEFUNC(_wrap_player_segment_t_x0_set), -1);
  rb_define_method(SwigClassPlayer_segment_t.klass, "x0", VALUEFUNC(_wrap_player_segment_t_x0_get), -1);
  rb_define_method(SwigClassPlayer_segment_t.klass, "y0=", VALUEFUNC(_wrap_player_segment_t_y0_set), -1);
  rb_define_method(SwigClassPlayer_segment_t.klass, "y0", VALUEFUNC(_wrap_player_segment_t_y0_get), -1);
  rb_define_method(SwigClassPlayer_segment_t.klass, "x1=", VALUEFUNC(_wrap_player_segment_t_x1_set), -1);
  rb_define_method(SwigClassPlayer_segment_t.klass, "x1", VALUEFUNC(_wrap_player_segment_t_x1_get), -1);
  rb_define_method(SwigClassPlayer_segment_t.klass, "y1=", VALUEFUNC(_wrap_player_segment_t_y1_set), -1);
  rb_define_method(SwigClassPlayer_segment_t.klass, "y1", VALUEFUNC(_wrap_player_segment_t_y1_get), -1);
  SwigClassPlayer_segment_t.mark = 0;
  SwigClassPlayer_segment_t.destroy = (void (*)(void *)) free_player_segment;
  SwigClassPlayer_segment_t.trackObjects = 0;
  
  SwigClassPlayer_extent2d_t.klass = rb_define_class_under(mPlayercpp, "Player_extent2d_t", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_player_extent2d, (void *) &SwigClassPlayer_extent2d_t);
  rb_define_alloc_func(SwigClassPlayer_extent2d_t.klass, _wrap_player_extent2d_t_allocate);
  rb_define_method(SwigClassPlayer_extent2d_t.klass, "initialize", VALUEFUNC(_wrap_new_player_extent2d_t), -1);
  rb_define_method(SwigClassPlayer_extent2d_t.klass, "x0=", VALUEFUNC(_wrap_player_extent2d_t_x0_set), -1);
  rb_define_method(SwigClassPlayer_extent2d_t.klass, "x0", VALUEFUNC(_wrap_player_extent2d_t_x0_get), -1);
  rb_define_method(SwigClassPlayer_extent2d_t.klass, "y0=", VALUEFUNC(_wrap_player_extent2d_t_y0_set), -1);
  rb_define_method(SwigClassPlayer_extent2d_t.klass, "y0", VALUEFUNC(_wrap_player_extent2d_t_y0_get), -1);
  rb_define_method(SwigClassPlayer_extent2d_t.klass, "x1=", VALUEFUNC(_wrap_player_extent2d_t_x1_set), -1);
  rb_define_method(SwigClassPlayer_extent2d_t.klass, "x1", VALUEFUNC(_wrap_player_extent2d_t_x1_get), -1);
  rb_define_method(SwigClassPlayer_extent2d_t.klass, "y1=", VALUEFUNC(_wrap_player_extent2d_t_y1_set), -1);
  rb_define_method(SwigClassPlayer_extent2d_t.klass, "y1", VALUEFUNC(_wrap_player_extent2d_t_y1_get), -1);
  SwigClassPlayer_extent2d_t.mark = 0;
  SwigClassPlayer_extent2d_t.destroy = (void (*)(void *)) free_player_extent2d;
  SwigClassPlayer_extent2d_t.trackObjects = 0;
  
  SwigClassPlayer_color_t.klass = rb_define_class_under(mPlayercpp, "Player_color_t", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_player_color, (void *) &SwigClassPlayer_color_t);
  rb_define_alloc_func(SwigClassPlayer_color_t.klass, _wrap_player_color_t_allocate);
  rb_define_method(SwigClassPlayer_color_t.klass, "initialize", VALUEFUNC(_wrap_new_player_color_t), -1);
  rb_define_method(SwigClassPlayer_color_t.klass, "alpha=", VALUEFUNC(_wrap_player_color_t_alpha_set), -1);
  rb_define_method(SwigClassPlayer_color_t.klass, "alpha", VALUEFUNC(_wrap_player_color_t_alpha_get), -1);
  rb_define_method(SwigClassPlayer_color_t.klass, "red=", VALUEFUNC(_wrap_player_color_t_red_set), -1);
  rb_define_method(SwigClassPlayer_color_t.klass, "red", VALUEFUNC(_wrap_player_color_t_red_get), -1);
  rb_define_method(SwigClassPlayer_color_t.klass, "green=", VALUEFUNC(_wrap_player_color_t_green_set), -1);
  rb_define_method(SwigClassPlayer_color_t.klass, "green", VALUEFUNC(_wrap_player_color_t_green_get), -1);
  rb_define_method(SwigClassPlayer_color_t.klass, "blue=", VALUEFUNC(_wrap_player_color_t_blue_set), -1);
  rb_define_method(SwigClassPlayer_color_t.klass, "blue", VALUEFUNC(_wrap_player_color_t_blue_get), -1);
  SwigClassPlayer_color_t.mark = 0;
  SwigClassPlayer_color_t.destroy = (void (*)(void *)) free_player_color;
  SwigClassPlayer_color_t.trackObjects = 0;
  
  SwigClassPlayer_bool_t.klass = rb_define_class_under(mPlayercpp, "Player_bool_t", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_player_bool, (void *) &SwigClassPlayer_bool_t);
  rb_define_alloc_func(SwigClassPlayer_bool_t.klass, _wrap_player_bool_t_allocate);
  rb_define_method(SwigClassPlayer_bool_t.klass, "initialize", VALUEFUNC(_wrap_new_player_bool_t), -1);
  rb_define_method(SwigClassPlayer_bool_t.klass, "state=", VALUEFUNC(_wrap_player_bool_t_state_set), -1);
  rb_define_method(SwigClassPlayer_bool_t.klass, "state", VALUEFUNC(_wrap_player_bool_t_state_get), -1);
  SwigClassPlayer_bool_t.mark = 0;
  SwigClassPlayer_bool_t.destroy = (void (*)(void *)) free_player_bool;
  SwigClassPlayer_bool_t.trackObjects = 0;
  
  SwigClassPlayer_uint32_t.klass = rb_define_class_under(mPlayercpp, "Player_uint32_t", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_player_uint32, (void *) &SwigClassPlayer_uint32_t);
  rb_define_alloc_func(SwigClassPlayer_uint32_t.klass, _wrap_player_uint32_t_allocate);
  rb_define_method(SwigClassPlayer_uint32_t.klass, "initialize", VALUEFUNC(_wrap_new_player_uint32_t), -1);
  rb_define_method(SwigClassPlayer_uint32_t.klass, "value=", VALUEFUNC(_wrap_player_uint32_t_value_set), -1);
  rb_define_method(SwigClassPlayer_uint32_t.klass, "value", VALUEFUNC(_wrap_player_uint32_t_value_get), -1);
  SwigClassPlayer_uint32_t.mark = 0;
  SwigClassPlayer_uint32_t.destroy = (void (*)(void *)) free_player_uint32;
  SwigClassPlayer_uint32_t.trackObjects = 0;
  rb_define_const(mPlayercpp, "PLAYER_CAPABILTIES_REQ", SWIG_From_int(static_cast< int >(255)));
  
  SwigClassPlayer_capabilities_req_t.klass = rb_define_class_under(mPlayercpp, "Player_capabilities_req_t", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_player_capabilities_req, (void *) &SwigClassPlayer_capabilities_req_t);
  rb_define_alloc_func(SwigClassPlayer_capabilities_req_t.klass, _wrap_player_capabilities_req_t_allocate);
  rb_define_method(SwigClassPlayer_capabilities_req_t.klass, "initialize", VALUEFUNC(_wrap_new_player_capabilities_req_t), -1);
  rb_define_method(SwigClassPlayer_capabilities_req_t.klass, "type=", VALUEFUNC(_wrap_player_capabilities_req_t_type_set), -1);
  rb_define_method(SwigClassPlayer_capabilities_req_t.klass, "type", VALUEFUNC(_wrap_player_capabilities_req_t_type_get), -1);
  rb_define_method(SwigClassPlayer_capabilities_req_t.klass, "subtype=", VALUEFUNC(_wrap_player_capabilities_req_t_subtype_set), -1);
  rb_define_method(SwigClassPlayer_capabilities_req_t.klass, "subtype", VALUEFUNC(_wrap_player_capabilities_req_t_subtype_get), -1);
  SwigClassPlayer_capabilities_req_t.mark = 0;
  SwigClassPlayer_capabilities_req_t.destroy = (void (*)(void *)) free_player_capabilities_req;
  SwigClassPlayer_capabilities_req_t.trackObjects = 0;
  rb_define_const(mPlayercpp, "PLAYER_GET_INTPROP_REQ", SWIG_From_int(static_cast< int >(254)));
  rb_define_const(mPlayercpp, "PLAYER_SET_INTPROP_REQ", SWIG_From_int(static_cast< int >(253)));
  rb_define_const(mPlayercpp, "PLAYER_GET_DBLPROP_REQ", SWIG_From_int(static_cast< int >(252)));
  rb_define_const(mPlayercpp, "PLAYER_SET_DBLPROP_REQ", SWIG_From_int(static_cast< int >(251)));
  rb_define_const(mPlayercpp, "PLAYER_GET_STRPROP_REQ", SWIG_From_int(static_cast< int >(250)));
  rb_define_const(mPlayercpp, "PLAYER_SET_STRPROP_REQ", SWIG_From_int(static_cast< int >(249)));
  rb_define_const(mPlayercpp, "PLAYER_GET_BOOLPROP_REQ", SWIG_From_int(static_cast< int >(248)));
  rb_define_const(mPlayercpp, "PLAYER_SET_BOOLPROP_REQ", SWIG_From_int(static_cast< int >(247)));
  
  SwigClassPlayer_boolprop_req_t.klass = rb_define_class_under(mPlayercpp, "Player_boolprop_req_t", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_player_boolprop_req, (void *) &SwigClassPlayer_boolprop_req_t);
  rb_define_alloc_func(SwigClassPlayer_boolprop_req_t.klass, _wrap_player_boolprop_req_t_allocate);
  rb_define_method(SwigClassPlayer_boolprop_req_t.klass, "initialize", VALUEFUNC(_wrap_new_player_boolprop_req_t), -1);
  rb_define_method(SwigClassPlayer_boolprop_req_t.klass, "key_count=", VALUEFUNC(_wrap_player_boolprop_req_t_key_count_set), -1);
  rb_define_method(SwigClassPlayer_boolprop_req_t.klass, "key_count", VALUEFUNC(_wrap_player_boolprop_req_t_key_count_get), -1);
  rb_define_method(SwigClassPlayer_boolprop_req_t.klass, "key=", VALUEFUNC(_wrap_player_boolprop_req_t_key_set), -1);
  rb_define_method(SwigClassPlayer_boolprop_req_t.klass, "key", VALUEFUNC(_wrap_player_boolprop_req_t_key_get), -1);
  rb_define_method(SwigClassPlayer_boolprop_req_t.klass, "value=", VALUEFUNC(_wrap_player_boolprop_req_t_value_set), -1);
  rb_define_method(SwigClassPlayer_boolprop_req_t.klass, "value", VALUEFUNC(_wrap_player_boolprop_req_t_value_get), -1);
  SwigClassPlayer_boolprop_req_t.mark = 0;
  SwigClassPlayer_boolprop_req_t.destroy = (void (*)(void *)) free_player_boolprop_req;
  SwigClassPlayer_boolprop_req_t.trackObjects = 0;
  
  SwigClassPlayer_intprop_req_t.klass = rb_define_class_under(mPlayercpp, "Player_intprop_req_t", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_player_intprop_req, (void *) &SwigClassPlayer_intprop_req_t);
  rb_define_alloc_func(SwigClassPlayer_intprop_req_t.klass, _wrap_player_intprop_req_t_allocate);
  rb_define_method(SwigClassPlayer_intprop_req_t.klass, "initialize", VALUEFUNC(_wrap_new_player_intprop_req_t), -1);
  rb_define_method(SwigClassPlayer_intprop_req_t.klass, "key_count=", VALUEFUNC(_wrap_player_intprop_req_t_key_count_set), -1);
  rb_define_method(SwigClassPlayer_intprop_req_t.klass, "key_count", VALUEFUNC(_wrap_player_intprop_req_t_key_count_get), -1);
  rb_define_method(SwigClassPlayer_intprop_req_t.klass, "key=", VALUEFUNC(_wrap_player_intprop_req_t_key_set), -1);
  rb_define_method(SwigClassPlayer_intprop_req_t.klass, "key", VALUEFUNC(_wrap_player_intprop_req_t_key_get), -1);
  rb_define_method(SwigClassPlayer_intprop_req_t.klass, "value=", VALUEFUNC(_wrap_player_intprop_req_t_value_set), -1);
  rb_define_method(SwigClassPlayer_intprop_req_t.klass, "value", VALUEFUNC(_wrap_player_intprop_req_t_value_get), -1);
  SwigClassPlayer_intprop_req_t.mark = 0;
  SwigClassPlayer_intprop_req_t.destroy = (void (*)(void *)) free_player_intprop_req;
  SwigClassPlayer_intprop_req_t.trackObjects = 0;
  
  SwigClassPlayer_dblprop_req_t.klass = rb_define_class_under(mPlayercpp, "Player_dblprop_req_t", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_player_dblprop_req, (void *) &SwigClassPlayer_dblprop_req_t);
  rb_define_alloc_func(SwigClassPlayer_dblprop_req_t.klass, _wrap_player_dblprop_req_t_allocate);
  rb_define_method(SwigClassPlayer_dblprop_req_t.klass, "initialize", VALUEFUNC(_wrap_new_player_dblprop_req_t), -1);
  rb_define_method(SwigClassPlayer_dblprop_req_t.klass, "key_count=", VALUEFUNC(_wrap_player_dblprop_req_t_key_count_set), -1);
  rb_define_method(SwigClassPlayer_dblprop_req_t.klass, "key_count", VALUEFUNC(_wrap_player_dblprop_req_t_key_count_get), -1);
  rb_define_method(SwigClassPlayer_dblprop_req_t.klass, "key=", VALUEFUNC(_wrap_player_dblprop_req_t_key_set), -1);
  rb_define_method(SwigClassPlayer_dblprop_req_t.klass, "key", VALUEFUNC(_wrap_player_dblprop_req_t_key_get), -1);
  rb_define_method(SwigClassPlayer_dblprop_req_t.klass, "value=", VALUEFUNC(_wrap_player_dblprop_req_t_value_set), -1);
  rb_define_method(SwigClassPlayer_dblprop_req_t.klass, "value", VALUEFUNC(_wrap_player_dblprop_req_t_value_get), -1);
  SwigClassPlayer_dblprop_req_t.mark = 0;
  SwigClassPlayer_dblprop_req_t.destroy = (void (*)(void *)) free_player_dblprop_req;
  SwigClassPlayer_dblprop_req_t.trackObjects = 0;
  
  SwigClassPlayer_strprop_req_t.klass = rb_define_class_under(mPlayercpp, "Player_strprop_req_t", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_player_strprop_req, (void *) &SwigClassPlayer_strprop_req_t);
  rb_define_alloc_func(SwigClassPlayer_strprop_req_t.klass, _wrap_player_strprop_req_t_allocate);
  rb_define_method(SwigClassPlayer_strprop_req_t.klass, "initialize", VALUEFUNC(_wrap_new_player_strprop_req_t), -1);
  rb_define_method(SwigClassPlayer_strprop_req_t.klass, "key_count=", VALUEFUNC(_wrap_player_strprop_req_t_key_count_set), -1);
  rb_define_method(SwigClassPlayer_strprop_req_t.klass, "key_count", VALUEFUNC(_wrap_player_strprop_req_t_key_count_get), -1);
  rb_define_method(SwigClassPlayer_strprop_req_t.klass, "key=", VALUEFUNC(_wrap_player_strprop_req_t_key_set), -1);
  rb_define_method(SwigClassPlayer_strprop_req_t.klass, "key", VALUEFUNC(_wrap_player_strprop_req_t_key_get), -1);
  rb_define_method(SwigClassPlayer_strprop_req_t.klass, "value_count=", VALUEFUNC(_wrap_player_strprop_req_t_value_count_set), -1);
  rb_define_method(SwigClassPlayer_strprop_req_t.klass, "value_count", VALUEFUNC(_wrap_player_strprop_req_t_value_count_get), -1);
  rb_define_method(SwigClassPlayer_strprop_req_t.klass, "value=", VALUEFUNC(_wrap_player_strprop_req_t_value_set), -1);
  rb_define_method(SwigClassPlayer_strprop_req_t.klass, "value", VALUEFUNC(_wrap_player_strprop_req_t_value_get), -1);
  SwigClassPlayer_strprop_req_t.mark = 0;
  SwigClassPlayer_strprop_req_t.destroy = (void (*)(void *)) free_player_strprop_req;
  SwigClassPlayer_strprop_req_t.trackObjects = 0;
}

